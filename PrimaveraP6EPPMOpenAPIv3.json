{
  "openapi": "3.0",
  "info": {
    "title": "P6 EPPM Rest API",
    "description": "The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.",
    "version": "2022.12.12",
    "x-summary": "The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style."
  },
  "tags": [
    {
      "name": "Activity",
      "description": "<p>The Activity service enables you to manage aspects of a project related to an activity. An activity is a unit of work performed during the course of a project. Activities have the following characteristics:</p> <ul> <li>They can be subdivided into activity steps</li> </ul> <ul> <li>They often have activity expenses and resource assignments associated with them</li> </ul> <ul> <li>They have a parent WBS (Note: Activities assigned to the root WBS are considered to be assigned to the project itself.)</li> </ul> <ul> <li>They can have user defined fields (UDFs) and codes assigned to them. To assign UDFs and activity codes to an activity, use the UDFValue and ActivityCodeAssignment services, respectively.</li> </ul>"
    },
    {
      "name": "ActivityCode",
      "description": "<p>Activity codes are user-defined codes to classify and categorize activities according to the organization's and project's needs. They can be defined by project as well as globally across all projects. Activity codes are hierarchical objects.</p><p>For example, if your organization has more than one location, you can create a Location code type with values such as New York, Los Angeles, and Chicago. You can then associate activities with a specific location, such as New York.</p><p>You can define three types of activity codes, global activity codes, EPS activity codes, and project activity codes. You can assign global activity codes and values to activities in all projects. You can assign EPS activity codes and values to activities only in projects in the EPS for which the codes were created. You can assign project activity codes and values to activities only in the project for which the codes were created. Each activity code can have an unlimited number of values.</p>"
    },
    {
      "name": "ActivityCodeAssignment",
      "description": "<p>An activity code assignment business object represents the assignment of an activity code to an activity. For each activity code type, an activity may have zero or one activity codes assigned.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its activity object ID and its activity code object ID.</p>"
    },
    {
      "name": "ActivityCodeType",
      "description": "<p>Activity code types provide a way of classifying activity codes. Activity codes are user-defined codes to classify and categorize activities according to the organization's and project's needs. For example, if your organization has more than one location, you can create a Location code type with values such as New York, Los Angeles, and Chicago. You can then associate activities with a specific location, such as New York. You can define activity codes at three different scopes: global activity codes, EPS activity codes, and project activity codes. You can assign global activity codes and values to activities in all projects. You can assign EPS and project activity codes and values to activities only in the EPS and project for which the codes were created. Each ActivityCode can have an unlimited number of values. You can change the scope of an ActivityCodeType from project to EPS, project to Global, and EPS to global. However, you cannot change the scope from EPS to project or from global to anything else. Within the EPS scope, you can always move an ActivityCodeType to a higher level in the EPS structure. However, moving it to a lower level or outside of the EPS hierarchy is possible only if the ActivityCodeType's values are not assigned to any activities. If the ActivityCodeType value assignment exists, an exception will be thrown.</p>"
    },
    {
      "name": "ActivityComment",
      "description": "<p>An activity comment business object represents a comment made on an activity.</p>"
    },
    {
      "name": "ActivityExpense",
      "description": "<p>Activity expenses are non-resource costs associated with a project and assigned to a project's activities. They are typically one-time expenditures for non-reusable items. Examples of expenses include materials, facilities, travel, overhead, and training.</p><p>You can categorize expenses, indicate a unit of measure for expenses, and specify whether an expense accrues at the start or end of an activity or uniformly over its duration. Each expense has a planned cost, actual cost, and estimated remaining cost.</p><p>Expenses are not the same as resources. Resources are time-based and generally extend across multiple activities and/or multiple projects. Examples of resources are personnel and equipment. Unlike resources, expenses are project-specific and they are not time-based. Expenses are not included when resources are leveled.</p><p>The ActivityExpense service supports user defined fields (UDFs). To assign UDFs to an activity expense, use the UDFValue service.</p>"
    },
    {
      "name": "ActivityFilter",
      "description": "<p>An activity filter business object represents a filter made for an activity.</p>"
    },
    {
      "name": "ActivityNote",
      "description": "<p>Use activity notes to specify one or more notes for an activity. You can specify one note on each activity for every notebook topic that exists. Notes can only be set as HTML.</p>"
    },
    {
      "name": "ActivityOwner",
      "description": "<p>Activity owner objects provide a way to specify a user to be in charge of an activity for statusing in P6. Instead of assigning resources to activities, a user is able to assign a specific user to the activity. The activity owner, in conjunction with Contributor module access, gives users similar capabilities as a resource with Contributor module access.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its activity object ID and its user object ID.</p>"
    },
    {
      "name": "ActivityPeriodActual",
      "description": "<p>Activity period actuals represent the actual values on an activity during a financial period.</p><p>The following rules apply to activity period actuals:</p><ul> <li>They can be tracked only for in-progress or completed activities.</li> </ul><ul> <li>Negative values are allowed.</li></ul><ul> <li>If both units and costs are simultaneously updated on a period actual instance, units are the driving value.</li></ul><ul> <li>There is no relation between the units and costs on a period actual instance.</li></ul><ul> <li>They must have at least one non-zero field value for a corresponding database record to exist.</li></ul><ul> <li>Costs can be calculated only when a project default price per unit is defined.</li></ul><ul> <li>Values for a particular resource type (labor, nonlabor, material) can be tracked at the activity level only if the activity has no resource assignments of the same type. If resource assignments exist, activity period actuals are derived from those assignments and cannot be edited.</li></ul><ul> <li>If assignments exist, activity period actual values (labor, non labor, material) are calculated from resource assignments of the corresponding type.</li></ul><ul> <li>For material resources, only ActualMaterialCost can be tracked.</li></ul><p>Note that this business object has a multi-part object ID, which is a combination of its financial period object ID and its activity object ID.</p>"
    },
    {
      "name": "ActivityRisk",
      "description": "<p>The activity risk object stores the relationship between a single Activity and a single Risk.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its activity object ID and its risk object ID.</p>"
    },
    {
      "name": "ActivityStep",
      "description": "<p>Activity steps provide a way to break activities down into smaller units and track the completion of those units. For example, the activity Prepare for System Integration and Testing might contain the following steps:</p><ul> <li>Establish test cases and test procedures</li> </ul><ul> <li>Create test data</li></ul><ul> <li>Update SDFs</li></ul><p>You can add as many steps to an activity as you need: some activities will require more steps to complete than others and some activities may require no additional steps at all. If progress occurs on the step, enter a percent complete or set the IsCompleted flag if the step is 100% complete. You can also assign additional information to steps, such as cost, start and finish dates, and text.</p><p>Weighted steps</p><p>Weighted steps enable you to track the progress of an activity based on the number of steps completed. When activity percent complete is specified to be based on activity steps, and physical is chosen as the activity's percent complete type, activity percent complete is updated based on the weight you assign to each activity step.</p><p>For example, in the activity Prepare for System Integration and Testing mentioned above, the steps are assigned weights of 3.0, 2.0, and 1.0 respectively. When you specify the step Establish Test Cases and Test Procedures to be complete, the activity's physical percent complete is updated to 50 percent (because the total weight for the steps in this activity is 6.0 and the weight for this step is 3.0; therefore, half the work on this activity, according to the weight of the steps, has been completed).</p><p>The ActivityStep service supports user defined fields (UDFs). Use the UDFValue service to assign UDFs.</p>"
    },
    {
      "name": "ActivityStepTemplate",
      "description": "<p>Activity step templates enable you to define a group of steps common to multiple activities, and then assign the template to activities. Your organization may have several activities that repeat within a project or across projects. For example, every time you start a project, several specifications must be written and approved. Developing a specification is a multi-step process that never changes.</p><p>As an example, the \"Write Specifications\" activity could have the following steps:</p><ul> <li>Submit initial spec</li></ul><ul> <li>Review initial spec</li></ul><ul> <li>Revise initial spec</li></ul><ul> <li>CFinal review</li></ul><ul> <li>Final revision</li></ul><p>These steps may apply to many or all \"Write Specifications\" activities in a project or across all projects. Rather than manually inputting these steps into each \"Write Specifications\" activity, you can create an activity step template containing these steps and assign the template to each applicable activity at once. One activity step template may contain several activity steps. Each activity template step is represented by the ActivityStepTemplateItem business object.</p><p>This is a read-only business object.</p>"
    },
    {
      "name": "ActivityStepTemplateItem",
      "description": "<p>An activity step template item is one of the defined steps in the associated activity template. See the ActivityStepTemplate Service for more information about activity step templates. This is a read-only service.</p><p>The ActivityStepTemplateItem service supports user defined fields (UDFs). Use the UDFValue Service to read the associated UDF assignments.</p>"
    },
    {
      "name": "BaselineProject",
      "description": "<p>A baseline is a complete copy of a project plan that you can compare to the current schedule to evaluate progress. Baselines can be used to perform cost and schedule analysis. Before you update a schedule for the first time, you should create a baseline plan in the Project Management application.</p><p>The simplest baseline plan is a complete copy, or snapshot, of the original schedule. This snapshot provides a target against which you can track a project's cost, schedule, and performance. When you create a baseline, you can save a copy of the current project to use as the baseline or you can choose to convert another project in the EPS hierarchy to a baseline for the current project.</p><p>You can save an unlimited number of baselines per project; however, the number of baselines you can actually save per project is determined by administrative preference settings, which are typically controlled by the project controls coordinator or administrator. Regardless of the number of baselines you save for a project, at any given time you can select only up to three baselines for comparison purposes. The Baselines feature includes an option for you to specify which baselines you want to use for comparison. You must select a primary baseline. The primary baseline is used for project/activity usage spreadsheets and profiles, as well as earned value calculations. Second and third baselines are not required.</p><p>BaselineProjects may not be directly summarized by the summarizer job service. Baseline projects will have summary data if the summarizer job service was used to summarize the project that was used to create the baseline before the baseline was created. The StartDate and FinishDate fields are based on summary data.</p><p>This business object supports user defined fields (UDFs) and codes. Use the UDFValue business object to assign UDFs, and the ProjectCodeAssignment business object to assign ProjectCodes</p>"
    },
    {
      "name": "BaselineType",
      "description": "<p>Since the large number of baselines per project could be challenging to maintain, baseline types are introduced to help categorize, or track, multiple baselines for a single project. By assigning a type to a baseline that reflects its purpose, baseline types help you to maintain or track a large number of baselines in a project. For example, you could use the baseline types 'initial planning', 'what-if', and 'midproject' to organize a project's baselines. The BaselineType service enables you to create new baseline types or maintain (update, delete) existing ones. The BaselineType Service also allows you to load multiple associated BaselineProject objects from the database.</p>"
    },
    {
      "name": "CBS",
      "description": "<p>You can use Primavera Unifier to perform advanced cost, cash flow and earned value analysis on your P6 projects.</p><p>If your P6 deployment is integrated with Primavera Unifier, you can send P6 data to Primavera Unifier and import some data from Primavera Unifier back into P6. Once the link between a P6 project and a Primavera Unifier project and schedule sheet or summary sheet is set up, P6 will retrieve the Cost Breakdown Structure (CBS) from the Primavera Unifier project regularly.</p>"
    },
    {
      "name": "CBSDurationSummary",
      "description": "<p>Provides a summary of the actual, planned, and remaining: duration, finish date, start date, and percent complete for an activity in a CBS.</p>"
    },
    {
      "name": "Calendar",
      "description": "<p>Calendars defined the available work hours in each calendar day. Three types exist: global, resource, and project. Either resource or global calendars can be assigned to resources, and either global or project calendars can be assigned to activities.</p><p>You can specify national holidays, your organization's holidays, project-specific work/nonworkdays, and resource vacation days. Calendar assignments are used for activity scheduling, tracking, and resource leveling. Whether an activity uses its assigned calendar or the calendar of an assigned resource depends on the activity type you specify.</p><p>You can link resource and project calendars to global calendars. Then, if you make changes to a global calendar, your changes apply to all resource and project calendars that are linked to the modified global calendar.</p>"
    },
    {
      "name": "CostAccount",
      "description": "<p>Cost accounts contain the organization's cost account IDs. Available across all projects, they support tracking of costs and earned value based on the organization's cost account IDs. Cost accounts are hierarchical objects.</p><p>You can specify a project's default cost account. This cost account is used for resource assignments to activities and project expenses in the open project.</p>"
    },
    {
      "name": "Currency",
      "description": "<p>Currencies allow you to specify the types of currencies you want to use for costs. A currency type is set for every database. The user is able to specify the currency, its symbol, decimal symbol, number of decimal places, the positive and negative currency format and the digit grouping symbol.</p>"
    },
    {
      "name": "Document",
      "description": "<p>Documents are guidelines, procedures, standards, plans, design templates, worksheets, or other information related to a project. A document, or work product, can provide standards and guidelines for performing project work, or it can be formally identified as a project standard. Documents can be identified as project deliverables that will be given to the end user or customer at the end of the project. Documents can be assigned to activities and to work breakdown structure (WBS) elements. You can maintain general information about documents, such as revision date, location, and author. Documents are hierarchical objects.</p><p>The Document service supports user defined fields (UDFs). Use the UDFValue service to assign UDFs.</p><p>Note: This service provides create, read, update, and delete operations that apply to WP and Docs. You cannot assign external documents to an activity or WBS using this service.</p>"
    },
    {
      "name": "DocumentCategory",
      "description": "<p>Document categories are used to organize and standardize documents across projects.</p>"
    },
    {
      "name": "DocumentStatusCode",
      "description": "<p>Document status codes are used to identify and track the current state of work products and documents.</p>"
    },
    {
      "name": "EPS",
      "description": "<p>EPS (Enterprise Project Structure) is the hierarchical structure of projects in the database. It is used to perform top-down budgeting, manage multiple projects, implement coding standards, and maintain security throughout the enterprise. EPSs are hierarchical objects. EPS objects can only be deleted from the database if they and their EPS children have no child projects. To delete an EPS, you must first move or delete all projects that are children of that EPS or of that EPS node's EPS children.</p><p>The EPS service supports user defined fields (UDFs). Use the UDFValue service to assign UDFs.</p>"
    },
    {
      "name": "EPSBudgetChangeLog",
      "description": "<p>The EPS budget change log is used to track changes made from the original budget. You can set the status of the change as pending, approve or not approved, assign a responsible person, and specify the amount of the change. The EPS budget change log applies to EPS.</p>"
    },
    {
      "name": "EPSFunding",
      "description": "<p>An EPS funding represents the assignment of a funding source to a particular EPS. The assigned funding source has an amount and fund share, or percentage.</p>"
    },
    {
      "name": "EPSNote",
      "description": "<p>EPS notes are used as a way of specifying one or more notes on an EPS element. You may specify one note on each EPS for every notebook topic that exists.</p>"
    },
    {
      "name": "EPSSpendingPlan",
      "description": "<p>EPS spending plans represent monthly spending amounts for an EPS.</p>"
    },
    {
      "name": "Export",
      "description": "<p>This service lets you export one or more projects to XML. The ExportProject operation exports one project to XML, and the ExportProjects operation exports one or more projects to XML. For each project, the export includes the project and all related business objects supported by the exporter and in use in the project. For example, the project's activities, resource assignments, and associated resources are included. The Export service uses MTOM (Message Transmission Optimization Mechanism) to send the output files as attachments.</p>"
    },
    {
      "name": "FinancialPeriod",
      "description": "<p>Use customized financial periods to provide accurate display and reporting of actual units and costs. Rather than spreading costs evenly throughout the length of a project, users can view how actual costs were incurred by defining customized financial periods with a StartDate and EndDate. The minimum financial period duration is one day. Financial periods cannot overlap each other and do not have to be contiguous.</p><p>Past period actuals are stored at the activity and resource/role assignment level using the ActivityPeriodActual and ResourceAssignmentPeriodActual services.</p><p>You can not delete a financial period if there are existing activity or resource assignment period actual values stored. To delete a financial period with stored actual values, first use the ReadResourceAssignmentPeriodActuals operation of the ResourceAssignmentPeriodActual Service to load all resource assignment period actuals for that financial period, then delete each instance. Repeat the process for activity period actuals using the ReadActivityPeriodActuals operation of the ActivityPeriodActual Service.</p>"
    },
    {
      "name": "GlobalPreferences",
      "description": "<p>Global preferences are generally established by an administrator. There is only one global preferences object in the database and it cannot be deleted.</p>"
    },
    {
      "name": "GlobalProfile",
      "description": "<p>A global profile defines a set of privileges for access to global, or application-wide, information such as cost accounts, resources, and roles. To control user access to global information, you create global profiles, and then assign specific profiles to individual users. All users are required to have a global profile.</p><p>To allow complete access to all global information and all projects, a global profile called Admin Superuser is provided. You can assign the Admin Superuser profile to as many users as you like. However, since the Admin Superuser profile enables access to all information, you would typically restrict the number of users to whom you assign this profile.</p>"
    },
    {
      "name": "GlobalReplace",
      "description": "<p>P6 provides a way to replace data in multiple activities, WBS elements, and projects. You can configure a Global Search & Replace template to determine the data which will be replaced.</p><p>You can create a template to filter the data to be changed and specify what changes to make. You can save templates to be used later, and modify or delete templates. You can apply the changes and review the data before committing to the change. At the review stage, you can exclude certain rows from being changed and modify data in one or more rows before applying the change</p>"
    },
    {
      "name": "ImportOptionsTemplate",
      "description": "<p>Import options templates</p>"
    },
    {
      "name": "IssueHistory",
      "description": "<p>Issue histories represent the commentary recorded for a project issue. Separate entry comments are referenced by date and user who recorded the comment. Issue histories may only be added in the Project Management application.</p>"
    },
    {
      "name": "Job",
      "description": "<p>The Job service enables you to initiate and process specialized jobs asynchronously. You can check the status of a job by using the ReadJobStatus operation. To cancel a job, use the CancelJob operation. Note that cancelling the job has no effect if the job has already run.</p>"
    },
    {
      "name": "JobService",
      "description": "<p>You can import the byte array and data for the following job types:</p><ul><li>Schedule</li></ul><ul><li>Summarize</li></ul><ul><li>Apply Actuals</li></ul><ul><li>Store Period Performance</li></ul><ul><li>Sync Actual This Period</li></ul><ul><li>Level</li></ul><ul><li>Recalculate Assignment Costs</li></ul><ul><li>Send To Unifier</li></ul><ul><li>Update Baseline</li></ul><ul><li>Import Project</li></ul><ul><li>ScheduleCheck</li></ul><ul><li>ExportCheck</li></ul>"
    },
    {
      "name": "Location",
      "description": "<p>The location dictionary is used to store address locations including latitude and longitude. These locations can be assigned to resources, projects and/or activities.</p>"
    },
    {
      "name": "Login",
      "description": "Login Description"
    },
    {
      "name": "Logout",
      "description": "Logout Description"
    },
    {
      "name": "MSPTemplate",
      "description": "<p>Import options templates.</p>"
    },
    {
      "name": "OverheadCode",
      "description": "<p>Overhead codes are used to log timesheet hours for activities, which are not associated with any current projects.</p>"
    },
    {
      "name": "Project",
      "description": "<p>A project is a temporary endeavor undertaken to create a unique product, service, or result. Projects usually contain a work breakdown structure (WBS) and activities.</p><p>The Project service supports user defined fields (UDFs) and codes. Use the UDFValue Service to assign UDFs, and the ProjectCodeAssignment Service to assign project codes.</p>"
    },
    {
      "name": "ProjectBudgetChangeLog",
      "description": "<p>The project budget change log is used to track changes made from the original budget. You can set the status of the change as pending, approve or not approved, assign a responsible person, and specify the amount of the change. The project budget change log applies to each WBS and project.</p>"
    },
    {
      "name": "ProjectCode",
      "description": "<p>Project codes are user-defined codes to classify and categorize projects across the enterprise. They are defined globally. Project codes are hierarchical objects.</p><p>You can organize the projects in your EPS in groups according to specific categories, such as location and manager, using project codes. You can define unlimited hierarchical project codes to fulfill the filtering, sorting, and reporting requirements for your projects, and arrange them hierarchically for easier management and assignment.</p><p>The Project Codes dictionary is global to the entire enterprise. Assign a project code value to projects for each project code you create.</p><p>Use project codes to group projects, consolidate large amounts of information, and to distinguish one project from another. All projects assigned a value for a code are grouped by their corresponding values when you group and sort by project code in the Project Management application.</p>"
    },
    {
      "name": "ProjectCodeAssignment",
      "description": "<p>A project code assignment business object represents the assignment of a project code to a project. For each project code type, a project may have zero or one project codes assigned.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its project object ID and its project code object ID.</p>"
    },
    {
      "name": "ProjectCodeType",
      "description": "<p>Project code types provide a way of classifying project codes. Project codes are user-defined codes to classify and categorize projects across the enterprise. They are defined globally.</p><p>You can organize the projects in your EPS in groups according to specific categories, such as location and manager, using project codes. You can define unlimited hierarchical project codes to fulfill the filtering, sorting, and reporting requirements for your projects, and arrange them hierarchically for easier management and assignment.</p><p>The Project Codes dictionary is global to the entire enterprise. Assign a project code value to projects for each project code you create.</p><p>Use project codes to group projects, consolidate large amounts of information, and to distinguish one project from another. All projects assigned a value for a code are grouped by their corresponding values when you group and sort by project code in the Project Management application.</p>"
    },
    {
      "name": "ProjectDeployment",
      "description": "ProjectDeployment Description"
    },
    {
      "name": "ProjectDocument",
      "description": "<p>Documents are guidelines, procedures, standards, plans, design templates, worksheets, or other information related to a project. A document, or work product, can provide standards and guidelines for performing project work, or it can be formally identified as a project standard. Documents can be identified as project deliverables that will be given to the end user or customer at the end of the project. Documents can be assigned to activities and to work breakdown structure (WBS) elements. You can maintain general information about documents, such as revision date, location, and author. Documents are hierarchical objects.</p><p>This business object supports user defined fields (UDFs). Use the UDFValue business object to assign UDFs.</p>"
    },
    {
      "name": "ProjectFunding",
      "description": "<p>An project funding represents the assignment of a funding source to a particular project. The assigned funding source has an amount and fund share, or percentage.</p>"
    },
    {
      "name": "ProjectIssue",
      "description": "<p>Issues are known problems within a project plan that require attention or corrective action. You can manually create issues, or you can generate issues in the Project Management application by defining project thresholds. You can associate these issues with work breakdown structure (WBS) elements, activities, or resources.</p><p>When you add an issue, you can assign a priority level, tracking layout, and responsible manager to the issue. An issue's tracking layout assignment is helpful when you want to quickly open the tracking layout that best displays the problem area. An issue's responsible manager assignment identifies the person responsible for addressing the issue. You can record historical details for the issue and e-mail issue details, along with your notes and the issue's history, to any member of the project's staff.</p><p>This business object supports user defined fields (UDFs). Use the UDFValue business object to assign UDFs.</p>"
    },
    {
      "name": "ProjectNote",
      "description": "<p>Project notes are used as a way of specifying one or more notes on a project or WBS element. You may specify one note on each project or WBS for every notebook topic that exists.</p>"
    },
    {
      "name": "ProjectPortfolio",
      "description": "<p>A project portfolio consists of projects grouped together in some way that is meaningful to you. For example, one portfolio might contain projects that are the responsibility of a specific business unit, while another portfolio contains only projects budgeted for the next fiscal year.</p><p>There are two types of project portfolios: \"Manual\" and \"Filtered\". Manual portfolios contain zero or more projects that were specifically added. Filtered portfolios contain zero or more projects based on a filter that was specified in Primavera's Web application. The list of projects in a filtered portfolio is based on the results of the filter when it was first created. Only manual portfolios can be created through the Integration API, and their list of projects cannot be altered.</p>"
    },
    {
      "name": "ProjectProfile",
      "description": "<p>A project profile defines a set of privileges for access to project-specific information. Project profiles are assigned to users based on the OBS hierarchy. To control access to project-specific information, you create project profiles, and then assign specific OBS elements and associated project profiles to individual users. The assigned OBS element determines the EPS and WBS elements for which the user can access project information. The assigned project profile determines the type of access privileges the user has to that project information.</p><p>All WBS elements are required to have an assigned responsible OBS. If a user's project profile assignment includes a WBS element's responsible OBS, then the user can access all activities, risks, and issues related to that WBS element. Similarly, all thresholds and project issues also have an assigned responsible OBS. If a user's project profile assignment includes a threshold or issue's responsible OBS, then the user can access that threshold or issue.</p><p>A user is not required to have a profile for every project. However, unless a user's global profile is Admin Superuser, that user cannot access a project without a project profile. To allow complete access to a project/OBS assignment, a project profile is included named Project Superuser. You can apply the Project Superuser profile to as many users and for as many projects as you like.</p>"
    },
    {
      "name": "ProjectResource",
      "description": "<p>Primavera's resource planning feature allows you to do high-level project planning for future project or project that does not require resource assignments at the activity level. The resource planning feature allows you to allocate and manage resources at the project and WBS levels. If the LifeOfProjectFlag is true, the resource assignment is for the duration of the project, and so, if the project dates are pushed out, the resource assignment dates are pushed as well</p><p>If the LifeOfProjectFlag is false, the dates on the ProjectResource will be calculated from the dates on the child ProjectResourceQuantity objects.</p>"
    },
    {
      "name": "ProjectResourceCategory",
      "description": "<p>Project resource categories are used to categorize resource planning assignments.</p>"
    },
    {
      "name": "ProjectResourceQuantity",
      "description": "<p>The ProjectResourceQuantity object provides access to resource allocation hours per week for resources assigned to a project at the Project or WBS level. Usually there is one ProjectResourceQuantity object per week, and it corresponds to a record in the wbsrsrc_qty table. However, when a week contains days from more than one month, two ProjectResourceQuantity objects (and so, two records) will exist based on the two week fragments. They both have the same WeekStartDate but their MonthStartDate and week fragment data are different: The first ProjectResourceQuantity object holds data for the first week fragment, and its MonthStartDate has the same month as the WeekStartDate. The second ProjectResourceQuantity object holds data for the second week fragment, and its MonthStartDate is that of the next month.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its project resource object ID, its week start date, its month start date, and its quantity.</p>"
    },
    {
      "name": "ProjectSpendingPlan",
      "description": "<p>Project spending plans represent monthly spending amounts for a project or WBS.</p>"
    },
    {
      "name": "ProjectThreshold",
      "description": "<p>Project thresholds are used as a project management technique to monitor values within a specified tolerance range so that project issues can be identified and reported. For example, a threshold could be used to monitor Start Date variance or Total Float values.</p>"
    },
    {
      "name": "Relationship",
      "description": "<p>A relationship defines how an activity relates to the start or finish of another activity or assignment. Add relationships between activities to create a path through your schedule from the first activity to the last activity. These relationships, which form the logic of the project network, are used together with activity durations to determine schedule dates. An activity can have as many relationships as necessary to model the work that must be done. You can also identify relationships between activities that are in different projects; this type of relationship is referred to as an external relationship.</p>"
    },
    {
      "name": "Resource",
      "description": "<p>Resources include the personnel and equipment that perform work on activities across all projects. Resources are always time-based and are generally reused between activities and/or projects. You can create a resource pool that reflects your organization's resource structure and supports the assignment of resources to activities. You can also distinguish between labor and nonlabor resources. You can create and assign resource calendars and define a resource's roles, contact information, and time-varying prices. If a resource uses Timesheets, you can also assign a login name and password to the resource.</p><p>A resource may be specified as a primary resource when assigning to activities. An activity's primary resource is typically the resource who is responsible for coordinating an activity's work. Using Timesheets, the primary resource also updates the activity's start date, finish date, and expected end date. In addition, if an activity has any nonlabor resources, the primary resource may also be responsible for reporting the nonlabor resource's hours/units as well. With the exception of nonlabor resources, all other resources are responsible for reporting their own hours for assigned activities.</p>"
    },
    {
      "name": "ResourceAccess",
      "description": "<p>Resource access allows you to restrict a user's ability to access resources. If the User.AllResourceAccessFlag is True, the user has access to all resources and resource access does not apply. If the User.AllResourceAccessFlag is False, the user has restricted resource access. In this case, the user is assigned to a resource in the resource hierarchy and that resource becomes the user's root resource access node. The position of the user's root resource access node in the hierarchy determines the user's resource access. The user has access to that root resource access node and all of its children, but no other resources above in the hierarchy. If the user is not assigned to any resources, that user does not have access to resources. Admin Superusers always have all resource access.</p><p>Note that project access overrides resource access. If a user can access a project, the user is able to see all resources assigned to that project. The user can then assign these resources anywhere but will only be able to edit them if the user has resource access to them.</p><p>Resource Access business objects may not be updated. To change the values on a Resource Access object, create a new object with the desired values and delete the old object.</p>"
    },
    {
      "name": "ResourceAssignment",
      "description": "<p>Resource assignments track the work of resources or roles that are performing various activities. A resource may be assigned to the same activity more than once, but performing in different roles.</p><p>The ResourceAssignment services supports user defined fields (UDFs). Use the UDFValue Service to assign UDFs.</p>"
    },
    {
      "name": "ResourceAssignmentCreate",
      "description": "<p>Create resource assignments to track the work of resources or roles that perform various activities. The pending number of units, finish date, start date, and duration of a resource assignment may need approval to be overridden so that the resource assignment can reflect its actual values.,</p>"
    },
    {
      "name": "ResourceAssignmentPeriodActual",
      "description": "<p>Resource assignment period actuals represent the actual values on a resource assignment during a financial period.</p><p>The following rules apply for resource assignment period actuals:</p><ul> <li>They can only be tracked for in-progress or completed activities</li> </ul> <ul> <li>Negative values are allowed.</ul></li> <ul> <li>If both units and costs are simultaneously updated on a period actual instance, units are the driving value.</li></ul> <ul><li>They must have at least one non-zero field value for a corresponding database record to exist</li> </ul><ul><li>If activity period actuals exist and have valid values for a particular resource type, resource assignment period actuals are created automatically for the first assignment of the corresponding resource type. Thereafter, period actuals can only be tracked on the resource assignment, not at the activity level.</li></ul><ul><li>Costs can be calculated only when a resource price per unit is defined</li></ul><ul><li>Updating values in assignment period actuals should update the corresponding activity period values. However, for material resource assignments, the update to activity period actuals occurs only when material cost is changed on the assignment.</li></ul><ul><li>Creating an assignment period actual value results in the automatic creation of an activity period actual value if it does not already exist.</li></ul><ul><li>An activity period actual may not exist for a corresponding assignment period actual if only material units are being tracked in the assignment period actual instance.</li></ul><p>Note that this business object has a multi-part object ID; its object ID is a combination of its financial period object ID and its resource assignment object ID.</p>"
    },
    {
      "name": "ResourceAssignmentUpdate",
      "description": "<p>Resource assignments track the work of resources or roles that are performing various activities. The pending number of units, finish date, start date, and duration of a resource assignment may need approval to be overridden so that the resource assignment can reflect its actual values.</p>"
    },
    {
      "name": "ResourceCodeAssignment",
      "description": "<p>A resource code assignment business object represents the assignment of a resource code to a resource. For each resource code type, a resource may have zero or one resource codes assigned.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its resource object ID and its resource code object ID.</p>"
    },
    {
      "name": "ResourceCurve",
      "description": "<p>Resource curves enable you to specify how you want resource units or costs spread over the duration of an activity. Resource units and costs are distributed evenly during an activity unless you specify nonlinear distribution using curves.</p><p>You can assign a resource curve to any resource or role assignment on activities with a duration type of Fixed Duration and Units/Time or Fixed Duration and Units.</p><p>If timesheet data exists for the actuals, curves are ignored for the actuals and are spread using the timesheet data. Activities with timesheet data continue to spread the remaining units using the curve.</p><p>Notes</p><ul><li>Resource curves do not support expenses. The Accrual Type will continue to spread the expenses.</li></ul><ul><li>Resource lag is taken into consideration. The curve should begin on the \"lagged start date.\"</li></ul><ul><li>Resource curves are reflected in the Resource Usage Profile and Resource Usage Spreadsheet in the Project Management application.</li></ul>"
    },
    {
      "name": "ResourceHour",
      "description": "<p>A resource hour corresponds to an entry on a timesheet edited in Timesheets. Resource hours may not be exported directly by the XMLExporter, but all child resource hours are exported automatically when exporting timesheets. Resource hours are read only.</p>"
    },
    {
      "name": "ResourceRate",
      "description": "<p>Resource rates provide a way of specifying multiple resource prices and maximum units per time values that vary over time.</p>"
    },
    {
      "name": "ResourceRole",
      "description": "<p>A resource role object represents an association between a resource object and a role object. A proficiency may be assigned to a resource role.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its resource object ID and its role object ID.</p>"
    },
    {
      "name": "ResourceTeam",
      "description": "<p>A resource team consists of resources grouped together in some way that is meaningful to you.</p>"
    },
    {
      "name": "Risk",
      "description": "<p>The risk object represents a probabilistic event or condition which if it occurs has an impact (e.g. schedule, cost, quality, safety) on the project. Risks with negative impacts are threats; risks with positive impacts on the project are opportunities.</p><p>This business object supports user defined fields (UDFs). To assign UDFs to an activity expense, use the UDFValue service.</p>"
    },
    {
      "name": "RiskCategory",
      "description": "<p>The risk category object is used to categorize and organize project risks. A risk can only be associated with a single category. Categories help ensure a comprehensive and systematic way of identifying risks to a consistent level of detail and completeness. Technical, Operational, External are examples of risk categories that might apply to a typical project. Categories are global objects and are usually defined by an administrator.</p>"
    },
    {
      "name": "RiskImpact",
      "description": "<p>The risk impact object stores the pre-response qualitative value assigned to a risk for each of the risk thresholds.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its risk object ID and its risk threshold object ID. The risk threshold object ID is set based on the value used in risk threshold level object ID.</p>"
    },
    {
      "name": "RiskMatrix",
      "description": "<p>The risk matrix object contains the name and description of each probability and impact diagram (PID). The Risk Matrix is then used to qualitatively assess each risk and assign a score.</p>"
    },
    {
      "name": "RiskMatrixScore",
      "description": "<p>The risk matrix score object stores the score values from the probability and impact diagram (PID) of the risk score matrix.</p>"
    },
    {
      "name": "RiskMatrixThreshold",
      "description": "<p>The risk matrix threshold object creates a relationship between a RiskThreshold object and a RiskMatrix object. This allows a single RiskThreshold object to be associated with multiple RiskMatrix objects.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its risk threshold object ID and its risk score matrix object ID.</p>"
    },
    {
      "name": "RiskResponseAction",
      "description": "<p>The risk response action impact object is a post-risk response action qualitative value that is assigned to a risk for each of the risk thresholds.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its risk response action object ID and its risk threshold object ID. The risk threshold object ID is set based on the value used in risk threshold level object ID.</p>"
    },
    {
      "name": "RiskResponseActionImpact",
      "description": "<p>The risk response action object contains the detailed steps that need to occur to complete the risk response plan.</p><p>Multiple actions can be associated with one response plan and each action can be linked to an activity in the project.</p>"
    },
    {
      "name": "RiskResponsePlan",
      "description": "<p>The risk response plan object communicates how the project team plans to address the identified risk. A risk that is categorized as a threat has four types of response plans: accept, avoid, reduce, and transfer. A risk that is an opportunity has four different types of response plans: enhance, exploit, facilitate, and reject. The response plan can be comprised of multiple detailed actions or steps.</p>"
    },
    {
      "name": "RiskThreshold",
      "description": "<p>The risk threshold object contains the name, description, and type of each risk threshold. Risk thresholds provide a mechanism for setting up the criteria that is used to assess the risk.</p>"
    },
    {
      "name": "RiskThresholdLevel",
      "description": "<p>The risk threshold level object stores the level information (e.g. Low, Medium, High) for each risk threshold.</p>"
    },
    {
      "name": "Role",
      "description": "<p>Roles are project personnel job titles or skills, such as mechanical engineer, inspector, or carpenter. They represent a type of resource with a certain level of proficiency rather than a specific individual. Roles can also be assigned to specific resources to further identify that resource's skills. For example, a resource may have a role of a engineer and manager.</p><p>You can create a set of roles to assign to resources and activities in all projects in the enterprise. You can establish an unlimited number of roles and organize them in a hierarchy for easier management and assignment. The set of roles you assign to an activity defines the activity's skill requirements.</p><p>You can temporarily assign roles during the planning stages of the project to see how certain resources affect the schedule. Once you finalize your plans, you can replace the roles with resources that fulfill the role skill levels. Five proficiency levels can be assigned to roles: Master, Expert, Skilled, Proficient and Inexperienced.</p><p>Roles are hierarchical objects.</p>"
    },
    {
      "name": "RoleRate",
      "description": "<p>Role rates enable you to select a predefined price per unit for cost calculating when assigning the role to an activity. Roles are project personnel job titles or skills, such as mechanical engineer, inspector, or carpenter. They represent a type of resource with a certain level of proficiency rather than a specific individual. As resources, now roles can have different rates assigned to provide more flexibility for cost calculation. See also RateType, RateSource, and RateSourcePreference for more details on how rates can be used in cost calculation.</p>"
    },
    {
      "name": "ScheduleCheckOption",
      "description": "<p>View potential issues in a schedule. For example, the report might identify missing logic or a large number of constraints in the schedule.</p>"
    },
    {
      "name": "ScheduleOptions",
      "description": "<p>Specifies how the associated project is to be scheduled.</p><p>Note that this business object has a multi-part object ID; its object ID is a combination of its user object ID and its project object ID.</p><p>You may not create or delete schedule options; they may only be loaded and updated.</p>"
    },
    {
      "name": "Shift",
      "description": "<p>Shifts are used to define shift calendars for resources. A shift is comprised of one or more shift periods. The total duration of all shift periods in a shift always adds up to 24 hours, with one hour being the minimum shift period.</p><p>Shift hours are considered when calculating units and prices during leveling. The resource calendar is used to determine when the resource can work; the limits for that period are determined from the shift definition for that resource. The minimum resource availability for every shift must satisfy the minimum demand for the resource so that the resource can be leveled properly. Limits defined outside the boundaries of the shift definition are ignored. Since shifts are defined at the resource level, all projects are leveled using that resource according to the shift definition.</p>"
    },
    {
      "name": "Spread",
      "description": "<p>You use the Spread service to read time-phased unit and cost data. This enables you to track resource usage and availability. There are two primary types of spreads: Summarized and Live. Summarized spreads are based on the data calculated during the last time the Summarizer job service ran on the particular EPS or Project being accessed. Summarized spreads include EPS, project, WBS, project resource, and project role spreads. Live spreads do not have a dependency on the Summarizer job service and are always calculated from the current data. Live spreads include activity spreads and resource assignment spreads.</p>"
    },
    {
      "name": "Timesheet",
      "description": "<p>Timesheets are used to allow resources to enter status.</p><p>This business object has a multi-part object ID; its object ID is a combination of its timesheet period object ID and its resource object ID.</p>"
    },
    {
      "name": "TimesheetAudit",
      "description": "<p>The timesheet audit class facilitates reading the timesheet audit records, added to the PM database as triggered by user activity, one record at a time. Fields that can be loaded on the TimesheetAudit object include information about the approval and rejection history (e.g., reviewers and review dates), information about the timesheets (e.g., number of overhead, overtime, and project hours), and information about the audit (e.g, the date the timesheet audit was created). Timesheet audits are readonly.</p>"
    },
    {
      "name": "TimesheetDelegate",
      "description": "<p>Timesheet delegates provide resource and project managers the ability to assign a user to process their timesheets as a delegate. After selecting a delegate for their resources or projects, the resource or project manager can activate and disable the delegate's approval rights at any time. Timesheet delegates for resource managers can review timesheets for resources to whom the resource manager has been assigned as a timesheet approval manager. Timesheet delegates for a project manager can review timesheets for resources who are assigned to activities within the project(s) for which the project manager has been granted approval rights. A project manager can delegate approval rights to different users for each project.</p><p>TimesheetDelegates are readonly.</p>"
    },
    {
      "name": "TimesheetPeriod",
      "description": "<p>Timesheet periods indicate both the start date and duration of a group of assigned timesheets. Timesheet periods are read only.</p>"
    },
    {
      "name": "UpdateBaselineOption",
      "description": "<p>As a project progresses, you may want to update baseline data without restoring the baseline or creating a new baseline. When a project is in progress, creating a new baseline may not yield accurate comparison results. When you update a baseline, only the data types you select will be updated.</p>"
    },
    {
      "name": "User",
      "description": "<p>The set of application users who are allowed to use the system. Each user is assigned a global security profile and project security profile.</p><p>Note that the Password and MailServerPassword fields are writable fields only; these fields may not be loaded from the database and are therefore not included in the AllFields array. A user may only change his own password, and only if the old password is specified. An administrator may change any user's password and does not have to specify the user's old password when doing so.</p>"
    },
    {
      "name": "UserInterfaceView",
      "description": "<p>A user interface view is a customized view of P6 Web Access that enables and disables access to P6 Web Access functionality. You can assign a single user interface view to multiple users. However, every user has exactly one user interface view. The system assigns a default user interface view if one has not been specified for the user.</p><p>If you set the EnableUserToModifyViewSettingsFlag field in the User object to true, users can modify their copy of the user interface view. When a user changes the user interface view settings, the changes do not affect the settings of other users assigned to the same view.</p><p>When you assign a user interface view to a user, the new view replaces the user's current user interface view, including any modifications they may have made to the view.</p>"
    },
    {
      "name": "UserLicense",
      "description": "<p>A user license grants access to applications within the Primavera suite.</p><p>UserLicense business objects may not be updated. To change the values on a UserLicense object, create a new object with the desired values and delete the old object.</p>"
    },
    {
      "name": "UserOBS",
      "description": "<p>A UserOBS object represents an association between a user object and an OBS object. Users are assigned to global OBS elements to define the scope of project and EPS security for the users. For a user to have access to a project or EPS, the user must be assigned to an OBS element within that project or EPS. (Or, the user must have Admin Superuser privileges.) This gives the user access to any WBS areas their assigned OBS is responsible for.</p>"
    },
    {
      "name": "WBS",
      "description": "<p>The project work breakdown structure (WBS) is a hierarchical arrangement of the products and services produced during and by a project. Each element of a WBS may contain more-detailed WBS elements, activities, or both. WBS are hierarchical objects.</p><p>This business object supports user defined fields (UDFs). Use the UDFValue business object to assign UDFs.</p>"
    },
    {
      "name": "WBSMilestone",
      "description": "<p>WBS milestones are weighted milestones assigned at the WBS level that can be used for calculating performance percent complete</p><p>For each WBS element, set the EarnedValueComputeType to be WBS_MILESTONES_PERCENT_COMPLETE, then define as many milestones as you need and assign a level of significance or weight to each of them. As progress occurs and you mark each milestone complete, the WBS element's performance percent complete is calculated based on the weight of the milestone, independent of its lower-level activities.</p>"
    }
  ],
  "paths": {
    "/activityCodeAssignment/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityCodeAssignment"],
        "summary": "View ActivityCodeAssignment Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityCodeAssignmentFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityCodeAssignment field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeAssignment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityCodeAssignment-getFieldLength-{fieldName}-get",
        "x-filename-id": "activitycodeassignment-getfieldlength-fieldname-get"
      }
    },
    "/activityCodeAssignment": {
      "get": {
        "tags": ["ActivityCodeAssignment"],
        "summary": "Read ActivityCodeAssignments",
        "description": "Reads ActivityCodeAssignment objects from the database.",
        "operationId": "getActivityCodeAssignments",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityCodeAssignment>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityCodeAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeAssignment-load"
        },
        "x-internal-id": "activityCodeAssignment-get",
        "x-filename-id": "activitycodeassignment-get"
      },
      "put": {
        "tags": ["ActivityCodeAssignment"],
        "summary": "Update ActivityCodeAssignments",
        "description": "Send a request to this endpoint to update one or more activityCodeAssignment. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivityCodeAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of activityCodeAssignment objects.<p><p>Required fields: You must supply both the ActivityCodeTypeObjectId and ActivityObjectId fields when you use the Update ActivityCodeAssignments operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityCodeAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityCodeAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeAssignment-update"
        },
        "x-internal-id": "activityCodeAssignment-put",
        "x-filename-id": "activitycodeassignment-put"
      },
      "post": {
        "tags": ["ActivityCodeAssignment"],
        "summary": "Create ActivityCodeAssignments",
        "description": "Send a request to this endpoint to create one or more activityCodeAssignment. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityCodeAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityCodeAssignment objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityCodeAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityCodeAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CreateActivityCodeAssignmentsResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateActivityCodeAssignmentsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeAssignment-create"
        },
        "x-internal-id": "activityCodeAssignment-post",
        "x-filename-id": "activitycodeassignment-post"
      },
      "delete": {
        "tags": ["ActivityCodeAssignment"],
        "summary": "Delete ActivityCodeAssignments",
        "description": "Send a request to this endpoint to delete one or more activityCodeAssignment. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityCodeAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of activityCodeAssignment objects.<p><p>Required fields: You must supply both the ActivityCodeTypeObjectId and ActivityObjectId fields when you use the Delete ActivityCodeAssignments operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityCodeAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityCodeAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeAssignment-delete"
        },
        "x-internal-id": "activityCodeAssignment-delete",
        "x-filename-id": "activitycodeassignment-delete"
      }
    },
    "/activityCodeAssignment/fields": {
      "get": {
        "tags": ["ActivityCodeAssignment"],
        "summary": "View ActivityCodeAssignment fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityCodeAssignmentFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeAssignment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityCodeAssignment-fields-get",
        "x-filename-id": "activitycodeassignment-fields-get"
      }
    },
    "/activityCode/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityCode"],
        "summary": "View ActivityCode Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityCodeFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityCode field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCode-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityCode-getFieldLength-{fieldName}-get",
        "x-filename-id": "activitycode-getfieldlength-fieldname-get"
      }
    },
    "/activityCode": {
      "get": {
        "tags": ["ActivityCode"],
        "summary": "Read ActivityCodes",
        "description": "Reads ActivityCode objects from the database.",
        "operationId": "getActivityCodes",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityCode>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCode-load"
        },
        "x-internal-id": "activityCode-get",
        "x-filename-id": "activitycode-get"
      },
      "put": {
        "tags": ["ActivityCode"],
        "summary": "Update ActivityCodes",
        "description": "Send a request to this endpoint to update one or more activityCode. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivityCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityCode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityCode>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityCode"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCode-update"
        },
        "x-internal-id": "activityCode-put",
        "x-filename-id": "activitycode-put"
      },
      "post": {
        "tags": ["ActivityCode"],
        "summary": "Create ActivityCodes",
        "description": "Send a request to this endpoint to create one or more activityCode. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityCode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityCode>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityCode"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCode-create"
        },
        "x-internal-id": "activityCode-post",
        "x-filename-id": "activitycode-post"
      },
      "delete": {
        "tags": ["ActivityCode"],
        "summary": "Delete ActivityCodes",
        "description": "Send a request to this endpoint to delete one or more activityCode. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of activityCode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCode-delete"
        },
        "x-internal-id": "activityCode-delete",
        "x-filename-id": "activitycode-delete"
      }
    },
    "/activityCode/fields": {
      "get": {
        "tags": ["ActivityCode"],
        "summary": "View Activity fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityCodeFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCode-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityCode-fields-get",
        "x-filename-id": "activitycode-fields-get"
      }
    },
    "/activityCodeType/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityCodeType"],
        "summary": "View ActivitiyCodeType Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityCodeTypeFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityCodeType field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeType-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityCodeType-getFieldLength-{fieldName}-get",
        "x-filename-id": "activitycodetype-getfieldlength-fieldname-get"
      }
    },
    "/activityCodeType": {
      "get": {
        "tags": ["ActivityCodeType"],
        "summary": "Read ActivityCodeTypes",
        "description": "Reads ActivityCodeType objects from the database.",
        "operationId": "getActivityCodeTypes",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityCodeType>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityCodeType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeType-load"
        },
        "x-internal-id": "activityCodeType-get",
        "x-filename-id": "activitycodetype-get"
      },
      "put": {
        "tags": ["ActivityCodeType"],
        "summary": "Update ActivitiyCodeTypes",
        "description": "Send a request to this endpoint to update one or more activityCodeType. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivityCodeType",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityCodeType objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityCodeType>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityCodeType"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeType-update"
        },
        "x-internal-id": "activityCodeType-put",
        "x-filename-id": "activitycodetype-put"
      },
      "post": {
        "tags": ["ActivityCodeType"],
        "summary": "Create ActivitiyCodeTypes",
        "description": "Send a request to this endpoint to create one or more activityCodeType. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityCodeType",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityCodeType objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityCodeType>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityCodeType"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeType-create"
        },
        "x-internal-id": "activityCodeType-post",
        "x-filename-id": "activitycodetype-post"
      },
      "delete": {
        "tags": ["ActivityCodeType"],
        "summary": "Delete ActivitiyCodeTypes",
        "description": "Send a request to this endpoint to delete one or more activityCodeType. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityCodeType",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of activityCodeType.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeType-delete"
        },
        "x-internal-id": "activityCodeType-delete",
        "x-filename-id": "activitycodetype-delete"
      }
    },
    "/activityCodeType/fields": {
      "get": {
        "tags": ["ActivityCodeType"],
        "summary": "View ActivitiyCodeType fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityCodeTypeFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityCodeType-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityCodeType-fields-get",
        "x-filename-id": "activitycodetype-fields-get"
      }
    },
    "/activityComment/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityComment"],
        "summary": "View ActivityComment Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityCommentFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityComment field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityComment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityComment-getFieldLength-{fieldName}-get",
        "x-filename-id": "activitycomment-getfieldlength-fieldname-get"
      }
    },
    "/activityComment": {
      "get": {
        "tags": ["ActivityComment"],
        "summary": "Read ActivityComments",
        "description": "Reads ActivityComment objects from the database.",
        "operationId": "getActivityComments",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityComment>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityComment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityComment-load"
        },
        "x-internal-id": "activityComment-get",
        "x-filename-id": "activitycomment-get"
      },
      "put": {
        "tags": ["ActivityComment"],
        "summary": "Update ActivityComments",
        "description": "Send a request to this endpoint to update one or more activityComment. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "putActivityComment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityComment objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityComment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityComment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityComment-update"
        },
        "x-internal-id": "activityComment-put",
        "x-filename-id": "activitycomment-put"
      },
      "post": {
        "tags": ["ActivityComment"],
        "summary": "Create ActivityComments",
        "description": "Send a request to this endpoint to create one or more activityComment. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityComment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityComment objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityComment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityComment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityComment-create"
        },
        "x-internal-id": "activityComment-post",
        "x-filename-id": "activitycomment-post"
      }
    },
    "/activityComment/fields": {
      "get": {
        "tags": ["ActivityComment"],
        "summary": "View ActivityComment fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityCommentFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityComment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityComment-fields-get",
        "x-filename-id": "activitycomment-fields-get"
      }
    },
    "/activityExpense/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityExpense"],
        "summary": "View ActivityExpense Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityExpenseFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityExpense field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityExpense-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityExpense-getFieldLength-{fieldName}-get",
        "x-filename-id": "activityexpense-getfieldlength-fieldname-get"
      }
    },
    "/activityExpense": {
      "get": {
        "tags": ["ActivityExpense"],
        "summary": "Read ActivityExpenses",
        "description": "Reads ActivityExpense objects from the database.",
        "operationId": "getActivityExpenses",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityExpense>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityExpense"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityExpense-load"
        },
        "x-internal-id": "activityExpense-get",
        "x-filename-id": "activityexpense-get"
      },
      "put": {
        "tags": ["ActivityExpense"],
        "summary": "Update ActivityExpenses",
        "description": "Send a request to this endpoint to update one or more activityExpense. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivityExpenses",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityExpense objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityExpense>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityExpense"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityExpense-update"
        },
        "x-internal-id": "activityExpense-put",
        "x-filename-id": "activityexpense-put"
      },
      "post": {
        "tags": ["ActivityExpense"],
        "summary": "Create ActivityExpenses",
        "description": "Send a request to this endpoint to create one or more activityExpense. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityExpense",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityExpense objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityExpense>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityExpense"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityExpense-create"
        },
        "x-internal-id": "activityExpense-post",
        "x-filename-id": "activityexpense-post"
      },
      "delete": {
        "tags": ["ActivityExpense"],
        "summary": "Delete ActivityExpenses",
        "description": "Send a request to this endpoint to delete one or more activityExpense. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityExpenses",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of activityExpense.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityExpense-delete"
        },
        "x-internal-id": "activityExpense-delete",
        "x-filename-id": "activityexpense-delete"
      }
    },
    "/activityExpense/fields": {
      "get": {
        "tags": ["ActivityExpense"],
        "summary": "View ActivityExpense fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityExpenseFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityExpense-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityExpense-fields-get",
        "x-filename-id": "activityexpense-fields-get"
      }
    },
    "/activityFilter/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityFilter"],
        "summary": "View ActivityFilter Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityFilterFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityFilter field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityFilter-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityFilter-getFieldLength-{fieldName}-get",
        "x-filename-id": "activityfilter-getfieldlength-fieldname-get"
      }
    },
    "/activityFilter": {
      "get": {
        "tags": ["ActivityFilter"],
        "summary": "Read ActivityFilters",
        "description": "Reads Activity objects from the database.",
        "operationId": "getActivityFilters",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityFilter>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityFilter"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityFilter-load"
        },
        "x-internal-id": "activityFilter-get",
        "x-filename-id": "activityfilter-get"
      },
      "put": {
        "tags": ["ActivityFilter"],
        "summary": "Update ActivityFilters",
        "description": "Send a request to this endpoint to update one or more activityFilter. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivityFilters",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityFilter objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityFilter>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityFilter"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityFilter-update"
        },
        "x-internal-id": "activityFilter-put",
        "x-filename-id": "activityfilter-put"
      },
      "post": {
        "tags": ["ActivityFilter"],
        "summary": "Create ActivityFilters",
        "description": "Send a request to this endpoint to create one or more activityFilter. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityFilters",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityFilter objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityFilter>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityFilter"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityFilter-create"
        },
        "x-internal-id": "activityFilter-post",
        "x-filename-id": "activityfilter-post"
      },
      "delete": {
        "tags": ["ActivityFilter"],
        "summary": "Deletes ActivityFilters",
        "description": "Send a request to this endpoint to delete one or more activityFilter. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityFilters",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of activityFilter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityFilter-delete"
        },
        "x-internal-id": "activityFilter-delete",
        "x-filename-id": "activityfilter-delete"
      }
    },
    "/activityFilter/fields": {
      "get": {
        "tags": ["ActivityFilter"],
        "summary": "View ActivityFilter fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityFilterFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityFilter-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityFilter-fields-get",
        "x-filename-id": "activityfilter-fields-get"
      }
    },
    "/activityNote/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityNote"],
        "summary": "View ActivityNote Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityNotesFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityNote field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityNote-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityNote-getFieldLength-{fieldName}-get",
        "x-filename-id": "activitynote-getfieldlength-fieldname-get"
      }
    },
    "/activityNote": {
      "get": {
        "tags": ["ActivityNote"],
        "summary": "Read ActivityNotes",
        "description": "Reads ActivityNote objects from the database.",
        "operationId": "getActivityNotes",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityNote>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityNote"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityNote-load"
        },
        "x-internal-id": "activityNote-get",
        "x-filename-id": "activitynote-get"
      },
      "put": {
        "tags": ["ActivityNote"],
        "summary": "Update ActivityNotes",
        "description": "Send a request to this endpoint to update one or more activityNode. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "putActivityNotes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityNode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityNote>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityNote"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityNote-update"
        },
        "x-internal-id": "activityNote-put",
        "x-filename-id": "activitynote-put"
      },
      "post": {
        "tags": ["ActivityNote"],
        "summary": "Create ActivityNotes",
        "description": "Send a request to this endpoint to create one or more activityNode. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityNotes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityNode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityNote>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityNote"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityNote-create"
        },
        "x-internal-id": "activityNote-post",
        "x-filename-id": "activitynote-post"
      },
      "delete": {
        "tags": ["ActivityNote"],
        "summary": "Delete ActivityNotes",
        "description": "Send a request to this endpoint to delete one or more activityNode. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityNotes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of activityNode.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityNote-delete"
        },
        "x-internal-id": "activityNote-delete",
        "x-filename-id": "activitynote-delete"
      }
    },
    "/activityNote/fields": {
      "get": {
        "tags": ["ActivityNote"],
        "summary": "View ActivityNote fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityNotesFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityNote-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityNote-fields-get",
        "x-filename-id": "activitynote-fields-get"
      }
    },
    "/activityOwner/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityOwner"],
        "summary": "View ActivityOwner Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityOwnersFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityOwner field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityOwner-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityOwner-getFieldLength-{fieldName}-get",
        "x-filename-id": "activityowner-getfieldlength-fieldname-get"
      }
    },
    "/activityOwner": {
      "get": {
        "tags": ["ActivityOwner"],
        "summary": "Read ActivityOwners",
        "description": "Reads ActivityOwner objects from the database.",
        "operationId": "getActivityOwners",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityOwner>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityOwner"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityOwner-load"
        },
        "x-internal-id": "activityOwner-get",
        "x-filename-id": "activityowner-get"
      },
      "put": {
        "tags": ["ActivityOwner"],
        "summary": "Update ActivityOwners",
        "description": "Send a request to this endpoint to update one or more activityOwner. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivityOwners",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityOwner objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityOwner>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityOwner"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityOwner-update"
        },
        "x-internal-id": "activityOwner-put",
        "x-filename-id": "activityowner-put"
      },
      "post": {
        "tags": ["ActivityOwner"],
        "summary": "Create ActivityOwners",
        "description": "Send a request to this endpoint to create one or more activityOwner. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityOwners",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityOwner objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityOwner>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityOwner"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityOwner-create"
        },
        "x-internal-id": "activityOwner-post",
        "x-filename-id": "activityowner-post"
      },
      "delete": {
        "tags": ["ActivityOwner"],
        "summary": "Delete ActivityOwners",
        "description": "Send a request to this endpoint to delete one or more activityOwner. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityOwners",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of activityOwner.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityOwner-delete"
        },
        "x-internal-id": "activityOwner-delete",
        "x-filename-id": "activityowner-delete"
      }
    },
    "/activityOwner/fields": {
      "get": {
        "tags": ["ActivityOwner"],
        "summary": "View ActivityOwner fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityOwnersFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityOwner-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityOwner-fields-get",
        "x-filename-id": "activityowner-fields-get"
      }
    },
    "/activityPeriodActual/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityPeriodActual"],
        "summary": "View ActivityPeriodActuals Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityPeriodActualsFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityPeriodActual field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityPeriodActual-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityPeriodActual-getFieldLength-{fieldName}-get",
        "x-filename-id": "activityperiodactual-getfieldlength-fieldname-get"
      }
    },
    "/activityPeriodActual": {
      "get": {
        "tags": ["ActivityPeriodActual"],
        "summary": "Reads ActivityPeriodActuals.",
        "description": "Reads ActivityPeriodActual objects from the database.",
        "operationId": "getActivityPeriodActuals",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityPeriodActual>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityPeriodActual"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityPeriodActual-load"
        },
        "x-internal-id": "activityPeriodActual-get",
        "x-filename-id": "activityperiodactual-get"
      },
      "put": {
        "tags": ["ActivityPeriodActual"],
        "summary": "Update ActivityPeriodActuals",
        "description": "Send a request to this endpoint to update one or more ActivityPeriodActuals. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateActivityPeriodActuals",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of activityPeriodActuals objects.<p><p>Required fields: You must supply both the ActivityObjectId and FinancialPeriodObjectId fields when you use the Update ActivityPeriodActuals operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityPeriodActual>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityPeriodActual"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CreateActivityPeriodActualResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateActivityPeriodActualResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityPeriodActual-update"
        },
        "x-internal-id": "activityPeriodActual-put",
        "x-filename-id": "activityperiodactual-put"
      },
      "post": {
        "tags": ["ActivityPeriodActual"],
        "summary": "Create ActivityPeriodActuals",
        "description": "Send a request to this endpoint to create one or more ActivityPeriodActuals. An application object will be created for each JSON object provided in the request body",
        "operationId": "createActivityPeriodActuals",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityPeriodActuals objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityPeriodActual>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityPeriodActual"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CreateActivityPeriodActualResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateActivityPeriodActualResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityPeriodActuals-create"
        },
        "x-internal-id": "activityPeriodActual-post",
        "x-filename-id": "activityperiodactual-post"
      },
      "delete": {
        "tags": ["ActivityPeriodActual"],
        "summary": "Delete ActivityPeriodActuals",
        "description": "Send a request to this endpoint to delete one or more activityPeriodActual. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityPeriodActuals",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of activityPeriodActuals objects.<p><p>Required fields: You must supply both the ActivityObjectId and FinancialPeriodObjectId fields when you use the Delete ActivityPeriodActuals operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityPeriodActual>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityPeriodActual"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityPeriodActual-delete"
        },
        "x-internal-id": "activityPeriodActual-delete",
        "x-filename-id": "activityperiodactual-delete"
      }
    },
    "/activityPeriodActual/fields": {
      "get": {
        "tags": ["ActivityPeriodActual"],
        "summary": "View ActivityPeriodActuals fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityPeriodActualsFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityPeriodActual-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityPeriodActual-fields-get",
        "x-filename-id": "activityperiodactual-fields-get"
      }
    },
    "/activity/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Activity"],
        "summary": "View Activity Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activity field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activity-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activity-getFieldLength-{fieldName}-get",
        "x-filename-id": "activity-getfieldlength-fieldname-get"
      }
    },
    "/activity": {
      "get": {
        "tags": ["Activity"],
        "summary": "Read Activities",
        "description": "Reads Activity objects from the database.",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Activity>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Activity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activity-load"
        },
        "x-internal-id": "activity-get",
        "x-filename-id": "activity-get"
      },
      "put": {
        "tags": ["Activity"],
        "summary": "Update Activities",
        "description": "Send a request to this endpoint to update one or more activity. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivity",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activity objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Activity>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activity-update"
        },
        "x-internal-id": "activity-put",
        "x-filename-id": "activity-put"
      },
      "post": {
        "tags": ["Activity"],
        "summary": "Create Activities",
        "description": "Send a request to this endpoint to create one or more activity. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivity",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activity objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Activity>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activity-create"
        },
        "x-internal-id": "activity-post",
        "x-filename-id": "activity-post"
      },
      "delete": {
        "tags": ["Activity"],
        "summary": "Delete Activities",
        "description": "Send a request to this endpoint to delete one or more activity. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivity",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of activity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activity-delete"
        },
        "x-internal-id": "activity-delete",
        "x-filename-id": "activity-delete"
      }
    },
    "/activity/fields": {
      "get": {
        "tags": ["Activity"],
        "summary": "View Activity fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activity-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activity-fields-get",
        "x-filename-id": "activity-fields-get"
      }
    },
    "/activityRisk/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityRisk"],
        "summary": "View ActivityRisk Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityRiskFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityRisk field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityRisk-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityRisk-getFieldLength-{fieldName}-get",
        "x-filename-id": "activityrisk-getfieldlength-fieldname-get"
      }
    },
    "/activityRisk": {
      "get": {
        "tags": ["ActivityRisk"],
        "summary": "Reads ActivityRisks.",
        "description": "Reads ActivityRisks objects from the database.",
        "operationId": "getActivityRisks",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityRisk>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityRisk"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityRisk-load"
        },
        "x-internal-id": "activityRisk-get",
        "x-filename-id": "activityrisk-get"
      },
      "post": {
        "tags": ["ActivityRisk"],
        "summary": "Create ActivityRisk",
        "description": "Send a request to this endpoint to create one or more activityRisk. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityRisk",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ActivityRisk objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityRisk>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityRisk"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CreateActivityRiskResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateActivityRiskResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityRisk-create"
        },
        "x-internal-id": "activityRisk-post",
        "x-filename-id": "activityrisk-post"
      },
      "delete": {
        "tags": ["ActivityRisk"],
        "summary": "Delete ActivityRisk",
        "description": "Send a request to this endpoint to delete one or more activityRisk. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityRisk",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of ActivityRisk objects.<p><p>Required fields: You must supply both the ActivityObjectId and RiskObjectId fields when you use the Delete ActivityRisk operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityRisk>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityRisk"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityRisk-delete"
        },
        "x-internal-id": "activityRisk-delete",
        "x-filename-id": "activityrisk-delete"
      }
    },
    "/activityRisk/fields": {
      "get": {
        "tags": ["ActivityRisk"],
        "summary": "View ActivityRisk fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityRiskFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityRisk-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityRisk-fields-get",
        "x-filename-id": "activityrisk-fields-get"
      }
    },
    "/activityStep/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityStep"],
        "summary": "View ActivityStep Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityStepFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityStep field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStep-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityStep-getFieldLength-{fieldName}-get",
        "x-filename-id": "activitystep-getfieldlength-fieldname-get"
      }
    },
    "/activityStep": {
      "get": {
        "tags": ["ActivityStep"],
        "summary": "Read ActivitySteps",
        "description": "Reads ActivityStep objects from the database.",
        "operationId": "getActivitySteps",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityStep>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityStep"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStep-load"
        },
        "x-internal-id": "activityStep-get",
        "x-filename-id": "activitystep-get"
      },
      "put": {
        "tags": ["ActivityStep"],
        "summary": "Update ActivitySteps",
        "description": "Send a request to this endpoint to update one or more activityStep. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivityStep",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityStep objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityStep>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityStep"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStep-update"
        },
        "x-internal-id": "activityStep-put",
        "x-filename-id": "activitystep-put"
      },
      "post": {
        "tags": ["ActivityStep"],
        "summary": "Create ActivitySteps",
        "description": "Send a request to this endpoint to create one or more activityStep. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityStep",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityStep objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityStep>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityStep"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStep-create"
        },
        "x-internal-id": "activityStep-post",
        "x-filename-id": "activitystep-post"
      },
      "delete": {
        "tags": ["ActivityStep"],
        "summary": "Delete ActivitySteps",
        "description": "Send a request to this endpoint to delete one or more activityStep. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityStep",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "ActivityStep to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStep-delete"
        },
        "x-internal-id": "activityStep-delete",
        "x-filename-id": "activitystep-delete"
      }
    },
    "/activityStep/fields": {
      "get": {
        "tags": ["ActivityStep"],
        "summary": "View ActivityStep fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityStepFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStep-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityStep-fields-get",
        "x-filename-id": "activitystep-fields-get"
      }
    },
    "/activityStepTemplateItem/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityStepTemplateItem"],
        "summary": "View ActivityStepTemplateItem Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityStepTemplateItemFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ActivityStepTemplateItem field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplateItem-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityStepTemplateItem-getFieldLength-{fieldName}-get",
        "x-filename-id": "activitysteptemplateitem-getfieldlength-fieldname-get"
      }
    },
    "/activityStepTemplateItem": {
      "get": {
        "tags": ["ActivityStepTemplateItem"],
        "summary": "Read ActivityStepTemplateItems",
        "description": "Reads ActivityStepTemplateItem objects from the database.",
        "operationId": "getActivityStepTemplateItems",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityStepTemplateItem>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityStepTemplateItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplateItem-load"
        },
        "x-internal-id": "activityStepTemplateItem-get",
        "x-filename-id": "activitysteptemplateitem-get"
      },
      "put": {
        "tags": ["ActivityStepTemplateItem"],
        "summary": "Update ActivityStepTemplateItems",
        "description": "Send a request to this endpoint to update one or more activityStepTemplateItem. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivityStepTemplateItem",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityStepTemplateItem objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityStepTemplateItem>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityStepTemplateItem"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplateItem-update"
        },
        "x-internal-id": "activityStepTemplateItem-put",
        "x-filename-id": "activitysteptemplateitem-put"
      },
      "post": {
        "tags": ["ActivityStepTemplateItem"],
        "summary": "Create ActivityStepTemplateItems",
        "description": "Send a request to this endpoint to create one or more activityStepTemplateItem. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityStepTemplateItem",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityStepTemplateItem objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityStepTemplateItem>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityStepTemplateItem"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplateItem-create"
        },
        "x-internal-id": "activityStepTemplateItem-post",
        "x-filename-id": "activitysteptemplateitem-post"
      },
      "delete": {
        "tags": ["ActivityStepTemplateItem"],
        "summary": "Delete ActivityStepTemplateItems",
        "description": "Send a request to this endpoint to delete one or more activityStepTemplateItem. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityStepTemplateItem",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of activityStepTemplateItem.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplateItem-delete"
        },
        "x-internal-id": "activityStepTemplateItem-delete",
        "x-filename-id": "activitysteptemplateitem-delete"
      }
    },
    "/activityStepTemplateItem/fields": {
      "get": {
        "tags": ["ActivityStepTemplateItem"],
        "summary": "View ActivityStepTemplateItem fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityStepTemplateItemFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplateItem-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityStepTemplateItem-fields-get",
        "x-filename-id": "activitysteptemplateitem-fields-get"
      }
    },
    "/activityStepTemplate/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ActivityStepTemplate"],
        "summary": "View ActivityStepTemplate Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getActivityStepTemplateFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An activityStepTemplate field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityStepTemplate-getFieldLength-{fieldName}-get",
        "x-filename-id": "activitysteptemplate-getfieldlength-fieldname-get"
      }
    },
    "/activityStepTemplate": {
      "get": {
        "tags": ["ActivityStepTemplate"],
        "summary": "Read ActivityStepTemplates",
        "description": "Reads ActivityStepTemplate objects from the database.",
        "operationId": "getActivityStepTemplates",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ActivityStepTemplate>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityStepTemplate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplate-load"
        },
        "x-internal-id": "activityStepTemplate-get",
        "x-filename-id": "activitysteptemplate-get"
      },
      "put": {
        "tags": ["ActivityStepTemplate"],
        "summary": "Update ActivityStepTemplates",
        "description": "Send a request to this endpoint to update one or more activityStepTemplate. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateActivityStepTemplate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityStepTemplate objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityStepTemplate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityStepTemplate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplate-update"
        },
        "x-internal-id": "activityStepTemplate-put",
        "x-filename-id": "activitysteptemplate-put"
      },
      "post": {
        "tags": ["ActivityStepTemplate"],
        "summary": "Create ActivityStepTemplates",
        "description": "Send a request to this endpoint to create one or more activityStepTemplate. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createActivityStepTemplate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activityStepTemplate objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ActivityStepTemplate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityStepTemplate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplate-create"
        },
        "x-internal-id": "activityStepTemplate-post",
        "x-filename-id": "activitysteptemplate-post"
      },
      "delete": {
        "tags": ["ActivityStepTemplate"],
        "summary": "Delete ActivityStepTemplates",
        "description": "Send a request to this endpoint to delete one or more activityStepTemplate. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteActivityStepTemplate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of activityStepTemplate.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplate-delete"
        },
        "x-internal-id": "activityStepTemplate-delete",
        "x-filename-id": "activitysteptemplate-delete"
      }
    },
    "/activityStepTemplate/fields": {
      "get": {
        "tags": ["ActivityStepTemplate"],
        "summary": "View ActivityStepTemplate fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getActivityStepTemplateFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "activityStepTemplate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "activityStepTemplate-fields-get",
        "x-filename-id": "activitysteptemplate-fields-get"
      }
    },
    "/baselineProject/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["BaselineProject"],
        "summary": "View BaselineProject Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getBaselineProjectFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A baselineProject field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineProject-getFieldLength-{fieldName}"
        },
        "x-internal-id": "baselineProject-getFieldLength-{fieldName}-get",
        "x-filename-id": "baselineproject-getfieldlength-fieldname-get"
      }
    },
    "/baselineProject": {
      "get": {
        "tags": ["BaselineProject"],
        "summary": "Read BaselineProjects",
        "description": "Reads BaselineProject objects from the database.",
        "operationId": "getBaselineProjects",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<BaselineProject>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaselineProject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineProject-load"
        },
        "x-internal-id": "baselineProject-get",
        "x-filename-id": "baselineproject-get"
      },
      "put": {
        "tags": ["BaselineProject"],
        "summary": "Update BaselineProjects",
        "description": "Send a request to this endpoint to update one or more baselineProject. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateBaselineProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of baselineProject objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<BaselineProject>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaselineProject"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineProject-update"
        },
        "x-internal-id": "baselineProject-put",
        "x-filename-id": "baselineproject-put"
      },
      "post": {
        "tags": ["BaselineProject"],
        "summary": "Create BaselineProjects",
        "description": "Send a request to this endpoint to create one or more baselineProject. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createBaselineProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of baselineProject objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<BaselineProject>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaselineProject"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineProject-create"
        },
        "x-internal-id": "baselineProject-post",
        "x-filename-id": "baselineproject-post"
      },
      "delete": {
        "tags": ["BaselineProject"],
        "summary": "Delete BaselineProjects",
        "description": "Send a request to this endpoint to delete one or more baselineProject. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteBaselineProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of baselineProject.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineProject-delete"
        },
        "x-internal-id": "baselineProject-delete",
        "x-filename-id": "baselineproject-delete"
      }
    },
    "/baselineProject/fields": {
      "get": {
        "tags": ["BaselineProject"],
        "summary": "View BaselineProject fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getBaselineProjectFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineProject-getFieldLength-{fieldName}"
        },
        "x-internal-id": "baselineProject-fields-get",
        "x-filename-id": "baselineproject-fields-get"
      }
    },
    "/baselineType/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["BaselineType"],
        "summary": "View BaselineType Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getBaselineTypeFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A baselineType field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineType-getFieldLength-{fieldName}"
        },
        "x-internal-id": "baselineType-getFieldLength-{fieldName}-get",
        "x-filename-id": "baselinetype-getfieldlength-fieldname-get"
      }
    },
    "/baselineType": {
      "get": {
        "tags": ["BaselineType"],
        "summary": "Read BaselineTypes",
        "description": "Reads BaselineType objects from the database.",
        "operationId": "getBaselineTypes",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<BaselineType>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaselineType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineType-load"
        },
        "x-internal-id": "baselineType-get",
        "x-filename-id": "baselinetype-get"
      },
      "put": {
        "tags": ["BaselineType"],
        "summary": "Update BaselineTypes",
        "description": "Send a request to this endpoint to update one or more baselineType. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateBaselineType",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of baselineType objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<BaselineType>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaselineType"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineType-update"
        },
        "x-internal-id": "baselineType-put",
        "x-filename-id": "baselinetype-put"
      },
      "post": {
        "tags": ["BaselineType"],
        "summary": "Create BaselineTypes",
        "description": "Send a request to this endpoint to create one or more baselineType. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createBaselineType",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of baselineType objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<BaselineType>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaselineType"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineType-create"
        },
        "x-internal-id": "baselineType-post",
        "x-filename-id": "baselinetype-post"
      },
      "delete": {
        "tags": ["BaselineType"],
        "summary": "Delete BaselineTypes",
        "description": "Send a request to this endpoint to delete one or more baselineType. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteBaselineType",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of baselineType.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineType-delete"
        },
        "x-internal-id": "baselineType-delete",
        "x-filename-id": "baselinetype-delete"
      }
    },
    "/baselineType/fields": {
      "get": {
        "tags": ["BaselineType"],
        "summary": "View BaselineType fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getBaselineTypeFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "baselineType-getFieldLength-{fieldName}"
        },
        "x-internal-id": "baselineType-fields-get",
        "x-filename-id": "baselinetype-fields-get"
      }
    },
    "/cbsDurationSummary/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["CBSDurationSummary"],
        "summary": "View CBSDurationSummary Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getCBSDurationSummaryFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A cbsDurationSummary field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbsDurationSummary-getFieldLength-{fieldName}"
        },
        "x-internal-id": "cbsDurationSummary-getFieldLength-{fieldName}-get",
        "x-filename-id": "cbsdurationsummary-getfieldlength-fieldname-get"
      }
    },
    "/cbsDurationSummary": {
      "get": {
        "tags": ["CBSDurationSummary"],
        "summary": "Read CBSDurationSummarys",
        "description": "Reads CBSDurationSummary objects from the database.",
        "operationId": "getCBSDurationSummaries",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CBSDurationSummary>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CBSDurationSummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbsDurationSummary-load"
        },
        "x-internal-id": "cbsDurationSummary-get",
        "x-filename-id": "cbsdurationsummary-get"
      },
      "put": {
        "tags": ["CBSDurationSummary"],
        "summary": "Update CBSDurationSummarys",
        "description": "Send a request to this endpoint to update one or more cbsDurationSummary. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateCBSDurationSummary",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of cbsDurationSummary objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<CBSDurationSummary>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CBSDurationSummary"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbsDurationSummary-update"
        },
        "x-internal-id": "cbsDurationSummary-put",
        "x-filename-id": "cbsdurationsummary-put"
      },
      "post": {
        "tags": ["CBSDurationSummary"],
        "summary": "Create CBSDurationSummarys",
        "description": "Send a request to this endpoint to create one or more cbsDurationSummary. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createCBSDurationSummary",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of cbsDurationSummary objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<CBSDurationSummary>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CBSDurationSummary"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbsDurationSummary-create"
        },
        "x-internal-id": "cbsDurationSummary-post",
        "x-filename-id": "cbsdurationsummary-post"
      },
      "delete": {
        "tags": ["CBSDurationSummary"],
        "summary": "Delete CBSDurationSummarys",
        "description": "Send a request to this endpoint to delete one or more cbsDurationSummary. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteCBSDurationSummary",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of cbsDurationSummary.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbsDurationSummary-delete"
        },
        "x-internal-id": "cbsDurationSummary-delete",
        "x-filename-id": "cbsdurationsummary-delete"
      }
    },
    "/cbsDurationSummary/fields": {
      "get": {
        "tags": ["CBSDurationSummary"],
        "summary": "View CBSDurationSummary fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getCBSDurationSummaryFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbsDurationSummary-getFieldLength-{fieldName}"
        },
        "x-internal-id": "cbsDurationSummary-fields-get",
        "x-filename-id": "cbsdurationsummary-fields-get"
      }
    },
    "/cbs/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["CBS"],
        "summary": "View CBS Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getCBSFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A cbs field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbs-getFieldLength-{fieldName}"
        },
        "x-internal-id": "cbs-getFieldLength-{fieldName}-get",
        "x-filename-id": "cbs-getfieldlength-fieldname-get"
      }
    },
    "/cbs": {
      "get": {
        "tags": ["CBS"],
        "summary": "Read CBSs",
        "description": "Reads CBS objects from the database.",
        "operationId": "getCBS",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CBS>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CBS"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbs-load"
        },
        "x-internal-id": "cbs-get",
        "x-filename-id": "cbs-get"
      },
      "put": {
        "tags": ["CBS"],
        "summary": "Update CBSs",
        "description": "Send a request to this endpoint to update one or more cbs. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateCBS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of cbs objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<CBS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbs-update"
        },
        "x-internal-id": "cbs-put",
        "x-filename-id": "cbs-put"
      },
      "post": {
        "tags": ["CBS"],
        "summary": "Create CBSs",
        "description": "Send a request to this endpoint to create one or more cbs. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createCBS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of cbs objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<CBS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbs-create"
        },
        "x-internal-id": "cbs-post",
        "x-filename-id": "cbs-post"
      },
      "delete": {
        "tags": ["CBS"],
        "summary": "Delete CBSs",
        "description": "Send a request to this endpoint to delete one or more cbs. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteCBS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of cbs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbs-delete"
        },
        "x-internal-id": "cbs-delete",
        "x-filename-id": "cbs-delete"
      }
    },
    "/cbs/fields": {
      "get": {
        "tags": ["CBS"],
        "summary": "View CBS fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getCBSFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "cbs-getFieldLength-{fieldName}"
        },
        "x-internal-id": "cbs-fields-get",
        "x-filename-id": "cbs-fields-get"
      }
    },
    "/calendar/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Calendar"],
        "summary": "View Calendar Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getCalendarFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "Field to retun length",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-getFieldLength-{fieldName}"
        },
        "x-internal-id": "calendar-getFieldLength-{fieldName}-get",
        "x-filename-id": "calendar-getfieldlength-fieldname-get"
      }
    },
    "/calendar/detailedWorkHours": {
      "get": {
        "tags": ["Calendar"],
        "summary": "Load Calendar DetailedWorkHours",
        "description": "Returns Calendar DetailedWorkHours",
        "operationId": "getCalendarDetailedWorkHours",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-detailedWorkHours"
        },
        "x-internal-id": "calendar-detailedWorkHours-get",
        "x-filename-id": "calendar-detailedworkhours-get"
      },
      "put": {
        "tags": ["Calendar"],
        "summary": "Update DetailedWorkHours of Calendar",
        "operationId": "updateCalendarDetailedWorkHours",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "DetailedWorkHours of Calendar object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-detailedWorkHours-update"
        },
        "x-internal-id": "calendar-detailedWorkHours-put",
        "x-filename-id": "calendar-detailedworkhours-put"
      }
    },
    "/calendar/standardDetailedWorkHours": {
      "get": {
        "tags": ["Calendar"],
        "summary": "Load Calendar StandardDetailedWorkHours",
        "description": "Returns Calendar StandardDetailedWorkHours",
        "operationId": "getCalendarStandardDetailedWorkHours",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-standardDetailedWorkHours"
        },
        "x-internal-id": "calendar-standardDetailedWorkHours-get",
        "x-filename-id": "calendar-standarddetailedworkhours-get"
      },
      "put": {
        "tags": ["Calendar"],
        "summary": "Update StandardDetailedWorkHours of Calendar",
        "operationId": "updateCalendarStandardDetailedWorkHours",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "StandardDetailedWorkHours of Calendar object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-standardDetailedWorkHours-update"
        },
        "x-internal-id": "calendar-standardDetailedWorkHours-put",
        "x-filename-id": "calendar-standarddetailedworkhours-put"
      }
    },
    "/calendar/holidayExceptionDates": {
      "get": {
        "tags": ["Calendar"],
        "summary": "Load Calendar HolidayExceptionDates",
        "description": "Returns Calendar HolidayExceptionDates",
        "operationId": "getCalendarHolidayExceptionDates",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-holidayExceptionDates"
        },
        "x-internal-id": "calendar-holidayExceptionDates-get",
        "x-filename-id": "calendar-holidayexceptiondates-get"
      }
    },
    "/calendar/totalWorkHours": {
      "get": {
        "tags": ["Calendar"],
        "summary": "Load Calendar TotalWorkHours",
        "description": "Returns Calendar TotalWorkHours",
        "operationId": "getCalendarTotalWorkHours",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-totalWorkHours"
        },
        "x-internal-id": "calendar-totalWorkHours-get",
        "x-filename-id": "calendar-totalworkhours-get"
      }
    },
    "/calendar/standardTotalWorkHours": {
      "get": {
        "tags": ["Calendar"],
        "summary": "Load Calendar StandardTotalWorkHours",
        "description": "Returns Calendar StandardTotalWorkHours",
        "operationId": "getCalendarStandardTotalWorkHours",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-standardTotalWorkHours"
        },
        "x-internal-id": "calendar-standardTotalWorkHours-get",
        "x-filename-id": "calendar-standardtotalworkhours-get"
      }
    },
    "/calendar": {
      "get": {
        "tags": ["Calendar"],
        "summary": "Read Calendars",
        "description": "Reads Calendar objects from the database.",
        "operationId": "getCalendars",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Calendar>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Calendar"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-load"
        },
        "x-internal-id": "calendar-get",
        "x-filename-id": "calendar-get"
      },
      "put": {
        "tags": ["Calendar"],
        "summary": "Update Calendars",
        "description": "Send a request to this endpoint to update one or more calendar. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateCalendar",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of calendar objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Calendar>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-update"
        },
        "x-internal-id": "calendar-put",
        "x-filename-id": "calendar-put"
      },
      "post": {
        "tags": ["Calendar"],
        "summary": "Create Calendars",
        "description": "Send a request to this endpoint to create one or more calendar. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createCalendar",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of calendar objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Calendar>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-create"
        },
        "x-internal-id": "calendar-post",
        "x-filename-id": "calendar-post"
      },
      "delete": {
        "tags": ["Calendar"],
        "summary": "Delete Calendars",
        "description": "Send a request to this endpoint to delete one or more calendar. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteCalendar",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "Calendar to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-delete"
        },
        "x-internal-id": "calendar-delete",
        "x-filename-id": "calendar-delete"
      }
    },
    "/calendar/fields": {
      "get": {
        "tags": ["Calendar"],
        "summary": "View Calendar fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getCalendarFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "calendar-getFieldLength-{fieldName}"
        },
        "x-internal-id": "calendar-fields-get",
        "x-filename-id": "calendar-fields-get"
      }
    },
    "/costAccount/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["CostAccount"],
        "summary": "View CostAccount Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getCostAccountFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An project field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "costAccount-getFieldLength-{fieldName}"
        },
        "x-internal-id": "costAccount-getFieldLength-{fieldName}-get",
        "x-filename-id": "costaccount-getfieldlength-fieldname-get"
      }
    },
    "/costAccount": {
      "get": {
        "tags": ["CostAccount"],
        "summary": "Read CostAccount",
        "description": "Reads CostAccount objects from the database.",
        "operationId": "getCostAccount",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CostAccount>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CostAccount"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "costAccount-load"
        },
        "x-internal-id": "costAccount-get",
        "x-filename-id": "costaccount-get"
      },
      "put": {
        "tags": ["CostAccount"],
        "summary": "Update CostAccount",
        "description": "Send a request to this endpoint to update one or more CostAccount. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateCostAccount",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of costaccount objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<CostAccount>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CostAccount"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "costAccount-update"
        },
        "x-internal-id": "costAccount-put",
        "x-filename-id": "costaccount-put"
      },
      "post": {
        "tags": ["CostAccount"],
        "summary": "Create CostAccount",
        "description": "Send a request to this endpoint to create one or more CostAccount. An application object will be created for each JSON object provided in the request body",
        "operationId": "createCostAccount",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of costaccount objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<CostAccount>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CostAccount"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "costAccount-create"
        },
        "x-internal-id": "costAccount-post",
        "x-filename-id": "costaccount-post"
      },
      "delete": {
        "tags": ["CostAccount"],
        "summary": "Delete CostAccount",
        "description": "Send a request to this endpoint to delete one or more CostAccount. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteCostAccount",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of costaccount.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "costAccount-delete"
        },
        "x-internal-id": "costAccount-delete",
        "x-filename-id": "costaccount-delete"
      }
    },
    "/costAccount/fields": {
      "get": {
        "tags": ["CostAccount"],
        "summary": "View CostAccount fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getCostAccountFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "costAccount-getFieldLength-{fieldName}"
        },
        "x-internal-id": "costAccount-fields-get",
        "x-filename-id": "costaccount-fields-get"
      }
    },
    "/currency/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Currency"],
        "summary": "View Currency Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getCurrencyFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A currency field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "currency-getFieldLength-{fieldName}"
        },
        "x-internal-id": "currency-getFieldLength-{fieldName}-get",
        "x-filename-id": "currency-getfieldlength-fieldname-get"
      }
    },
    "/currency": {
      "get": {
        "tags": ["Currency"],
        "summary": "Read Currencies",
        "description": "Reads Currency objects from the database.",
        "operationId": "getCurrency",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Currency>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Currency"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "currency-load"
        },
        "x-internal-id": "currency-get",
        "x-filename-id": "currency-get"
      },
      "put": {
        "tags": ["Currency"],
        "summary": "Update Currencies",
        "description": "Send a request to this endpoint to update one or more currency. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateCurrency",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of currency objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Currency>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "currency-update"
        },
        "x-internal-id": "currency-put",
        "x-filename-id": "currency-put"
      },
      "post": {
        "tags": ["Currency"],
        "summary": "Create Currencies",
        "description": "Send a request to this endpoint to create one or more currency. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createCurrency",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of currency objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Currency>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "currency-create"
        },
        "x-internal-id": "currency-post",
        "x-filename-id": "currency-post"
      },
      "delete": {
        "tags": ["Currency"],
        "summary": "Delete Currencies",
        "description": "Send a request to this endpoint to delete one or more currency. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteCurrency",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of currency.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "currency-delete"
        },
        "x-internal-id": "currency-delete",
        "x-filename-id": "currency-delete"
      }
    },
    "/currency/fields": {
      "get": {
        "tags": ["Currency"],
        "summary": "View Currency fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getCurrencyFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "currency-getFieldLength-{fieldName}"
        },
        "x-internal-id": "currency-fields-get",
        "x-filename-id": "currency-fields-get"
      }
    },
    "/documentCategory/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["DocumentCategory"],
        "summary": "View DocumentCategory Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getDocumentCategoryFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An documentcategory field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentCategory-getFieldLength-{fieldName}"
        },
        "x-internal-id": "documentCategory-getFieldLength-{fieldName}-get",
        "x-filename-id": "documentcategory-getfieldlength-fieldname-get"
      }
    },
    "/documentCategory": {
      "get": {
        "tags": ["DocumentCategory"],
        "summary": "Read DocumentCategory",
        "description": "Reads DocumentCategory objects from the database.",
        "operationId": "getDocumentCategory",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<DocumentCategory>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentCategory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentCategory-load"
        },
        "x-internal-id": "documentCategory-get",
        "x-filename-id": "documentcategory-get"
      },
      "put": {
        "tags": ["DocumentCategory"],
        "summary": "Update DocumentCategory",
        "description": "Send a request to this endpoint to update one or more DocumentCategory. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateDocumentCategory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of documentcategory objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<DocumentCategory>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentCategory"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentCategory-update"
        },
        "x-internal-id": "documentCategory-put",
        "x-filename-id": "documentcategory-put"
      },
      "post": {
        "tags": ["DocumentCategory"],
        "summary": "Create DocumentCategory",
        "description": "Send a request to this endpoint to create one or more DocumentCategory. An application object will be created for each JSON object provided in the request body",
        "operationId": "createDocumentCategory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of documentcategory objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<DocumentCategory>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentCategory"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentCategory-create"
        },
        "x-internal-id": "documentCategory-post",
        "x-filename-id": "documentcategory-post"
      },
      "delete": {
        "tags": ["DocumentCategory"],
        "summary": "Delete DocumentCategory",
        "description": "Send a request to this endpoint to delete one or more DocumentCategory. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteDocumentCategory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of documentcategory.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentCategory-delete"
        },
        "x-internal-id": "documentCategory-delete",
        "x-filename-id": "documentcategory-delete"
      }
    },
    "/documentCategory/fields": {
      "get": {
        "tags": ["DocumentCategory"],
        "summary": "View DocumentCategory fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getDocumentCategoryFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentCategory-getFieldLength-{fieldName}"
        },
        "x-internal-id": "documentCategory-fields-get",
        "x-filename-id": "documentcategory-fields-get"
      }
    },
    "/document/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Document"],
        "summary": "View Document Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getDocumentFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An document field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "document-getFieldLength-{fieldName}"
        },
        "x-internal-id": "document-getFieldLength-{fieldName}-get",
        "x-filename-id": "document-getfieldlength-fieldname-get"
      }
    },
    "/document": {
      "get": {
        "tags": ["Document"],
        "summary": "Read Document",
        "description": "Reads Document objects from the database.",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Document>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "document-load"
        },
        "x-internal-id": "document-get",
        "x-filename-id": "document-get"
      },
      "put": {
        "tags": ["Document"],
        "summary": "Update Document",
        "description": "Send a request to this endpoint to update one or more Document. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateDocument",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of document objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Document>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "document-update"
        },
        "x-internal-id": "document-put",
        "x-filename-id": "document-put"
      },
      "post": {
        "tags": ["Document"],
        "summary": "Create Document",
        "description": "Send a request to this endpoint to create one or more Document. An application object will be created for each JSON object provided in the request body",
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of document objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Document>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "document-create"
        },
        "x-internal-id": "document-post",
        "x-filename-id": "document-post"
      },
      "delete": {
        "tags": ["Document"],
        "summary": "Delete Document",
        "description": "Send a request to this endpoint to delete one or more Document. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "document-delete"
        },
        "x-internal-id": "document-delete",
        "x-filename-id": "document-delete"
      }
    },
    "/document/fields": {
      "get": {
        "tags": ["Document"],
        "summary": "View Document fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getDocumentFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "document-getFieldLength-{fieldName}"
        },
        "x-internal-id": "document-fields-get",
        "x-filename-id": "document-fields-get"
      }
    },
    "/documentStatusCode/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["DocumentStatusCode"],
        "summary": "View DocumentStatusCode Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getDocumentStatusCodeFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An documentstatuscode field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentStatusCode-getFieldLength-{fieldName}"
        },
        "x-internal-id": "documentStatusCode-getFieldLength-{fieldName}-get",
        "x-filename-id": "documentstatuscode-getfieldlength-fieldname-get"
      }
    },
    "/documentStatusCode": {
      "get": {
        "tags": ["DocumentStatusCode"],
        "summary": "Read DocumentStatusCode",
        "description": "Reads DocumentStatusCode objects from the database.",
        "operationId": "getDocumentStatusCode",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<DocumentStatusCode>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentStatusCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentStatusCode-load"
        },
        "x-internal-id": "documentStatusCode-get",
        "x-filename-id": "documentstatuscode-get"
      },
      "put": {
        "tags": ["DocumentStatusCode"],
        "summary": "Update DocumentStatusCode",
        "description": "Send a request to this endpoint to update one or more DocumentStatusCode. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateDocumentStatusCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of documentstatuscode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<DocumentStatusCode>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentStatusCode"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentStatusCode-update"
        },
        "x-internal-id": "documentStatusCode-put",
        "x-filename-id": "documentstatuscode-put"
      },
      "post": {
        "tags": ["DocumentStatusCode"],
        "summary": "Create DocumentStatusCode",
        "description": "Send a request to this endpoint to create one or more DocumentStatusCode. An application object will be created for each JSON object provided in the request body",
        "operationId": "createDocumentStatusCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of documentstatuscode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<DocumentStatusCode>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentStatusCode"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentStatusCode-create"
        },
        "x-internal-id": "documentStatusCode-post",
        "x-filename-id": "documentstatuscode-post"
      },
      "delete": {
        "tags": ["DocumentStatusCode"],
        "summary": "Delete DocumentStatusCode",
        "description": "Send a request to this endpoint to delete one or more DocumentStatusCode. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteDocumentStatusCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of documentstatuscode.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentStatusCode-delete"
        },
        "x-internal-id": "documentStatusCode-delete",
        "x-filename-id": "documentstatuscode-delete"
      }
    },
    "/documentStatusCode/fields": {
      "get": {
        "tags": ["DocumentStatusCode"],
        "summary": "View DocumentStatusCode fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getDocumentStatusCodeFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "documentStatusCode-getFieldLength-{fieldName}"
        },
        "x-internal-id": "documentStatusCode-fields-get",
        "x-filename-id": "documentstatuscode-fields-get"
      }
    },
    "/epsBudgetChangeLog/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["EPSBudgetChangeLog"],
        "summary": "View EPSBudgetChangeLog Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getEPSBudgetChangeLogFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An EPSBudgetChangeLog field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsBudgetChangeLog-getFieldLength-{fieldName}"
        },
        "x-internal-id": "epsBudgetChangeLog-getFieldLength-{fieldName}-get",
        "x-filename-id": "epsbudgetchangelog-getfieldlength-fieldname-get"
      }
    },
    "/epsBudgetChangeLog": {
      "get": {
        "tags": ["EPSBudgetChangeLog"],
        "summary": "Read EPSBudgetChangeLog",
        "description": "Reads EPSBudgetChangeLog objects from the database.",
        "operationId": "getEPSBudgetChangeLog",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<EPSBudgetChangeLog>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EPSBudgetChangeLog"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsBudgetChangeLog-load"
        },
        "x-internal-id": "epsBudgetChangeLog-get",
        "x-filename-id": "epsbudgetchangelog-get"
      },
      "put": {
        "tags": ["EPSBudgetChangeLog"],
        "summary": "Update EPSBudgetChangeLog",
        "description": "Send a request to this endpoint to update one or more Project. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateEPSBudgetChangeLog",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPSBudgetChangeLog objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPSBudgetChangeLog>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPSBudgetChangeLog"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsBudgetChangeLog-update"
        },
        "x-internal-id": "epsBudgetChangeLog-put",
        "x-filename-id": "epsbudgetchangelog-put"
      },
      "post": {
        "tags": ["EPSBudgetChangeLog"],
        "summary": "Create EPSBudgetChangeLog to the store",
        "description": "Send a request to this endpoint to create one or more Project. An application object will be created for each JSON object provided in the request body",
        "operationId": "createEPSBudgetChangeLog",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPSBudgetChangeLog objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPSBudgetChangeLog>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPSBudgetChangeLog"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsBudgetChangeLog"
        },
        "x-internal-id": "epsBudgetChangeLog-post",
        "x-filename-id": "epsbudgetchangelog-post"
      },
      "delete": {
        "tags": ["EPSBudgetChangeLog"],
        "summary": "Delete EPSBudgetChangeLog",
        "description": "Send a request to this endpoint to delete one or more Project. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteEPSBudgetChangeLog",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of EPSBudgetChangeLog.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsBudgetChangeLog-delete"
        },
        "x-internal-id": "epsBudgetChangeLog-delete",
        "x-filename-id": "epsbudgetchangelog-delete"
      }
    },
    "/epsBudgetChangeLog/fields": {
      "get": {
        "tags": ["EPSBudgetChangeLog"],
        "summary": "View EPSBudgetChangeLog fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getEPSBudgetChangeLogFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsBudgetChangeLog-getFieldLength-{fieldName}"
        },
        "x-internal-id": "epsBudgetChangeLog-fields-get",
        "x-filename-id": "epsbudgetchangelog-fields-get"
      }
    },
    "/epsFunding/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["EPSFunding"],
        "summary": "View EPSFunding Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getEPSFundingFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An project field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsFunding-getFieldLength-{fieldName}"
        },
        "x-internal-id": "epsFunding-getFieldLength-{fieldName}-get",
        "x-filename-id": "epsfunding-getfieldlength-fieldname-get"
      }
    },
    "/epsFunding": {
      "get": {
        "tags": ["EPSFunding"],
        "summary": "Read EPSFunding",
        "description": "Reads EPSFunding objects from the database.",
        "operationId": "getEPSFunding",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<EPSFunding>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EPSFunding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsFunding-load"
        },
        "x-internal-id": "epsFunding-get",
        "x-filename-id": "epsfunding-get"
      },
      "put": {
        "tags": ["EPSFunding"],
        "summary": "Update EPSFunding",
        "description": "Send a request to this endpoint to update one or more EPSFunding. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateEPSFunding",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPSFunding objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPSFunding>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPSFunding"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsFunding-update"
        },
        "x-internal-id": "epsFunding-put",
        "x-filename-id": "epsfunding-put"
      },
      "post": {
        "tags": ["EPSFunding"],
        "summary": "Create EPSFunding",
        "description": "Send a request to this endpoint to create one or more EPSFunding. An application object will be created for each JSON object provided in the request body",
        "operationId": "createEPSFunding",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPSFunding objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPSFunding>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPSFunding"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsFunding-create"
        },
        "x-internal-id": "epsFunding-post",
        "x-filename-id": "epsfunding-post"
      },
      "delete": {
        "tags": ["EPSFunding"],
        "summary": "Delete EPSFunding",
        "description": "Send a request to this endpoint to delete one or more EPSFunding. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteEPSFunding",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of EPSFunding.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsFunding-delete"
        },
        "x-internal-id": "epsFunding-delete",
        "x-filename-id": "epsfunding-delete"
      }
    },
    "/epsFunding/fields": {
      "get": {
        "tags": ["EPSFunding"],
        "summary": "View EPSFunding fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getEPSFundingFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsFunding-getFieldLength-{fieldName}"
        },
        "x-internal-id": "epsFunding-fields-get",
        "x-filename-id": "epsfunding-fields-get"
      }
    },
    "/epsNote/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["EPSNote"],
        "summary": "View EPSNote Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getEPSNoteFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An EPSNote field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsNote-getFieldLength-{fieldName}"
        },
        "x-internal-id": "epsNote-getFieldLength-{fieldName}-get",
        "x-filename-id": "epsnote-getfieldlength-fieldname-get"
      }
    },
    "/epsNote": {
      "get": {
        "tags": ["EPSNote"],
        "summary": "Read EPSNote",
        "description": "Reads EPSNote objects from the database.",
        "operationId": "getEPSNote",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<EPSNote>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EPSNote"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsNote-load"
        },
        "x-internal-id": "epsNote-get",
        "x-filename-id": "epsnote-get"
      },
      "put": {
        "tags": ["EPSNote"],
        "summary": "Update EPSNote",
        "description": "Send a request to this endpoint to update one or more EPSNote. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateEPSNote",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPSNote objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPSNote>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPSNote"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsNote-update"
        },
        "x-internal-id": "epsNote-put",
        "x-filename-id": "epsnote-put"
      },
      "post": {
        "tags": ["EPSNote"],
        "summary": "Create EPSNote",
        "description": "Send a request to this endpoint to create one or more EPSNote. An application object will be created for each JSON object provided in the request body",
        "operationId": "createEPSNote",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPSNote objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPSNote>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPSNote"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsNote-create"
        },
        "x-internal-id": "epsNote-post",
        "x-filename-id": "epsnote-post"
      },
      "delete": {
        "tags": ["EPSNote"],
        "summary": "Delete EPSNote",
        "description": "Send a request to this endpoint to delete one or more EPSNote. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteEPSNote",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of EPSNote.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsNote-delete"
        },
        "x-internal-id": "epsNote-delete",
        "x-filename-id": "epsnote-delete"
      }
    },
    "/epsNote/fields": {
      "get": {
        "tags": ["EPSNote"],
        "summary": "View EPSNote fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getEPSNoteFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsNote-getFieldLength-{fieldName}"
        },
        "x-internal-id": "epsNote-fields-get",
        "x-filename-id": "epsnote-fields-get"
      }
    },
    "/eps/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["EPS"],
        "summary": "View EPS Field Length",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getEPSFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An EPS field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "eps-getFieldLength-{fieldName}"
        },
        "x-internal-id": "eps-getFieldLength-{fieldName}-get",
        "x-filename-id": "eps-getfieldlength-fieldname-get"
      }
    },
    "/eps": {
      "get": {
        "tags": ["EPS"],
        "summary": "Read EPS",
        "description": "Reads EPS objects from the database.",
        "operationId": "getEPS",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<EPS>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EPS"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "eps-load"
        },
        "x-internal-id": "eps-get",
        "x-filename-id": "eps-get"
      },
      "put": {
        "tags": ["EPS"],
        "summary": "Update EPS",
        "description": "Send a request to this endpoint to update one or more EPS. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateEPS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPS objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "eps-update"
        },
        "x-internal-id": "eps-put",
        "x-filename-id": "eps-put"
      },
      "post": {
        "tags": ["EPS"],
        "summary": "Create EPS",
        "description": "Send a request to this endpoint to create one or more EPS. An application object will be created for each JSON object provided in the request body",
        "operationId": "createEPS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPS objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "eps-create"
        },
        "x-internal-id": "eps-post",
        "x-filename-id": "eps-post"
      },
      "delete": {
        "tags": ["EPS"],
        "summary": "Delete EPS",
        "description": "Send a request to this endpoint to delete one or more EPS. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteEPS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of EPS.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "eps-delete"
        },
        "x-internal-id": "eps-delete",
        "x-filename-id": "eps-delete"
      }
    },
    "/eps/fields": {
      "get": {
        "tags": ["EPS"],
        "summary": "View EPS fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getEPSFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "eps-getFieldLength-{fieldName}"
        },
        "x-internal-id": "eps-fields-get",
        "x-filename-id": "eps-fields-get"
      }
    },
    "/epsSpendingPlan/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["EPSSpendingPlan"],
        "summary": "View EPSSpendingPlan Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getEPSSpendingPlanFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An EPSSpendingPlan field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsSpendingPlan-getFieldLength-{fieldName}"
        },
        "x-internal-id": "epsSpendingPlan-getFieldLength-{fieldName}-get",
        "x-filename-id": "epsspendingplan-getfieldlength-fieldname-get"
      }
    },
    "/epsSpendingPlan": {
      "get": {
        "tags": ["EPSSpendingPlan"],
        "summary": "Read EPSSpendingPlan",
        "description": "Reads EPSSpendingPlan objects from the database.",
        "operationId": "getEPSSpendingPlan",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<EPSSpendingPlan>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EPSSpendingPlan"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsSpendingPlan-load"
        },
        "x-internal-id": "epsSpendingPlan-get",
        "x-filename-id": "epsspendingplan-get"
      },
      "put": {
        "tags": ["EPSSpendingPlan"],
        "summary": "Update EPSSpendingPlan",
        "description": "Send a request to this endpoint to update one or more EPSSpendingPlan. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateEPSSpendingPlan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPSSpendingPlan objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPSSpendingPlan>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPSSpendingPlan"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsSpendingPlan-update"
        },
        "x-internal-id": "epsSpendingPlan-put",
        "x-filename-id": "epsspendingplan-put"
      },
      "post": {
        "tags": ["EPSSpendingPlan"],
        "summary": "Create EPSSpendingPlan",
        "description": "Send a request to this endpoint to create one or more EPSSpendingPlan. An application object will be created for each JSON object provided in the request body",
        "operationId": "createEPSSpendingPlan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of EPSSpendingPlan objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<EPSSpendingPlan>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EPSSpendingPlan"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsSpendingPlan-create"
        },
        "x-internal-id": "epsSpendingPlan-post",
        "x-filename-id": "epsspendingplan-post"
      },
      "delete": {
        "tags": ["EPSSpendingPlan"],
        "summary": "Delete EPSSpendingPlan",
        "description": "Send a request to this endpoint to delete one or more EPSSpendingPlan. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteEPSSpendingPlan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of EPSSpendingPlan.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsSpendingPlan-delete"
        },
        "x-internal-id": "epsSpendingPlan-delete",
        "x-filename-id": "epsspendingplan-delete"
      }
    },
    "/epsSpendingPlan/fields": {
      "get": {
        "tags": ["EPSSpendingPlan"],
        "summary": "View EPSSpendingPlan fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getEPSSpendingPlanFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "epsSpendingPlan-getFieldLength-{fieldName}"
        },
        "x-internal-id": "epsSpendingPlan-fields-get",
        "x-filename-id": "epsspendingplan-fields-get"
      }
    },
    "/export/exportProjects": {
      "post": {
        "tags": ["Export"],
        "summary": "Export Projects",
        "description": "Export Projects",
        "operationId": "exportProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Exports one or more projects to an XML file. When you call the ExportProjects operation, you can specify one to many ProjectObjectID elements.",
          "content": {
            "application/json": {
              "schema": {
                "title": "ExportProjects",
                "$ref": "#/components/schemas/ExportProjects"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-exportProject"
        },
        "x-internal-id": "export-exportProjects-post",
        "x-filename-id": "export-exportprojects-post"
      }
    },
    "/export/exportProject": {
      "post": {
        "tags": ["Export"],
        "summary": "Export Project",
        "description": "Export Project",
        "operationId": "exportProject_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Exports a project to an XML file.",
          "content": {
            "application/json": {
              "schema": {
                "title": "ExportProject",
                "$ref": "#/components/schemas/ExportProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readCBSResourceSpread"
        },
        "x-internal-id": "export-exportProject-post",
        "x-filename-id": "export-exportproject-post"
      }
    },
    "/export/exportIpmdarProject": {
      "post": {
        "tags": ["Export"],
        "summary": "Export ImpdarProject",
        "description": "Export ImpdarProject",
        "operationId": "exportImpdarProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Exports an ImpdarProject to an XML file.",
          "content": {
            "application/json": {
              "schema": {
                "title": "ExportIpmdarProject",
                "$ref": "#/components/schemas/ExportIpmdarProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK."
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-ExportImpdarProject"
        },
        "x-internal-id": "export-exportIpmdarProject-post",
        "x-filename-id": "export-exportipmdarproject-post"
      }
    },
    "/export/downloadFiles": {
      "post": {
        "tags": ["Export"],
        "summary": "Download Files",
        "description": "Download Files",
        "operationId": "downloadFiles",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Downloads one or more files.",
          "content": {
            "application/json": {
              "schema": {
                "title": "DownloadFiles",
                "$ref": "#/components/schemas/DownloadFiles"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DownloadFilesResponse",
                  "$ref": "#/components/schemas/DownloadFilesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-DownloadFiles"
        },
        "x-internal-id": "export-downloadFiles-post",
        "x-filename-id": "export-downloadfiles-post"
      }
    },
    "/financialPeriod/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["FinancialPeriod"],
        "summary": "View FinancialPeriod Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getFinancialPeriodFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A financialPeriod field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "financialPeriod-getFieldLength-{fieldName}"
        },
        "x-internal-id": "financialPeriod-getFieldLength-{fieldName}-get",
        "x-filename-id": "financialperiod-getfieldlength-fieldname-get"
      }
    },
    "/financialPeriod": {
      "get": {
        "tags": ["FinancialPeriod"],
        "summary": "Read FinancialPeriods",
        "description": "Reads FinancialPeriod objects from the database.",
        "operationId": "getFinancialPeriod",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<FinancialPeriod>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FinancialPeriod"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "financialPeriod-load"
        },
        "x-internal-id": "financialPeriod-get",
        "x-filename-id": "financialperiod-get"
      },
      "put": {
        "tags": ["FinancialPeriod"],
        "summary": "Update FinancialPeriods",
        "description": "Send a request to this endpoint to update one or more financialPeriod. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateFinancialPeriod",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of financialPeriod objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<FinancialPeriod>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FinancialPeriod"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "financialPeriod-update"
        },
        "x-internal-id": "financialPeriod-put",
        "x-filename-id": "financialperiod-put"
      },
      "post": {
        "tags": ["FinancialPeriod"],
        "summary": "Create FinancialPeriods",
        "description": "Send a request to this endpoint to create one or more financialPeriod. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createFinancialPeriod",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of financialPeriod objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<FinancialPeriod>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FinancialPeriod"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "financialPeriod-create"
        },
        "x-internal-id": "financialPeriod-post",
        "x-filename-id": "financialperiod-post"
      },
      "delete": {
        "tags": ["FinancialPeriod"],
        "summary": "Delete FinancialPeriods",
        "description": "Send a request to this endpoint to delete one or more financialPeriod. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteFinancialPeriod",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of financialPeriod.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "financialPeriod-delete"
        },
        "x-internal-id": "financialPeriod-delete",
        "x-filename-id": "financialperiod-delete"
      }
    },
    "/financialPeriod/fields": {
      "get": {
        "tags": ["FinancialPeriod"],
        "summary": "View FinancialPeriod fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getFinancialPeriodFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "financialPeriod-getFieldLength-{fieldName}"
        },
        "x-internal-id": "financialPeriod-fields-get",
        "x-filename-id": "financialperiod-fields-get"
      }
    },
    "/globalPreferences/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["GlobalPreferences"],
        "summary": "View GlobalPreferences Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getGlobalPreferenceFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An project field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalPreferences-getFieldLength-{fieldName}"
        },
        "x-internal-id": "globalPreferences-getFieldLength-{fieldName}-get",
        "x-filename-id": "globalpreferences-getfieldlength-fieldname-get"
      }
    },
    "/globalPreferences": {
      "get": {
        "tags": ["GlobalPreferences"],
        "summary": "Read GlobalPreferences",
        "description": "Reads GlobalPreferences objects from the database.",
        "operationId": "getGlobalPreferences",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<GlobalPreferences>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalPreferences"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalPreferences-load"
        },
        "x-internal-id": "globalPreferences-get",
        "x-filename-id": "globalpreferences-get"
      },
      "put": {
        "tags": ["GlobalPreferences"],
        "summary": "Update GlobalPreferences",
        "description": "Send a request to this endpoint to update one or more GlobalPreferences. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateGlobalPreference",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of GlobalPreferences objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<GlobalPreferences>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GlobalPreferences"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalPreferences-update"
        },
        "x-internal-id": "globalPreferences-put",
        "x-filename-id": "globalpreferences-put"
      }
    },
    "/globalPreferences/fields": {
      "get": {
        "tags": ["GlobalPreferences"],
        "summary": "View GlobalPreferences fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getGlobalPreferenceFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalPreferences-getFieldLength-{fieldName}"
        },
        "x-internal-id": "globalPreferences-fields-get",
        "x-filename-id": "globalpreferences-fields-get"
      }
    },
    "/globalProfile/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["GlobalProfile"],
        "summary": "View GlobalProfile Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getGlobalProfileFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A GlobalProfile field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalProfile-getFieldLength-{fieldName}"
        },
        "x-internal-id": "globalProfile-getFieldLength-{fieldName}-get",
        "x-filename-id": "globalprofile-getfieldlength-fieldname-get"
      }
    },
    "/globalProfile": {
      "get": {
        "tags": ["GlobalProfile"],
        "summary": "Read GlobalProfile",
        "description": "Reads GlobalProfile objects from the database.",
        "operationId": "getGlobalProfile",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<GlobalProfile>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalProfile"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalProfile-load"
        },
        "x-internal-id": "globalProfile-get",
        "x-filename-id": "globalprofile-get"
      },
      "put": {
        "tags": ["GlobalProfile"],
        "summary": "Update GlobalProfile",
        "description": "Send a request to this endpoint to update one or more GlobalProfile. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateGlobalProfile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of GlobalPreferences objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<GlobalProfile>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GlobalProfile"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalProfile-update"
        },
        "x-internal-id": "globalProfile-put",
        "x-filename-id": "globalprofile-put"
      },
      "post": {
        "tags": ["GlobalProfile"],
        "summary": "Create GlobalProfiles",
        "description": "Send a request to this endpoint to create one or more globalProfile. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createGlobalProfile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of user objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<GlobalProfile>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GlobalProfile"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalProfile-create"
        },
        "x-internal-id": "globalProfile-post",
        "x-filename-id": "globalprofile-post"
      },
      "delete": {
        "tags": ["GlobalProfile"],
        "summary": "Delete GlobalProfiles",
        "description": "Send a request to this endpoint to delete one or more globalProfile. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteGlobalProfile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of globalProfile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalProfile-delete"
        },
        "x-internal-id": "globalProfile-delete",
        "x-filename-id": "globalprofile-delete"
      }
    },
    "/globalProfile/fields": {
      "get": {
        "tags": ["GlobalProfile"],
        "summary": "View GlobalProfile fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getGlobalProfileFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalProfile-getFieldLength-{fieldName}"
        },
        "x-internal-id": "globalProfile-fields-get",
        "x-filename-id": "globalprofile-fields-get"
      }
    },
    "/globalReplace/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["GlobalReplace"],
        "summary": "View GlobalReplace Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getGlobalReplaceFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An GlobalReplace field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalReplace-getFieldLength-{fieldName}"
        },
        "x-internal-id": "globalReplace-getFieldLength-{fieldName}-get",
        "x-filename-id": "globalreplace-getfieldlength-fieldname-get"
      }
    },
    "/globalReplace": {
      "get": {
        "tags": ["GlobalReplace"],
        "summary": "Read GlobalReplace",
        "description": "Reads GlobalReplace objects from the database.",
        "operationId": "getGlobalReplace",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<GlobalReplace>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalReplace"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalReplace-load"
        },
        "x-internal-id": "globalReplace-get",
        "x-filename-id": "globalreplace-get"
      },
      "put": {
        "tags": ["GlobalReplace"],
        "summary": "Update GlobalReplace",
        "description": "Send a request to this endpoint to update one or more GlobalReplace. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateGlobalReplace",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of globalReplace objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<GlobalReplace>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GlobalReplace"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalReplace-update"
        },
        "x-internal-id": "globalReplace-put",
        "x-filename-id": "globalreplace-put"
      }
    },
    "/globalReplace/fields": {
      "get": {
        "tags": ["GlobalReplace"],
        "summary": "View GlobalReplace fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getGlobalReplaceFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "globalReplace-getFieldLength-{fieldName}"
        },
        "x-internal-id": "globalReplace-fields-get",
        "x-filename-id": "globalreplace-fields-get"
      }
    },
    "/importOptionsTemplate/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ImportOptionsTemplate"],
        "summary": "View ImportOptionsTemplate Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getImportOptionsTemplateFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ImportOptionsTemplate field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "importOptionsTemplate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "importOptionsTemplate-getFieldLength-{fieldName}-get",
        "x-filename-id": "importoptionstemplate-getfieldlength-fieldname-get"
      }
    },
    "/importOptionsTemplate": {
      "get": {
        "tags": ["ImportOptionsTemplate"],
        "summary": "Read ImportOptionsTemplate",
        "description": "Reads ImportOptionsTemplate objects from the database.",
        "operationId": "getImportOptionsTemplate",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ImportOptionsTemplate>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportOptionsTemplate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "importOptionsTemplate-load"
        },
        "x-internal-id": "importOptionsTemplate-get",
        "x-filename-id": "importoptionstemplate-get"
      }
    },
    "/importOptionsTemplate/fields": {
      "get": {
        "tags": ["ImportOptionsTemplate"],
        "summary": "View ImportOptionsTemplate fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getImportOptionsTemplateFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "importOptionsTemplate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "importOptionsTemplate-fields-get",
        "x-filename-id": "importoptionstemplate-fields-get"
      }
    },
    "/issueHistory/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["IssueHistory"],
        "summary": "View IssueHistory Field Length",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getIssueHistoryFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An IssueHistory field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "issueHistory-getFieldLength-{fieldName}"
        },
        "x-internal-id": "issueHistory-getFieldLength-{fieldName}-get",
        "x-filename-id": "issuehistory-getfieldlength-fieldname-get"
      }
    },
    "/issueHistory": {
      "get": {
        "tags": ["IssueHistory"],
        "summary": "Read IssueHistory",
        "description": "Reads IssueHistory objects from the database.",
        "operationId": "getIssueHistory",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<IssueHistory>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueHistory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "issueHistory-load"
        },
        "x-internal-id": "issueHistory-get",
        "x-filename-id": "issuehistory-get"
      }
    },
    "/issueHistory/fields": {
      "get": {
        "tags": ["IssueHistory"],
        "summary": "View IssueHistory fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getIssueHistoryFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "issueHistory-getFieldLength-{fieldName}"
        },
        "x-internal-id": "issueHistory-fields-get",
        "x-filename-id": "issuehistory-fields-get"
      }
    },
    "/job/storePeriodPerformance": {
      "post": {
        "tags": ["Job"],
        "summary": "StorePeriodPerformance",
        "description": "Asynchronously stores period performance for a single project.",
        "operationId": "storePeriodPerformance",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects for recalculateAssignmentCosts service",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<StorePeriodPerformance>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StorePeriodPerformance"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-storePeriodPerformance"
        },
        "x-internal-id": "job-storePeriodPerformance-post",
        "x-filename-id": "job-storeperiodperformance-post"
      }
    },
    "/job/recalculateAssignmentCosts": {
      "post": {
        "tags": ["Job"],
        "summary": "RecalculateAssignmentCosts",
        "description": "Asynchronously updates the resource and role assignment costs for the activities in the specified project.",
        "operationId": "recalculateAssignmentCosts",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects for recalculateAssignmentCosts service",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RecalculateAssignmentCosts>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecalculateAssignmentCosts"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-recalculateAssignmentCosts"
        },
        "x-internal-id": "job-recalculateAssignmentCosts-post",
        "x-filename-id": "job-recalculateassignmentcosts-post"
      }
    },
    "/job/level": {
      "post": {
        "tags": ["Job"],
        "summary": "Leveling Project",
        "description": " Asynchronously levels a project. Resource leveling is a process that helps you identify overallocated resources. Then you can reassign work to other resources if necessary to ensure that sufficient resources are available to perform the activities in your project according to the plan.",
        "operationId": "level",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects for Level service",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Level>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Level"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-level"
        },
        "x-internal-id": "job-level-post",
        "x-filename-id": "job-level-post"
      }
    },
    "/job/schedule": {
      "post": {
        "tags": ["Job"],
        "summary": "Schedule Project",
        "description": "Asynchronously schedules a project.",
        "operationId": "schedule",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects for Schedule service",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Schedule>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-schedule"
        },
        "x-internal-id": "job-schedule-post",
        "x-filename-id": "job-schedule-post"
      }
    },
    "/job/updateBaseline": {
      "post": {
        "tags": ["Job"],
        "summary": "Update Baseline",
        "description": "Updates the baseline of a project.",
        "operationId": "schedule_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects for Schedule service",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<UpdateBaseline>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateBaseline"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-schedule"
        },
        "x-internal-id": "job-updateBaseline-post",
        "x-filename-id": "job-updatebaseline-post"
      }
    },
    "/job/summarizeProject": {
      "post": {
        "tags": ["Job"],
        "summary": "Summarize Project",
        "description": " Asynchronously summarizes a project.",
        "operationId": "summarizeProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of summarise project objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<SummarizeProject>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SummarizeProject"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-summarizeProject"
        },
        "x-internal-id": "job-summarizeProject-post",
        "x-filename-id": "job-summarizeproject-post"
      }
    },
    "/job/applyActuals": {
      "post": {
        "tags": ["Job"],
        "summary": "Apply Actual",
        "description": "Asynchronously applies actuals to a project.",
        "operationId": "applyActual",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects ",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ApplyActuals>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplyActuals"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-applyActual"
        },
        "x-internal-id": "job-applyActuals-post",
        "x-filename-id": "job-applyactuals-post"
      }
    },
    "/job/scheduleCheck": {
      "post": {
        "tags": ["Job"],
        "summary": "ScheduleCheck",
        "description": "Starts the Check Schedule job service on a project.",
        "operationId": "sendToUnifier",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ScheduleCheck>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleCheck"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-ScheduleCheck"
        },
        "x-internal-id": "job-scheduleCheck-post",
        "x-filename-id": "job-schedulecheck-post"
      }
    },
    "/job/summarizeCBS": {
      "post": {
        "tags": ["Job"],
        "summary": "Summarize CBS",
        "description": " Asynchronously summarizes a EPS.",
        "operationId": "summarizeEPS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of summarise EPS objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<SummarizeCBS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SummarizeCBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-summarizeEPS"
        },
        "x-internal-id": "job-summarizeCBS-post",
        "x-filename-id": "job-summarizecbs-post"
      }
    },
    "/job/cancelJob": {
      "post": {
        "tags": ["Job"],
        "summary": "CancelJob",
        "description": "Cancels an asynchronous job initiated by P6 EPPM Web Services or the P6 Integration API.",
        "operationId": "cancelJob",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects for recalculateAssignmentCosts service",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<CancelJob>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CancelJob"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-cancelJob"
        },
        "x-internal-id": "job-cancelJob-post",
        "x-filename-id": "job-canceljob-post"
      }
    },
    "/job/sendToUnifier": {
      "post": {
        "tags": ["Job"],
        "summary": "SendToUnifier",
        "description": "Asynchronously summarizes a project.",
        "operationId": "sendToUnifier_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project that you want to send to Primavera Unifier.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<SendToUnifier>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SendToUnifier"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-recalculateAssignmentCosts"
        },
        "x-internal-id": "job-sendToUnifier-post",
        "x-filename-id": "job-sendtounifier-post"
      }
    },
    "/job/getCurrentJobs": {
      "post": {
        "tags": ["Job"],
        "summary": "GetCurrentJobs",
        "description": "Retrieves job information for current asynchronous jobs of this user.",
        "operationId": "getCurrentJobs",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects for recalculateAssignmentCosts service",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<String>",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CurrentJobResponse",
                  "$ref": "#/components/schemas/CurrentJobResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-getCurrentJobs"
        },
        "x-internal-id": "job-getCurrentJobs-post",
        "x-filename-id": "job-getcurrentjobs-post"
      }
    },
    "/job/summarizeEPS": {
      "post": {
        "tags": ["Job"],
        "summary": "Summarize EPS",
        "description": " Asynchronously summarizes a EPS.",
        "operationId": "summarizeEPS_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of summarise EPS objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<SummarizeEPS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SummarizeEPS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "JobServiceResponse",
                  "$ref": "#/components/schemas/JobServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-summarizeEPS"
        },
        "x-internal-id": "job-summarizeEPS-post",
        "x-filename-id": "job-summarizeeps-post"
      }
    },
    "/job/readJobLog": {
      "post": {
        "tags": ["Job"],
        "summary": "ReadJobLog",
        "description": "Retrieves the log of an asynchronous job initiated by P6 EPPM Web Services or the Integration API.",
        "operationId": "ReadJobLog",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects for recalculateAssignmentCosts service",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ReadJobLog>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReadJobLog"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ReadJobLogResponse",
                  "$ref": "#/components/schemas/ReadJobLogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-ReadJobLog"
        },
        "x-internal-id": "job-readJobLog-post",
        "x-filename-id": "job-readjoblog-post"
      }
    },
    "/job/readJobStatus": {
      "post": {
        "tags": ["Job"],
        "summary": "ReadJobStatus",
        "description": "Retrieves the status of an asynchronous job initiated by P6 EPPM Web Services or the Integration API.",
        "operationId": "readJobStatus",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ReadJobStatusResponse>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReadJobStatusResponse"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ReadJobLogResponse",
                  "$ref": "#/components/schemas/ReadJobLogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readJobStatus"
        },
        "x-internal-id": "job-readJobStatus-post",
        "x-filename-id": "job-readjobstatus-post"
      }
    },
    "/jobService/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["JobService"],
        "summary": "View JobService Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getScheduleOptionsFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ScheduleOptions field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "jobService-getFieldLength-{fieldName}"
        },
        "x-internal-id": "jobService-getFieldLength-{fieldName}-get",
        "x-filename-id": "jobservice-getfieldlength-fieldname-get"
      }
    },
    "/jobService": {
      "get": {
        "tags": ["JobService"],
        "summary": "Read JobService",
        "description": "Reads JobService objects from the database.",
        "operationId": "getJobService",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<JobService>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobService"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "jobService-load"
        },
        "x-internal-id": "jobService-get",
        "x-filename-id": "jobservice-get"
      },
      "put": {
        "tags": ["JobService"],
        "summary": "Update JobService",
        "description": "Send a request to this endpoint to update one or more JobService. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateJobService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ScheduleOptions objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<JobService>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobService"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "jobService-update"
        },
        "x-internal-id": "jobService-put",
        "x-filename-id": "jobservice-put"
      },
      "post": {
        "tags": ["JobService"],
        "summary": "Create JobService",
        "description": "Send a request to this endpoint to create one or more JobService. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createGlobalProfile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of user objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<JobService>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobService"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "jobService-create"
        },
        "x-internal-id": "jobService-post",
        "x-filename-id": "jobservice-post"
      },
      "delete": {
        "tags": ["JobService"],
        "summary": "Delete JobService",
        "description": "Send a request to this endpoint to delete one or more JobService. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteJobService",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of JobService.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "jobService-delete"
        },
        "x-internal-id": "jobService-delete",
        "x-filename-id": "jobservice-delete"
      }
    },
    "/jobService/fields": {
      "get": {
        "tags": ["JobService"],
        "summary": "View ScheduleOptions fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getScheduleOptionsFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "jobService-getFieldLength-{fieldName}"
        },
        "x-internal-id": "jobService-fields-get",
        "x-filename-id": "jobservice-fields-get"
      }
    },
    "/location/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Location"],
        "summary": "View Location Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getLocationFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A location field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "location-getFieldLength-{fieldName}"
        },
        "x-internal-id": "location-getFieldLength-{fieldName}-get",
        "x-filename-id": "location-getfieldlength-fieldname-get"
      }
    },
    "/location": {
      "get": {
        "tags": ["Location"],
        "summary": "Read Locations",
        "description": "Reads Location objects from the database.",
        "operationId": "getLocations",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Location>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "location-load"
        },
        "x-internal-id": "location-get",
        "x-filename-id": "location-get"
      },
      "put": {
        "tags": ["Location"],
        "summary": "Update Locations",
        "description": "Send a request to this endpoint to update one or more location. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of location objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Location>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "location-update"
        },
        "x-internal-id": "location-put",
        "x-filename-id": "location-put"
      },
      "post": {
        "tags": ["Location"],
        "summary": "Create Locations",
        "description": "Send a request to this endpoint to create one or more location. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createLocation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of location objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Location>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "location-create"
        },
        "x-internal-id": "location-post",
        "x-filename-id": "location-post"
      },
      "delete": {
        "tags": ["Location"],
        "summary": "Delete Locations",
        "description": "Send a request to this endpoint to delete one or more location. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteLocation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of location.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "location-delete"
        },
        "x-internal-id": "location-delete",
        "x-filename-id": "location-delete"
      }
    },
    "/location/fields": {
      "get": {
        "tags": ["Location"],
        "summary": "View Location fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getLocationFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "location-getFieldLength-{fieldName}"
        },
        "x-internal-id": "location-fields-get",
        "x-filename-id": "location-fields-get"
      }
    },
    "/login": {
      "post": {
        "tags": ["Login"],
        "summary": "Login",
        "description": "Use standard login resource to get session based application access",
        "operationId": "login",
        "parameters": [
          {
            "name": "username",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "password"
            }
          },
          {
            "name": "DatabaseName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in"
          },
          "400": {
            "description": "Invalid login details"
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "login-post"
        },
        "x-internal-id": "login-post",
        "x-filename-id": "login-post"
      }
    },
    "/logout": {
      "post": {
        "tags": ["Logout"],
        "summary": "Logout",
        "description": "Use this resource to logout from the session",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Logout succesful.",
            "content": {
              "*/*": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "User not logged in."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "logout-post"
        },
        "x-internal-id": "logout-post",
        "x-filename-id": "logout-post"
      }
    },
    "/mspTemplate/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["MSPTemplate"],
        "summary": "View MSPTemplate Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getMSPTemplateFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An MSPTemplate field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "mspTemplate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "mspTemplate-getFieldLength-{fieldName}-get",
        "x-filename-id": "msptemplate-getfieldlength-fieldname-get"
      }
    },
    "/mspTemplate": {
      "get": {
        "tags": ["MSPTemplate"],
        "summary": "Read MSPTemplate",
        "description": "Reads MSPTemplate objects from the database.",
        "operationId": "getMSPTemplate",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<MSPTemplate>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MSPTemplate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "mspTemplate-load"
        },
        "x-internal-id": "mspTemplate-get",
        "x-filename-id": "msptemplate-get"
      }
    },
    "/mspTemplate/fields": {
      "get": {
        "tags": ["MSPTemplate"],
        "summary": "View MSPTemplate fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getMSPTemplateFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "mspTemplate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "mspTemplate-fields-get",
        "x-filename-id": "msptemplate-fields-get"
      }
    },
    "/overheadCode/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["OverheadCode"],
        "summary": "View OverheadCode Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getOverheadCodeFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An overheadCode field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "overheadCode-getFieldLength-{fieldName}"
        },
        "x-internal-id": "overheadCode-getFieldLength-{fieldName}-get",
        "x-filename-id": "overheadcode-getfieldlength-fieldname-get"
      }
    },
    "/overheadCode": {
      "get": {
        "tags": ["OverheadCode"],
        "summary": "Read OverheadCodes",
        "description": "Reads OverheadCode objects from the database.",
        "operationId": "getOverheadCode",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<OverheadCode>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OverheadCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "overheadCode-load"
        },
        "x-internal-id": "overheadCode-get",
        "x-filename-id": "overheadcode-get"
      },
      "put": {
        "tags": ["OverheadCode"],
        "summary": "Update OverheadCodes",
        "description": "Send a request to this endpoint to update one or more overheadCode. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateOverheadCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of overheadCode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<OverheadCode>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OverheadCode"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "overheadCode-update"
        },
        "x-internal-id": "overheadCode-put",
        "x-filename-id": "overheadcode-put"
      },
      "post": {
        "tags": ["OverheadCode"],
        "summary": "Create OverheadCodes",
        "description": "Send a request to this endpoint to create one or more overheadCode. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createOverheadCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of overheadCode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<OverheadCode>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OverheadCode"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "overheadCode-create"
        },
        "x-internal-id": "overheadCode-post",
        "x-filename-id": "overheadcode-post"
      },
      "delete": {
        "tags": ["OverheadCode"],
        "summary": "Delete OverheadCodes",
        "description": "Send a request to this endpoint to delete one or more overheadCode. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteOverheadCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of overheadCode.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "overheadCode-delete"
        },
        "x-internal-id": "overheadCode-delete",
        "x-filename-id": "overheadcode-delete"
      }
    },
    "/overheadCode/fields": {
      "get": {
        "tags": ["OverheadCode"],
        "summary": "View OverheadCode fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getOverheadCodeFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "overheadCode-getFieldLength-{fieldName}"
        },
        "x-internal-id": "overheadCode-fields-get",
        "x-filename-id": "overheadcode-fields-get"
      }
    },
    "/projectBudgetChangeLog/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectBudgetChangeLog"],
        "summary": "View ProjectBudgetChangeLog Field Length",
        "description": "Returns length of variable character fields for a BO.",
        "operationId": "getProjectBudgetChangeLogFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An projectbudgetchangelog field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectBudgetChangeLog-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectBudgetChangeLog-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectbudgetchangelog-getfieldlength-fieldname-get"
      }
    },
    "/projectBudgetChangeLog": {
      "get": {
        "tags": ["ProjectBudgetChangeLog"],
        "summary": "Read ProjectBudgetChangeLog",
        "description": "Reads ProjectBudgetChangeLog objects from the database.",
        "operationId": "getProjectBudgetChangeLog",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectBudgetChangeLog>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectBudgetChangeLog"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectBudgetChangeLog-load"
        },
        "x-internal-id": "projectBudgetChangeLog-get",
        "x-filename-id": "projectbudgetchangelog-get"
      },
      "put": {
        "tags": ["ProjectBudgetChangeLog"],
        "summary": "Update ProjectBudgetChangeLog",
        "description": "Send a request to this endpoint to update one or more ProjectBudgetChangeLog. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectBudgetChangeLog",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectbudgetchangelog objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectBudgetChangeLog>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectBudgetChangeLog"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectBudgetChangeLog-update"
        },
        "x-internal-id": "projectBudgetChangeLog-put",
        "x-filename-id": "projectbudgetchangelog-put"
      },
      "post": {
        "tags": ["ProjectBudgetChangeLog"],
        "summary": "Create ProjectBudgetChangeLog",
        "description": "Send a request to this endpoint to create one or more ProjectBudgetChangeLog. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectBudgetChangeLog",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectbudgetchangelog objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectBudgetChangeLog>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectBudgetChangeLog"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectBudgetChangeLog-create"
        },
        "x-internal-id": "projectBudgetChangeLog-post",
        "x-filename-id": "projectbudgetchangelog-post"
      },
      "delete": {
        "tags": ["ProjectBudgetChangeLog"],
        "summary": "Delete ProjectBudgetChangeLog",
        "description": "Send a request to this endpoint to delete one or more ProjectBudgetChangeLog. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectBudgetChangeLog",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectbudgetchangelog.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "ProjectBudgetChangeLog-delete"
        },
        "x-internal-id": "projectBudgetChangeLog-delete",
        "x-filename-id": "projectbudgetchangelog-delete"
      }
    },
    "/projectBudgetChangeLog/fields": {
      "get": {
        "tags": ["ProjectBudgetChangeLog"],
        "summary": "View ProjectBudgetChangeLog fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getProjectBudgetChangeLogFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectBudgetChangeLog-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectBudgetChangeLog-fields-get",
        "x-filename-id": "projectbudgetchangelog-fields-get"
      }
    },
    "/projectCodeAssignment/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectCodeAssignment"],
        "summary": "View ProjectCodeAssignment Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectCodeAssignmentFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An projectcodeassignment field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeAssignment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectCodeAssignment-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectcodeassignment-getfieldlength-fieldname-get"
      }
    },
    "/projectCodeAssignment": {
      "get": {
        "tags": ["ProjectCodeAssignment"],
        "summary": "Read ProjectCodeAssignment",
        "description": "Reads ProjectCodeAssignment objects from the database.",
        "operationId": "getProjectCodeAssignment",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectCodeAssignment>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectCodeAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeAssignment-load"
        },
        "x-internal-id": "projectCodeAssignment-get",
        "x-filename-id": "projectcodeassignment-get"
      },
      "put": {
        "tags": ["ProjectCodeAssignment"],
        "summary": "Update ProjectCodeAssignment",
        "description": "Send a request to this endpoint to update one or more ProjectCodeAssignment. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateprojectCodeAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of projectcodeassignment objects.<p><p>Required fields: You must supply both the ProjectCodeObjectId and ProjectObjectId fields when you use the Update projectcodeassignment operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectCodeAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectCodeAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeAssignment-update"
        },
        "x-internal-id": "projectCodeAssignment-put",
        "x-filename-id": "projectcodeassignment-put"
      },
      "post": {
        "tags": ["ProjectCodeAssignment"],
        "summary": "Create ProjectCodeAssignment",
        "description": "Send a request to this endpoint to create one or more ProjectCodeAssignment. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectCodeAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectcodeassignment objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectCodeAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectCodeAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CreateProjectCodeAssignmentsResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateProjectCodeAssignmentsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeAssignment-create"
        },
        "x-internal-id": "projectCodeAssignment-post",
        "x-filename-id": "projectcodeassignment-post"
      },
      "delete": {
        "tags": ["ProjectCodeAssignment"],
        "summary": "Delete Project Code Assignment",
        "description": "Send a request to this endpoint to delete one or more ProjectCodeAssignment. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectCodeAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of projectcodeassignment objects.<p><p>Required fields: You must supply both the ProjectCodeObjectId and ProjectObjectId fields when you use the Delete projectcodeassignment operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectCodeAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectCodeAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeAssignment-delete"
        },
        "x-internal-id": "projectCodeAssignment-delete",
        "x-filename-id": "projectcodeassignment-delete"
      }
    },
    "/projectCodeAssignment/fields": {
      "get": {
        "tags": ["ProjectCodeAssignment"],
        "summary": "View ProjectCodeAssignment Field",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectCodeAssignmentFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeAssignment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectCodeAssignment-fields-get",
        "x-filename-id": "projectcodeassignment-fields-get"
      }
    },
    "/projectCode/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectCode"],
        "summary": "View ProjectCode Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectCodeFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A projectCode field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCode-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectCode-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectcode-getfieldlength-fieldname-get"
      }
    },
    "/projectCode": {
      "get": {
        "tags": ["ProjectCode"],
        "summary": "Read ProjectCodes",
        "description": "Reads ProjectCode objects from the database.",
        "operationId": "getProjectCode",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectCode>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCode-load"
        },
        "x-internal-id": "projectCode-get",
        "x-filename-id": "projectcode-get"
      },
      "put": {
        "tags": ["ProjectCode"],
        "summary": "Update ProjectCodes",
        "description": "Send a request to this endpoint to update one or more projectCode. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateProjectCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectCode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectCode>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectCode"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCode-update"
        },
        "x-internal-id": "projectCode-put",
        "x-filename-id": "projectcode-put"
      },
      "post": {
        "tags": ["ProjectCode"],
        "summary": "Create ProjectCodes",
        "description": "Send a request to this endpoint to create one or more projectCode. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createProjectCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectCode objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectCode>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectCode"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCode-create"
        },
        "x-internal-id": "projectCode-post",
        "x-filename-id": "projectcode-post"
      },
      "delete": {
        "tags": ["ProjectCode"],
        "summary": "Delete ProjectCodes",
        "description": "Send a request to this endpoint to delete one or more projectCode. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteProjectCode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectCode.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCode-delete"
        },
        "x-internal-id": "projectCode-delete",
        "x-filename-id": "projectcode-delete"
      }
    },
    "/projectCode/fields": {
      "get": {
        "tags": ["ProjectCode"],
        "summary": "View ProjectCode fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getProjectCodeFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCode-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectCode-fields-get",
        "x-filename-id": "projectcode-fields-get"
      }
    },
    "/projectCodeType/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectCodeType"],
        "summary": "View ProjectCodeType Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectCodeTypeFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A projectCodeType field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeType-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectCodeType-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectcodetype-getfieldlength-fieldname-get"
      }
    },
    "/projectCodeType": {
      "get": {
        "tags": ["ProjectCodeType"],
        "summary": "Read ProjectCodeTypes",
        "description": "Reads ProjectCodeType objects from the database.",
        "operationId": "getProjectCodeType",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectCodeType>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectCodeType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeType-load"
        },
        "x-internal-id": "projectCodeType-get",
        "x-filename-id": "projectcodetype-get"
      },
      "put": {
        "tags": ["ProjectCodeType"],
        "summary": "Update ProjectCodeTypes",
        "description": "Send a request to this endpoint to update one or more projectCodeType. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateProjectCodeType",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectCodeType objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectCodeType>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectCodeType"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeType-update"
        },
        "x-internal-id": "projectCodeType-put",
        "x-filename-id": "projectcodetype-put"
      },
      "post": {
        "tags": ["ProjectCodeType"],
        "summary": "Create ProjectCodeTypes",
        "description": "Send a request to this endpoint to create one or more projectCodeType. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createProjectCodeType",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectCodeType objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectCodeType>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectCodeType"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeType-create"
        },
        "x-internal-id": "projectCodeType-post",
        "x-filename-id": "projectcodetype-post"
      },
      "delete": {
        "tags": ["ProjectCodeType"],
        "summary": "Delete ProjectCodeTypes",
        "description": "Send a request to this endpoint to delete one or more projectCodeType. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteProjectCodeType",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectCodeType.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeType-delete"
        },
        "x-internal-id": "projectCodeType-delete",
        "x-filename-id": "projectcodetype-delete"
      }
    },
    "/projectCodeType/fields": {
      "get": {
        "tags": ["ProjectCodeType"],
        "summary": "View ProjectCodeType fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getProjectCodeTypeFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectCodeType-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectCodeType-fields-get",
        "x-filename-id": "projectcodetype-fields-get"
      }
    },
    "/projectDeployment/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectDeployment"],
        "summary": "View ProjectDeployment Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectDeploymentFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ProjectDeployment field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDeployment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectDeployment-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectdeployment-getfieldlength-fieldname-get"
      }
    },
    "/projectDeployment": {
      "get": {
        "tags": ["ProjectDeployment"],
        "summary": "Read ProjectDeployment",
        "description": "Reads ProjectDeployment objects from the database.",
        "operationId": "getProjectDeployment",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectDeployment>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDeployment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDeployment-load"
        },
        "x-internal-id": "projectDeployment-get",
        "x-filename-id": "projectdeployment-get"
      },
      "put": {
        "tags": ["ProjectDeployment"],
        "summary": "Update ProjectDeployment",
        "description": "Send a request to this endpoint to update one or more ProjectDeployment. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectDeployment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ProjectDeployment objects",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectDeployment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectDeployment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDeployment-update"
        },
        "x-internal-id": "projectDeployment-put",
        "x-filename-id": "projectdeployment-put"
      },
      "post": {
        "tags": ["ProjectDeployment"],
        "summary": "Create ProjectDeployment",
        "description": "Send a request to this endpoint to create one or more ProjectDeployment. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectDeployment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectdeployment objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectDeployment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectDeployment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDeployment-create"
        },
        "x-internal-id": "projectDeployment-post",
        "x-filename-id": "projectdeployment-post"
      },
      "delete": {
        "tags": ["ProjectDeployment"],
        "summary": "Delete ProjectDeployment",
        "description": "Send a request to this endpoint to delete one or more ProjectResourceQuantity. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectDeployment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "A list of ProjectDeployment objects.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDeployment-delete"
        },
        "x-internal-id": "projectDeployment-delete",
        "x-filename-id": "projectdeployment-delete"
      }
    },
    "/projectDeployment/fields": {
      "get": {
        "tags": ["ProjectDeployment"],
        "summary": "View ProjectResourceQuantity fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectDeploymentFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDeployment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectDeployment-fields-get",
        "x-filename-id": "projectdeployment-fields-get"
      }
    },
    "/projectDocument/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectDocument"],
        "summary": "View ProjectDocument Field Length",
        "description": "Returns Field length",
        "operationId": "getProjectDocumentFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An projectdocument field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDocument-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectDocument-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectdocument-getfieldlength-fieldname-get"
      }
    },
    "/projectDocument": {
      "get": {
        "tags": ["ProjectDocument"],
        "summary": "Read ProjectDocument",
        "description": "Reads ProjectDocument objects from the database.",
        "operationId": "getProjectDocument",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectDocument>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDocument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDocument-load"
        },
        "x-internal-id": "projectDocument-get",
        "x-filename-id": "projectdocument-get"
      },
      "put": {
        "tags": ["ProjectDocument"],
        "summary": "Update ProjectDocument",
        "description": "Send a request to this endpoint to update one or more ProjectDocument. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectDocument",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectdocument objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectDocument>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectDocument"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDocument-update"
        },
        "x-internal-id": "projectDocument-put",
        "x-filename-id": "projectdocument-put"
      },
      "post": {
        "tags": ["ProjectDocument"],
        "summary": "Create ProjectDocument",
        "description": "Send a request to this endpoint to create one or more ProjectDocument. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectDocument",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectdocument objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectDocument>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectDocument"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDocument-create"
        },
        "x-internal-id": "projectDocument-post",
        "x-filename-id": "projectdocument-post"
      },
      "delete": {
        "tags": ["ProjectDocument"],
        "summary": "Delete ProjectDocument",
        "description": "Send a request to this endpoint to delete one or more ProjectDocument. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectDocument",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectdocument.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDocument-delete"
        },
        "x-internal-id": "projectDocument-delete",
        "x-filename-id": "projectdocument-delete"
      }
    },
    "/projectDocument/fields": {
      "get": {
        "tags": ["ProjectDocument"],
        "summary": "View ProjectDocument fields",
        "description": "Returns ProjectDocument fields",
        "operationId": "getProjectDocumentFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectDocument-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectDocument-fields-get",
        "x-filename-id": "projectdocument-fields-get"
      }
    },
    "/projectFunding/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectFunding"],
        "summary": "View ProjectFunding Field Length",
        "description": "Returns length of variable character fields for a BO.",
        "operationId": "getProjectFundingFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An projectfunding field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectFunding-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectFunding-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectfunding-getfieldlength-fieldname-get"
      }
    },
    "/projectFunding": {
      "get": {
        "tags": ["ProjectFunding"],
        "summary": "Read ProjectFunding",
        "description": "Reads ProjectFunding objects from the database.",
        "operationId": "getProjectFunding",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectFunding>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectFunding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectFunding-load"
        },
        "x-internal-id": "projectFunding-get",
        "x-filename-id": "projectfunding-get"
      },
      "put": {
        "tags": ["ProjectFunding"],
        "summary": "Update ProjectFunding",
        "description": "Send a request to this endpoint to update one or more ProjectFunding. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectFunding",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectfunding objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectFunding>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectFunding"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectFunding-update"
        },
        "x-internal-id": "projectFunding-put",
        "x-filename-id": "projectfunding-put"
      },
      "post": {
        "tags": ["ProjectFunding"],
        "summary": "Creates ProjectFunding",
        "description": "Send a request to this endpoint to create one or more ProjectFunding. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectFunding",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectfunding objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectFunding>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectFunding"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectFunding-create"
        },
        "x-internal-id": "projectFunding-post",
        "x-filename-id": "projectfunding-post"
      },
      "delete": {
        "tags": ["ProjectFunding"],
        "summary": "Delete ProjectFunding",
        "description": "Send a request to this endpoint to delete one or more ProjectFunding. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectFunding",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectfunding.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectFunding-delete"
        },
        "x-internal-id": "projectFunding-delete",
        "x-filename-id": "projectfunding-delete"
      }
    },
    "/projectFunding/fields": {
      "get": {
        "tags": ["ProjectFunding"],
        "summary": "View ProjectFunding fields",
        "description": "Returns length of variable character fields for a BO.",
        "operationId": "getProjectFundingFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectFunding-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectFunding-fields-get",
        "x-filename-id": "projectfunding-fields-get"
      }
    },
    "/projectIssue/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectIssue"],
        "summary": "View ProjectIssue Field Length",
        "description": "Returns length of variable character fields for a BO.",
        "operationId": "getProjectIssueFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "OAuth token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldName",
            "in": "header",
            "description": "An projectissue field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectIssue-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectIssue-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectissue-getfieldlength-fieldname-get"
      }
    },
    "/projectIssue": {
      "get": {
        "tags": ["ProjectIssue"],
        "summary": "Reads ProjectIssue",
        "description": "Reads ProjectIssue objects from the database.",
        "operationId": "getProjectIssue",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectIssue>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectIssue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectIssue-load"
        },
        "x-internal-id": "projectIssue-get",
        "x-filename-id": "projectissue-get"
      },
      "put": {
        "tags": ["ProjectIssue"],
        "summary": "Update ProjectIssue",
        "description": "Send a request to this endpoint to update one or more ProjectIssue. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectIssue",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectissue objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectIssue>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectIssue"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectIssue-update"
        },
        "x-internal-id": "projectIssue-put",
        "x-filename-id": "projectissue-put"
      },
      "post": {
        "tags": ["ProjectIssue"],
        "summary": "Create ProjectIssue",
        "description": "Send a request to this endpoint to create one or more ProjectIssue. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectIssue",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectissue objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectIssue>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectIssue"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectIssue-create"
        },
        "x-internal-id": "projectIssue-post",
        "x-filename-id": "projectissue-post"
      },
      "delete": {
        "tags": ["ProjectIssue"],
        "summary": "Delete ProjectIssue",
        "description": "Send a request to this endpoint to delete one or more ProjectIssue. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectIssue",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectissue.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectIssue-delete"
        },
        "x-internal-id": "projectIssue-delete",
        "x-filename-id": "projectissue-delete"
      }
    },
    "/projectIssue/fields": {
      "get": {
        "tags": ["ProjectIssue"],
        "summary": "View Project fields",
        "description": "Returns length of variable character fields for a BO.",
        "operationId": "getProjectIssueFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectIssue-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectIssue-fields-get",
        "x-filename-id": "projectissue-fields-get"
      }
    },
    "/projectNote/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectNote"],
        "summary": "View ProjectNote Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectNoteFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An projectnote field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectNote-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectNote-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectnote-getfieldlength-fieldname-get"
      }
    },
    "/projectNote": {
      "get": {
        "tags": ["ProjectNote"],
        "summary": "Read ProjectNote",
        "description": "Reads ProjectNote objects from the database.",
        "operationId": "getProjectNote",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectNote>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectNote"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectNote-load"
        },
        "x-internal-id": "projectNote-get",
        "x-filename-id": "projectnote-get"
      },
      "put": {
        "tags": ["ProjectNote"],
        "summary": "Update ProjectNote",
        "description": "Send a request to this endpoint to update one or more ProjectNote. An application object will be created for each JSON object provided in the request body.",
        "operationId": "updateProjectNote",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectnote objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectNote>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectNote"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectNote-update"
        },
        "x-internal-id": "projectNote-put",
        "x-filename-id": "projectnote-put"
      },
      "post": {
        "tags": ["ProjectNote"],
        "summary": "Create ProjectNote",
        "description": "Send a request to this endpoint to create one or more ProjectNote. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createProjectNote",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectnote objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectNote>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectNote"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectNote-create"
        },
        "x-internal-id": "projectNote-post",
        "x-filename-id": "projectnote-post"
      },
      "delete": {
        "tags": ["ProjectNote"],
        "summary": "Delete ProjectNote",
        "description": "Send a request to this endpoint to delete one or more ProjectNote. An application object will be created for each JSON object provided in the request body.",
        "operationId": "deleteProjectNote",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectnote.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectNote-delete"
        },
        "x-internal-id": "projectNote-delete",
        "x-filename-id": "projectnote-delete"
      }
    },
    "/projectNote/fields": {
      "get": {
        "tags": ["ProjectNote"],
        "summary": "View ProjectNote fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectNoteFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectNote-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectNote-fields-get",
        "x-filename-id": "projectnote-fields-get"
      }
    },
    "/projectPortfolio/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectPortfolio"],
        "summary": "View ProjectPortfolio Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectPortfolioFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "Field to retun length",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectPortfolio-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectPortfolio-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectportfolio-getfieldlength-fieldname-get"
      }
    },
    "/projectPortfolio": {
      "get": {
        "tags": ["ProjectPortfolio"],
        "summary": "Read ProjectPortfolio",
        "description": "Reads ProjectPortfolio objects from the database.",
        "operationId": "getProjectPortfolio",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectPortfolio>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectPortfolio"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectPortfolio-load"
        },
        "x-internal-id": "projectPortfolio-get",
        "x-filename-id": "projectportfolio-get"
      },
      "put": {
        "tags": ["ProjectPortfolio"],
        "summary": "Update ProjectPortfolio",
        "description": "Send a request to this endpoint to update one or more ProjectPortfolio. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectPortfolio",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectportfolio objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectPortfolio>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectPortfolio"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectPortfolio-update"
        },
        "x-internal-id": "projectPortfolio-put",
        "x-filename-id": "projectportfolio-put"
      },
      "post": {
        "tags": ["ProjectPortfolio"],
        "summary": "Create ProjectPortfolio",
        "description": "Send a request to this endpoint to create one or more ProjectPortfolio. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectPortfolio",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectportfolio objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectPortfolio>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectPortfolio"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectPortfolio-create"
        },
        "x-internal-id": "projectPortfolio-post",
        "x-filename-id": "projectportfolio-post"
      },
      "delete": {
        "tags": ["ProjectPortfolio"],
        "summary": "Delete ProjectPortfolio",
        "description": "Send a request to this endpoint to delete one or more ProjectPortfolio. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectPortfolio",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectportfolio.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectPortfolio-delete"
        },
        "x-internal-id": "projectPortfolio-delete",
        "x-filename-id": "projectportfolio-delete"
      }
    },
    "/projectPortfolio/fields": {
      "get": {
        "tags": ["ProjectPortfolio"],
        "summary": "View ProjectPortfolio fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectPortfolioFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectPortfolio-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectPortfolio-fields-get",
        "x-filename-id": "projectportfolio-fields-get"
      }
    },
    "/projectProfile/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectProfile"],
        "summary": "View ProjectProfile Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectProfileFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "Field to retun length",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectProfile-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectProfile-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectprofile-getfieldlength-fieldname-get"
      }
    },
    "/projectProfile": {
      "get": {
        "tags": ["ProjectProfile"],
        "summary": "Read ProjectProfile",
        "description": "Reads ProjectProfile objects from the database.",
        "operationId": "getProjectProfile",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectProfile>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectProfile"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectProfile-load"
        },
        "x-internal-id": "projectProfile-get",
        "x-filename-id": "projectprofile-get"
      },
      "put": {
        "tags": ["ProjectProfile"],
        "summary": "Update ProjectProfile",
        "description": "Send a request to this endpoint to update one or more ProjectProfile. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectProfile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectProfile objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectProfile>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectProfile"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectProfile-update"
        },
        "x-internal-id": "projectProfile-put",
        "x-filename-id": "projectprofile-put"
      },
      "post": {
        "tags": ["ProjectProfile"],
        "summary": "Create ProjectProfile",
        "description": "Send a request to this endpoint to create one or more ProjectProfile. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectProfile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectProfile objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectProfile>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectProfile"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectProfile-create"
        },
        "x-internal-id": "projectProfile-post",
        "x-filename-id": "projectprofile-post"
      },
      "delete": {
        "tags": ["ProjectProfile"],
        "summary": "Delete ProjectProfile",
        "description": "Send a request to this endpoint to delete one or more ProjectProfile. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectProfile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectprofile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectProfile-delete"
        },
        "x-internal-id": "projectProfile-delete",
        "x-filename-id": "projectprofile-delete"
      }
    },
    "/projectProfile/fields": {
      "get": {
        "tags": ["ProjectProfile"],
        "summary": "View ProjectProfile fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectProfileFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectProfile-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectProfile-fields-get",
        "x-filename-id": "projectprofile-fields-get"
      }
    },
    "/project/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Project"],
        "summary": "View Project Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An project field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "project-getFieldLength-{fieldName}"
        },
        "x-internal-id": "project-getFieldLength-{fieldName}-get",
        "x-filename-id": "project-getfieldlength-fieldname-get"
      }
    },
    "/project": {
      "get": {
        "tags": ["Project"],
        "summary": "Read Projects",
        "description": "Reads Project objects from the database.",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Project>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "project-load"
        },
        "x-internal-id": "project-get",
        "x-filename-id": "project-get"
      },
      "put": {
        "tags": ["Project"],
        "summary": "Update Project",
        "description": "Send a request to this endpoint to update one or more Project. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Project>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "project-update"
        },
        "x-internal-id": "project-put",
        "x-filename-id": "project-put"
      },
      "post": {
        "tags": ["Project"],
        "summary": "Create Project",
        "description": "Send a request to this endpoint to create one or more Project. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of project objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Project>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "project-create"
        },
        "x-internal-id": "project-post",
        "x-filename-id": "project-post"
      },
      "delete": {
        "tags": ["Project"],
        "summary": "Delete Project",
        "description": "Send a request to this endpoint to delete one or more Project. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "project-delete"
        },
        "x-internal-id": "project-delete",
        "x-filename-id": "project-delete"
      }
    },
    "/project/fields": {
      "get": {
        "tags": ["Project"],
        "summary": "View Project fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getProjectFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "project-getFieldLength-{fieldName}"
        },
        "x-internal-id": "project-fields-get",
        "x-filename-id": "project-fields-get"
      }
    },
    "/projectResourceCategory/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectResourceCategory"],
        "summary": "View ProjectResourceCategory Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectResourceCategoryFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An project field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceCategory-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectResourceCategory-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectresourcecategory-getfieldlength-fieldname-get"
      }
    },
    "/projectResourceCategory": {
      "get": {
        "tags": ["ProjectResourceCategory"],
        "summary": "Read ProjectResourceCategory",
        "description": "Reads ProjectResourceCategory objects from the database.",
        "operationId": "getProjectResourceCategory",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectResourceCategory>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectResourceCategory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceCategory-load"
        },
        "x-internal-id": "projectResourceCategory-get",
        "x-filename-id": "projectresourcecategory-get"
      },
      "put": {
        "tags": ["ProjectResourceCategory"],
        "summary": "Update ProjectResourceCategory",
        "description": "Send a request to this endpoint to update one or more ProjectResourceCategory. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectResourceCategory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectresourcecategory objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectResourceCategory>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectResourceCategory"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceCategory-update"
        },
        "x-internal-id": "projectResourceCategory-put",
        "x-filename-id": "projectresourcecategory-put"
      },
      "post": {
        "tags": ["ProjectResourceCategory"],
        "summary": "Create ProjectResourceCategory",
        "description": "Send a request to this endpoint to create one or more ProjectResourceCategory. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectResourceCategory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectresourcecategory objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectResourceCategory>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectResourceCategory"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceCategory-create"
        },
        "x-internal-id": "projectResourceCategory-post",
        "x-filename-id": "projectresourcecategory-post"
      },
      "delete": {
        "tags": ["ProjectResourceCategory"],
        "summary": "Delete ProjectResourceCategory",
        "description": "Send a request to this endpoint to delete one or more ProjectResourceCategory. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectResourceCategory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "A list of projectresourcecategory objects.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceCategory-delete"
        },
        "x-internal-id": "projectResourceCategory-delete",
        "x-filename-id": "projectresourcecategory-delete"
      }
    },
    "/projectResourceCategory/fields": {
      "get": {
        "tags": ["ProjectResourceCategory"],
        "summary": "View projectresourcecategory fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectResourceCategoryFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceCategory-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectResourceCategory-fields-get",
        "x-filename-id": "projectresourcecategory-fields-get"
      }
    },
    "/projectResourceQuantity/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectResourceQuantity"],
        "summary": "View ProjectResourceQuantity Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectResourceQuantityLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An projectresourcequantity field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceQuantity-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectResourceQuantity-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectresourcequantity-getfieldlength-fieldname-get"
      }
    },
    "/projectResourceQuantity": {
      "get": {
        "tags": ["ProjectResourceQuantity"],
        "summary": "Reads ProjectResourceQuantity",
        "description": "Reads ProjectResourceQuantity objects from the database.",
        "operationId": "getProjectResourceQuantity",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectResourceQuantity>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectResourceQuantity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceQuantity-load"
        },
        "x-internal-id": "projectResourceQuantity-get",
        "x-filename-id": "projectresourcequantity-get"
      },
      "put": {
        "tags": ["ProjectResourceQuantity"],
        "summary": "Update ProjectResourceQuantity",
        "description": "Send a request to this endpoint to update one or more ProjectResourceQuantity. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectResourceQuantity",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of projectResourceQuantity objects.<p><p>Required fields: You must supply both the ProjectResourceObjectId, WeekStartDate and Quantity fields when you use the Update ProjectResourceQuantity operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectResourceQuantity>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectResourceQuantity"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceQuantity-update"
        },
        "x-internal-id": "projectResourceQuantity-put",
        "x-filename-id": "projectresourcequantity-put"
      },
      "post": {
        "tags": ["ProjectResourceQuantity"],
        "summary": "Create ProjectResourceQuantity",
        "description": "Send a request to this endpoint to create one or more ProjectResourceQuantity. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectResourceQuantity",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectresourcequantity objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectResourceQuantity>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectResourceQuantity"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CreateProjectResourceQuantityResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateProjectResourceQuantityResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceQuantity-create"
        },
        "x-internal-id": "projectResourceQuantity-post",
        "x-filename-id": "projectresourcequantity-post"
      },
      "delete": {
        "tags": ["ProjectResourceQuantity"],
        "summary": "Delete ProjectResourceQuantity",
        "description": "Send a request to this endpoint to delete one or more ProjectResourceQuantity. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectResourceQuantity",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of projectResourceQuantity objects.<p><p>Required fields: You must supply both the ProjectResourceObjectId, WeekStartDate and Quantity fields when you use the Delete ProjectResourceQuantity operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectResourceQuantity>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectResourceQuantity"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceQuantity-delete"
        },
        "x-internal-id": "projectResourceQuantity-delete",
        "x-filename-id": "projectresourcequantity-delete"
      }
    },
    "/projectResourceQuantity/fields": {
      "get": {
        "tags": ["ProjectResourceQuantity"],
        "summary": "View ProjectResourceQuantity fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectResourceQuantityFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResourceQuantity-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectResourceQuantity-fields-get",
        "x-filename-id": "projectresourcequantity-fields-get"
      }
    },
    "/projectResource/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectResource"],
        "summary": "View ProjectResource Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectResourceFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ProjectResource field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResource-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectResource-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectresource-getfieldlength-fieldname-get"
      }
    },
    "/projectResource": {
      "get": {
        "tags": ["ProjectResource"],
        "summary": "Read ProjectResource",
        "description": "Reads ProjectResource objects from the database.",
        "operationId": "getProjectResource",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectResource>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectResource"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResource-load"
        },
        "x-internal-id": "projectResource-get",
        "x-filename-id": "projectresource-get"
      },
      "put": {
        "tags": ["ProjectResource"],
        "summary": "Update ProjectResource",
        "description": "Send a request to this endpoint to update one or more ProjectResource. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectResource",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ProjectResource objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectResource>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectResource"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResource-update"
        },
        "x-internal-id": "projectResource-put",
        "x-filename-id": "projectresource-put"
      },
      "post": {
        "tags": ["ProjectResource"],
        "summary": "Create ProjectResource",
        "description": "Send a request to this endpoint to create one or more ProjectResource. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectResource",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ProjectResource objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectResource>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectResource"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResource-create"
        },
        "x-internal-id": "projectResource-post",
        "x-filename-id": "projectresource-post"
      },
      "delete": {
        "tags": ["ProjectResource"],
        "summary": "Delete ProjectResource",
        "description": "Send a request to this endpoint to delete one or more ProjectResource. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectResource",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of ProjectResource.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResource-delete"
        },
        "x-internal-id": "projectResource-delete",
        "x-filename-id": "projectresource-delete"
      }
    },
    "/projectResource/fields": {
      "get": {
        "tags": ["ProjectResource"],
        "summary": "View ProjectResource fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectResourceFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectResource-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectResource-fields-get",
        "x-filename-id": "projectresource-fields-get"
      }
    },
    "/projectSpendingPlan/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectSpendingPlan"],
        "summary": "View ProjectSpendingPlan Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectSpendingPlanFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An projectspendingplan field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectSpendingPlan-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectSpendingPlan-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectspendingplan-getfieldlength-fieldname-get"
      }
    },
    "/projectSpendingPlan": {
      "get": {
        "tags": ["ProjectSpendingPlan"],
        "summary": "Read ProjectSpendingPlan",
        "description": "Reads ProjectSpendingPlan objects from the database.",
        "operationId": "getProjectSpendingPlan",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectSpendingPlan>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectSpendingPlan"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectSpendingPlan-load"
        },
        "x-internal-id": "projectSpendingPlan-get",
        "x-filename-id": "projectspendingplan-get"
      },
      "put": {
        "tags": ["ProjectSpendingPlan"],
        "summary": "Update ProjectSpendingPlan",
        "description": "Send a request to this endpoint to update one or more ProjectSpendingPlan. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectSpendingPlan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectspendingplan objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectSpendingPlan>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectSpendingPlan"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectSpendingPlan-update"
        },
        "x-internal-id": "projectSpendingPlan-put",
        "x-filename-id": "projectspendingplan-put"
      },
      "post": {
        "tags": ["ProjectSpendingPlan"],
        "summary": "Create ProjectSpendingPlan",
        "description": "Send a request to this endpoint to create one or more ProjectSpendingPlan. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectSpendingPlan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectspendingplan objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectSpendingPlan>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectSpendingPlan"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectSpendingPlan-create"
        },
        "x-internal-id": "projectSpendingPlan-post",
        "x-filename-id": "projectspendingplan-post"
      },
      "delete": {
        "tags": ["ProjectSpendingPlan"],
        "summary": "Delete ProjectSpendingPlan",
        "description": "Send a request to this endpoint to delete one or more ProjectSpendingPlan. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectSpendingPlan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectspendingplan.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectSpendingPlan-delete"
        },
        "x-internal-id": "projectSpendingPlan-delete",
        "x-filename-id": "projectspendingplan-delete"
      }
    },
    "/projectSpendingPlan/fields": {
      "get": {
        "tags": ["ProjectSpendingPlan"],
        "summary": "View ProjectSpendingPlan fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectSpendingPlanFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectSpendingPlan-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectSpendingPlan-fields-get",
        "x-filename-id": "projectspendingplan-fields-get"
      }
    },
    "/projectThreshold/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ProjectThreshold"],
        "summary": "View Project Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getProjectThresholdFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An projectthreshold field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectThreshold-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectThreshold-getFieldLength-{fieldName}-get",
        "x-filename-id": "projectthreshold-getfieldlength-fieldname-get"
      }
    },
    "/projectThreshold": {
      "get": {
        "tags": ["ProjectThreshold"],
        "summary": "Read ProjectThreshold",
        "description": "Reads Project objects from the database.",
        "operationId": "getProjectThreshold",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ProjectThreshold>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectThreshold"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectThreshold-load"
        },
        "x-internal-id": "projectThreshold-get",
        "x-filename-id": "projectthreshold-get"
      },
      "put": {
        "tags": ["ProjectThreshold"],
        "summary": "Update ProjectThreshold",
        "description": "Send a request to this endpoint to update one or more ProjectThreshold. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateProjectThreshold",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectthreshold objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectThreshold>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectThreshold"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectThreshold-update"
        },
        "x-internal-id": "projectThreshold-put",
        "x-filename-id": "projectthreshold-put"
      },
      "post": {
        "tags": ["ProjectThreshold"],
        "summary": "Create ProjectThreshold",
        "description": "Send a request to this endpoint to create one or more ProjectThreshold. An application object will be created for each JSON object provided in the request body",
        "operationId": "createProjectThreshold",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of projectthreshold objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ProjectThreshold>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectThreshold"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectThreshold-create"
        },
        "x-internal-id": "projectThreshold-post",
        "x-filename-id": "projectthreshold-post"
      },
      "delete": {
        "tags": ["ProjectThreshold"],
        "summary": "Delete ProjectThreshold",
        "description": "Send a request to this endpoint to delete one or more ProjectThreshold. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteProjectThreshold",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of projectthreshold.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectThreshold-delete"
        },
        "x-internal-id": "projectThreshold-delete",
        "x-filename-id": "projectthreshold-delete"
      }
    },
    "/projectThreshold/fields": {
      "get": {
        "tags": ["ProjectThreshold"],
        "summary": "View Project fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getProjectThresholdFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "projectThreshold-getFieldLength-{fieldName}"
        },
        "x-internal-id": "projectThreshold-fields-get",
        "x-filename-id": "projectthreshold-fields-get"
      }
    },
    "/relationship/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Relationship"],
        "summary": "View Relationship Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRelationshipFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "One or more system-generated identifiers of relationship.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "relationship-getFieldLength-{fieldName}"
        },
        "x-internal-id": "relationship-getFieldLength-{fieldName}-get",
        "x-filename-id": "relationship-getfieldlength-fieldname-get"
      }
    },
    "/relationship": {
      "get": {
        "tags": ["Relationship"],
        "summary": "Read Relationship",
        "description": "Reads Relationship objects from the database.",
        "operationId": "getRelationship",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "LagProjectId",
            "in": "query",
            "description": "LagProjectId should be passed while trying to load Driving field",
            "schema": {
              "type": "string"
            },
            "example": 1234
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Relationship>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Relationship"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "relationship-load"
        },
        "x-internal-id": "relationship-get",
        "x-filename-id": "relationship-get"
      },
      "put": {
        "tags": ["Relationship"],
        "summary": "Update Relationship",
        "description": "Send a request to this endpoint to update one or more Relationship. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateRelationship",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A Relationship of project objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Relationship>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "relationship-update"
        },
        "x-internal-id": "relationship-put",
        "x-filename-id": "relationship-put"
      },
      "post": {
        "tags": ["Relationship"],
        "summary": "Create Relationship",
        "description": "Send a request to this endpoint to create one or more Relationship. An application object will be created for each JSON object provided in the request body",
        "operationId": "createRelationship",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A Relationship of project objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Relationship>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "relationship-create"
        },
        "x-internal-id": "relationship-post",
        "x-filename-id": "relationship-post"
      },
      "delete": {
        "tags": ["Relationship"],
        "summary": "Delete Relationship",
        "description": "Send a request to this endpoint to delete one or more Relationship. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteRelationship",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "Relationship to delete",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "relationship-delete"
        },
        "x-internal-id": "relationship-delete",
        "x-filename-id": "relationship-delete"
      }
    },
    "/relationship/fields": {
      "get": {
        "tags": ["Relationship"],
        "summary": "View Relationship fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRelationshipFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "relationship-getFieldLength-{fieldName}"
        },
        "x-internal-id": "relationship-fields-get",
        "x-filename-id": "relationship-fields-get"
      }
    },
    "/resourceAccess/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceAccess"],
        "summary": "View ResourceAccess Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceAccessFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A resourceAccess field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAccess-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAccess-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourceaccess-getfieldlength-fieldname-get"
      }
    },
    "/resourceAccess": {
      "get": {
        "tags": ["ResourceAccess"],
        "summary": "Read ResourceAccess",
        "description": "Reads ResourceAccess objects from the database.",
        "operationId": "getResourceAccess",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceAccess>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceAccess"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAccess-load"
        },
        "x-internal-id": "resourceAccess-get",
        "x-filename-id": "resourceaccess-get"
      },
      "post": {
        "tags": ["ResourceAccess"],
        "summary": "Create ResourceAccess",
        "description": "Send a request to this endpoint to create one or more resourceAccess. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createResourceAccess",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of resourceAccess objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAccess>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Access Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateResourceAccessResponse",
                  "$ref": "#/components/schemas/CreateResourceAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAccess-create"
        },
        "x-internal-id": "resourceAccess-post",
        "x-filename-id": "resourceaccess-post"
      },
      "delete": {
        "tags": ["ResourceAccess"],
        "summary": "Delete ResourceAccess",
        "description": "Send a request to this endpoint to delete one or more resourceAccess. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteResourceAccess",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of ResourceAccess objects.<p><p>Required fields: You must supply both the UserObjectId and ResourceObjectId fields when you use the Delete ResourceAccess operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAccess>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAccess"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAccess-delete"
        },
        "x-internal-id": "resourceAccess-delete",
        "x-filename-id": "resourceaccess-delete"
      }
    },
    "/resourceAccess/fields": {
      "get": {
        "tags": ["ResourceAccess"],
        "summary": "View ResourceAccess fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getResourceAccessFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAccess-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAccess-fields-get",
        "x-filename-id": "resourceaccess-fields-get"
      }
    },
    "/resourceAssignmentCreate/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceAssignmentCreate"],
        "summary": "View ResourceAssignmentCreate Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceAssignmentCreateFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ResourceAssignmentCreate field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentCreate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAssignmentCreate-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourceassignmentcreate-getfieldlength-fieldname-get"
      }
    },
    "/resourceAssignmentCreate": {
      "get": {
        "tags": ["ResourceAssignmentCreate"],
        "summary": "Read ResourceAssignmentCreate",
        "description": "Reads ResourceAssignmentCreate objects from the database.",
        "operationId": "getResourceAssignmentCreate",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceAssignmentCreate>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceAssignmentCreate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentCreate-load"
        },
        "x-internal-id": "resourceAssignmentCreate-get",
        "x-filename-id": "resourceassignmentcreate-get"
      },
      "put": {
        "tags": ["ResourceAssignmentCreate"],
        "summary": "Update ResourceAssignmentCreate",
        "description": "Send a request to this endpoint to update one or more ResourceAssignmentCreate. An application object will be created for each JSON object provided in the request body. ResourceAssignmentCreateObjectId is mandatory field",
        "operationId": "updateResourceAssignmentCreate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceAssignmentCreate objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignmentCreate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignmentCreate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentCreate-update"
        },
        "x-internal-id": "resourceAssignmentCreate-put",
        "x-filename-id": "resourceassignmentcreate-put"
      },
      "post": {
        "tags": ["ResourceAssignmentCreate"],
        "summary": "Create ResourceAssignmentCreate",
        "description": "Send a request to this endpoint to create one or more ResourceAssignmentCreate. An application object will be created for each JSON object provided in the request body",
        "operationId": "createResourceAssignmentCreate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceAssignmentCreate objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignmentCreate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignmentCreate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentCreate-create"
        },
        "x-internal-id": "resourceAssignmentCreate-post",
        "x-filename-id": "resourceassignmentcreate-post"
      },
      "delete": {
        "tags": ["ResourceAssignmentCreate"],
        "summary": "Delete ResourceAssignmentCreate",
        "description": "Send a request to this endpoint to delete one or more ResourceAssignmentCreate. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteResourceAssignmentCreate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of ResourceAssignmentCreate.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentCreate-delete"
        },
        "x-internal-id": "resourceAssignmentCreate-delete",
        "x-filename-id": "resourceassignmentcreate-delete"
      }
    },
    "/resourceAssignmentCreate/fields": {
      "get": {
        "tags": ["ResourceAssignmentCreate"],
        "summary": "View ResourceAssignmentCreate fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceAssignmentCreateFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentCreate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAssignmentCreate-fields-get",
        "x-filename-id": "resourceassignmentcreate-fields-get"
      }
    },
    "/resourceAssignmentPeriodActual/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceAssignmentPeriodActual"],
        "summary": "View ResourceAssignmentPeriodActual Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceAssignmentPeriodActualFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ResourceAssignmentPeriodActual field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentPeriodActual-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAssignmentPeriodActual-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourceassignmentperiodactual-getfieldlength-fieldname-get"
      }
    },
    "/resourceAssignmentPeriodActual": {
      "get": {
        "tags": ["ResourceAssignmentPeriodActual"],
        "summary": "Read ResourceAssignmentPeriodActual",
        "description": "Reads ResourceAssignmentPeriodActual objects from the database.",
        "operationId": "getResourceAssignmentPeriodActual",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceAssignmentPeriodActual>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceAssignmentPeriodActual"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentPeriodActual-load"
        },
        "x-internal-id": "resourceAssignmentPeriodActual-get",
        "x-filename-id": "resourceassignmentperiodactual-get"
      },
      "put": {
        "tags": ["ResourceAssignmentPeriodActual"],
        "summary": "Update ResourceAssignmentPeriodActual",
        "description": "Send a request to this endpoint to update one or more ResourceAssignmentPeriodActual. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateResourceAssignmentPeriodActual",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of ResourceAssignmentPeriodActual objects.<p><p>Required fields: You must supply both the ResourceAssignmentObjectId, ActualUnits and FinancialPeriodObjectId fields when you use the Update ResourceAssignmentPeriodActual operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignmentPeriodActual>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignmentPeriodActual"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentPeriodActual-update"
        },
        "x-internal-id": "resourceAssignmentPeriodActual-put",
        "x-filename-id": "resourceassignmentperiodactual-put"
      },
      "post": {
        "tags": ["ResourceAssignmentPeriodActual"],
        "summary": "Create ResourceAssignmentPeriodActual",
        "description": "Send a request to this endpoint to create one or more ResourceAssignmentPeriodActual. An application object will be created for each JSON object provided in the request body",
        "operationId": "createResourceAssignmentPeriodActual",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceAssignmentPeriodActual objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignmentPeriodActual>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignmentPeriodActual"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CreateResourceAssignmentPeriodActualsResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateResourceAssignmentPeriodActualsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentPeriodActual-create"
        },
        "x-internal-id": "resourceAssignmentPeriodActual-post",
        "x-filename-id": "resourceassignmentperiodactual-post"
      },
      "delete": {
        "tags": ["ResourceAssignmentPeriodActual"],
        "summary": "Delete ResourceAssignmentPeriodActual",
        "description": "Send a request to this endpoint to delete one or more ResourceAssignmentPeriodActual. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteResourceAssignmentPeriodActual",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of ResourceAssignmentPeriodActual objects.<p><p>Required fields: You must supply both the ResourceAssignmentObjectId, ActualUnits and FinancialPeriodObjectId fields when you use the Delete ResourceAssignmentPeriodActual operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignmentPeriodActual>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignmentPeriodActual"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentPeriodActual-delete"
        },
        "x-internal-id": "resourceAssignmentPeriodActual-delete",
        "x-filename-id": "resourceassignmentperiodactual-delete"
      }
    },
    "/resourceAssignmentPeriodActual/fields": {
      "get": {
        "tags": ["ResourceAssignmentPeriodActual"],
        "summary": "View ResourceAssignmentPeriodActual fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceAssignmentPeriodActualFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentPeriodActual-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAssignmentPeriodActual-fields-get",
        "x-filename-id": "resourceassignmentperiodactual-fields-get"
      }
    },
    "/resourceAssignment/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceAssignment"],
        "summary": "View ResourceAssignment Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceAssignmentFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A resourceAssignment field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAssignment-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourceassignment-getfieldlength-fieldname-get"
      }
    },
    "/resourceAssignment": {
      "get": {
        "tags": ["ResourceAssignment"],
        "summary": "Read ResourceAssignments",
        "description": "Reads ResourceAssignment objects from the database.",
        "operationId": "getResourceAssignment",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceAssignment>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignment-load"
        },
        "x-internal-id": "resourceAssignment-get",
        "x-filename-id": "resourceassignment-get"
      },
      "put": {
        "tags": ["ResourceAssignment"],
        "summary": "Update ResourceAssignments",
        "description": "Send a request to this endpoint to update one or more resourceAssignment. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateResourceAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of resourceAssignment objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignment-update"
        },
        "x-internal-id": "resourceAssignment-put",
        "x-filename-id": "resourceassignment-put"
      },
      "post": {
        "tags": ["ResourceAssignment"],
        "summary": "Create ResourceAssignments",
        "description": "Send a request to this endpoint to create one or more resourceAssignment. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createResourceAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of resourceAssignment objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignment-create"
        },
        "x-internal-id": "resourceAssignment-post",
        "x-filename-id": "resourceassignment-post"
      },
      "delete": {
        "tags": ["ResourceAssignment"],
        "summary": "Delete ResourceAssignments",
        "description": "Send a request to this endpoint to delete one or more resourceAssignment. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteResourceAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of resourceAssignment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignment-delete"
        },
        "x-internal-id": "resourceAssignment-delete",
        "x-filename-id": "resourceassignment-delete"
      }
    },
    "/resourceAssignment/fields": {
      "get": {
        "tags": ["ResourceAssignment"],
        "summary": "View ResourceAssignment fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getResourceAssignmentFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAssignment-fields-get",
        "x-filename-id": "resourceassignment-fields-get"
      }
    },
    "/resourceAssignmentUpdate/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceAssignmentUpdate"],
        "summary": "View ResourceAssignmentUpdate Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceAssignmentUpdateFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ResourceAssignmentUpdate field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentUpdate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAssignmentUpdate-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourceassignmentupdate-getfieldlength-fieldname-get"
      }
    },
    "/resourceAssignmentUpdate": {
      "get": {
        "tags": ["ResourceAssignmentUpdate"],
        "summary": "Read ResourceAssignmentUpdate",
        "description": "Reads ResourceAssignmentUpdate objects from the database.",
        "operationId": "getResourceAssignmentUpdate",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceAssignmentUpdate>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceAssignmentUpdate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentUpdate-load"
        },
        "x-internal-id": "resourceAssignmentUpdate-get",
        "x-filename-id": "resourceassignmentupdate-get"
      },
      "put": {
        "tags": ["ResourceAssignmentUpdate"],
        "summary": "Update ResourceAssignmentUpdate",
        "description": "Send a request to this endpoint to update one or more ResourceAssignmentUpdate. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateResourceAssignmentUpdate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of ResourceAssignmentUpdate objects.<p><p>Required fields: You must supply both the ResourceAssignmentObjectId and ChangeSetObjectId fields when you use the Update ResourceAssignmentUpdate operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignmentUpdate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignmentUpdate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentUpdate-update"
        },
        "x-internal-id": "resourceAssignmentUpdate-put",
        "x-filename-id": "resourceassignmentupdate-put"
      },
      "post": {
        "tags": ["ResourceAssignmentUpdate"],
        "summary": "Create ResourceAssignmentUpdate",
        "description": "Send a request to this endpoint to create one or more ResourceAssignmentUpdate. An application object will be created for each JSON object provided in the request body",
        "operationId": "createResourceAssignmentUpdate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceAssignmentUpdate objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignmentUpdate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignmentUpdate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CreateResourceAssignmentUpdateResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateResourceAssignmentUpdateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentUpdate-create"
        },
        "x-internal-id": "resourceAssignmentUpdate-post",
        "x-filename-id": "resourceassignmentupdate-post"
      },
      "delete": {
        "tags": ["ResourceAssignmentUpdate"],
        "summary": "Delete ResourceAssignmentUpdate",
        "description": "Send a request to this endpoint to delete one or more ResourceAssignmentUpdate. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteResourceAssignmentUpdate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of ResourceAssignmentUpdate objects.<p><p>Required fields: You must supply both the ResourceAssignmentObjectId and ChangeSetObjectId fields when you use the Delete ResourceAssignmentUpdate operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceAssignmentUpdate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAssignmentUpdate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentUpdate-delete"
        },
        "x-internal-id": "resourceAssignmentUpdate-delete",
        "x-filename-id": "resourceassignmentupdate-delete"
      }
    },
    "/resourceAssignmentUpdate/fields": {
      "get": {
        "tags": ["ResourceAssignmentUpdate"],
        "summary": "View ResourceAssignmentUpdate fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceAssignmentUpdateFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentUpdate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceAssignmentUpdate-fields-get",
        "x-filename-id": "resourceassignmentupdate-fields-get"
      }
    },
    "/resourceCodeAssignment/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceCodeAssignment"],
        "summary": "View ResourceCodeAssignment Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceCodeAssignmentFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ResourceCodeAssignment field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCodeAssignment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceCodeAssignment-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourcecodeassignment-getfieldlength-fieldname-get"
      }
    },
    "/resourceCodeAssignment": {
      "get": {
        "tags": ["ResourceCodeAssignment"],
        "summary": "Read ResourceCodeAssignment",
        "description": "Reads ResourceCodeAssignment objects from the database.",
        "operationId": "getResourceCodeAssignment",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceCodeAssignment>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceCodeAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCodeAssignment-load"
        },
        "x-internal-id": "resourceCodeAssignment-get",
        "x-filename-id": "resourcecodeassignment-get"
      },
      "put": {
        "tags": ["ResourceCodeAssignment"],
        "summary": "Update ResourceCodeAssignment",
        "description": "Send a request to this endpoint to update one or more ResourceCodeAssignment. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateResourceCodeAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of ResourceCodeAssignment objects.<p><p>Required fields: You must supply both the ResourceObjectId and ResourceCodeTypeObjectId fields when you use the Update ResourceCodeAssignment operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceCodeAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceCodeAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCodeAssignment-update"
        },
        "x-internal-id": "resourceCodeAssignment-put",
        "x-filename-id": "resourcecodeassignment-put"
      },
      "post": {
        "tags": ["ResourceCodeAssignment"],
        "summary": "Create ResourceCodeAssignment",
        "description": "Send a request to this endpoint to create one or more ResourceCodeAssignment. An application object will be created for each JSON object provided in the request body",
        "operationId": "createResourceCodeAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceCodeAssignment objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceCodeAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceCodeAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "ResourceCodeAssignment Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateResourceCodeAssignmentsResponse",
                  "$ref": "#/components/schemas/CreateResourceCodeAssignmentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCodeAssignment-create"
        },
        "x-internal-id": "resourceCodeAssignment-post",
        "x-filename-id": "resourcecodeassignment-post"
      },
      "delete": {
        "tags": ["ResourceCodeAssignment"],
        "summary": "Delete ResourceCodeAssignment",
        "description": "Send a request to this endpoint to delete one or more ResourceCodeAssignment. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteResourceCodeAssignment",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of ResourceCodeAssignment objects.<p><p>Required fields: You must supply both the ResourceCodeTypeObjectId and ResourceObjectId fields when you use the Delete ResourceAssignmentUpdate operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceCodeAssignment>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceCodeAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentUpdate-delete"
        },
        "x-internal-id": "resourceCodeAssignment-delete",
        "x-filename-id": "resourcecodeassignment-delete"
      }
    },
    "/resourceCodeAssignment/fields": {
      "get": {
        "tags": ["ResourceCodeAssignment"],
        "summary": "View ResourceCodeAssignment fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceCodeAssignmentFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCodeAssignment-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceCodeAssignment-fields-get",
        "x-filename-id": "resourcecodeassignment-fields-get"
      }
    },
    "/resourceCurve/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceCurve"],
        "summary": "View ResourceCurve Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceCurveFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A ResourceCurve field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCurve-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceCurve-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourcecurve-getfieldlength-fieldname-get"
      }
    },
    "/resourceCurve": {
      "get": {
        "tags": ["ResourceCurve"],
        "summary": "Read ResourceCurve",
        "description": "Reads ResourceCurve objects from the database.",
        "operationId": "getResourceCurve",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceCurve>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceCurve"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCurve-load"
        },
        "x-internal-id": "resourceCurve-get",
        "x-filename-id": "resourcecurve-get"
      },
      "put": {
        "tags": ["ResourceCurve"],
        "summary": "Update ResourceCurve",
        "description": "Send a request to this endpoint to update one or more ResourceCurve. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateResourceCurve",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceCurve objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceCurve>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceCurve"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCurve-update"
        },
        "x-internal-id": "resourceCurve-put",
        "x-filename-id": "resourcecurve-put"
      },
      "post": {
        "tags": ["ResourceCurve"],
        "summary": "Create ResourceCurve",
        "description": "Send a request to this endpoint to create one or more ResourceCurve. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createResourceCurve",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceCurve objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceCurve>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceCurve"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCurve-create"
        },
        "x-internal-id": "resourceCurve-post",
        "x-filename-id": "resourcecurve-post"
      },
      "delete": {
        "tags": ["ResourceCurve"],
        "summary": "Delete ResourceCurve",
        "description": "Send a request to this endpoint to delete one or more ResourceCurve. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteResourceCurve",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of resourceCurve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCurve-delete"
        },
        "x-internal-id": "resourceCurve-delete",
        "x-filename-id": "resourcecurve-delete"
      }
    },
    "/resourceCurve/fields": {
      "get": {
        "tags": ["ResourceCurve"],
        "summary": "View ResourceCurve fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceCurveFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceCurve-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceCurve-fields-get",
        "x-filename-id": "resourcecurve-fields-get"
      }
    },
    "/resourceHour/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceHour"],
        "summary": "View ResourceHour Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceHourFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ResourceHour field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceHour-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceHour-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourcehour-getfieldlength-fieldname-get"
      }
    },
    "/resourceHour": {
      "get": {
        "tags": ["ResourceHour"],
        "summary": "Read ResourceHour",
        "description": "Reads ResourceHour objects from the database.",
        "operationId": "getResourceHour",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceHour>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceHour"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceHour-load"
        },
        "x-internal-id": "resourceHour-get",
        "x-filename-id": "resourcehour-get"
      },
      "put": {
        "tags": ["ResourceHour"],
        "summary": "Update ResourceHour",
        "description": "Send a request to this endpoint to update one or more ResourceHour. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateResourceHour",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceHour objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceHour>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceHour"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceHour-update"
        },
        "x-internal-id": "resourceHour-put",
        "x-filename-id": "resourcehour-put"
      },
      "post": {
        "tags": ["ResourceHour"],
        "summary": "Create ResourceHour",
        "description": "Send a request to this endpoint to create one or more ResourceHour. An application object will be created for each JSON object provided in the request body",
        "operationId": "createResourceHour",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceHour objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceHour>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceHour"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceHour-create"
        },
        "x-internal-id": "resourceHour-post",
        "x-filename-id": "resourcehour-post"
      },
      "delete": {
        "tags": ["ResourceHour"],
        "summary": "Delete ResourceHour",
        "description": "Send a request to this endpoint to delete one or more ResourceHour. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteResourceHour",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of ResourceHour.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceHour-delete"
        },
        "x-internal-id": "resourceHour-delete",
        "x-filename-id": "resourcehour-delete"
      }
    },
    "/resourceHour/fields": {
      "get": {
        "tags": ["ResourceHour"],
        "summary": "View ResourceHour fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceHourFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceHour-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceHour-fields-get",
        "x-filename-id": "resourcehour-fields-get"
      }
    },
    "/resourceRate/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceRate"],
        "summary": "View ResourceRate Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceRateFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ResourceRate field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceRate-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourcerate-getfieldlength-fieldname-get"
      }
    },
    "/resourceRate": {
      "get": {
        "tags": ["ResourceRate"],
        "summary": "Read ResourceRate",
        "description": "Reads ResourceRate objects from the database.",
        "operationId": "getResourceRate",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceRate>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceRate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRate-load"
        },
        "x-internal-id": "resourceRate-get",
        "x-filename-id": "resourcerate-get"
      },
      "put": {
        "tags": ["ResourceRate"],
        "summary": "Update ResourceRate",
        "description": "Send a request to this endpoint to update one or more ResourceRate. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateResourceRate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceHour objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceRate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceRate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRate-update"
        },
        "x-internal-id": "resourceRate-put",
        "x-filename-id": "resourcerate-put"
      },
      "post": {
        "tags": ["ResourceRate"],
        "summary": "Create ResourceRate",
        "description": "Send a request to this endpoint to create one or more ResourceRate. An application object will be created for each JSON object provided in the request body",
        "operationId": "createResourceRate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceHour objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceRate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceRate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "ResourceRate Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRate-create"
        },
        "x-internal-id": "resourceRate-post",
        "x-filename-id": "resourcerate-post"
      },
      "delete": {
        "tags": ["ResourceRate"],
        "summary": "Delete ResourceRate",
        "description": "Send a request to this endpoint to delete one or more ResourceRate. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteResourceRate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of ResourceRate.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRate-delete"
        },
        "x-internal-id": "resourceRate-delete",
        "x-filename-id": "resourcerate-delete"
      }
    },
    "/resourceRate/fields": {
      "get": {
        "tags": ["ResourceRate"],
        "summary": "View ResourceRate fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceRateFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceRate-fields-get",
        "x-filename-id": "resourcerate-fields-get"
      }
    },
    "/resource/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Resource"],
        "summary": "View Resource Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A resource field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resource-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resource-getFieldLength-{fieldName}-get",
        "x-filename-id": "resource-getfieldlength-fieldname-get"
      }
    },
    "/resource": {
      "get": {
        "tags": ["Resource"],
        "summary": "Read Resources",
        "description": "Reads Resource objects from the database.",
        "operationId": "getResource",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Resource>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Resource"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resource-load"
        },
        "x-internal-id": "resource-get",
        "x-filename-id": "resource-get"
      },
      "put": {
        "tags": ["Resource"],
        "summary": "Update Resource",
        "description": "Send a request to this endpoint to update one or more resource. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateResource",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of resource objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Resource>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resource-update"
        },
        "x-internal-id": "resource-put",
        "x-filename-id": "resource-put"
      },
      "post": {
        "tags": ["Resource"],
        "summary": "Create Resource",
        "description": "Send a request to this endpoint to create one or more resource. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createResource",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activity objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Resource>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resource-create"
        },
        "x-internal-id": "resource-post",
        "x-filename-id": "resource-post"
      },
      "delete": {
        "tags": ["Resource"],
        "summary": "Delete Resource",
        "description": "Send a request to this endpoint to delete one or more resource. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteResource",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of Resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resource-delete"
        },
        "x-internal-id": "resource-delete",
        "x-filename-id": "resource-delete"
      }
    },
    "/resource/fields": {
      "get": {
        "tags": ["Resource"],
        "summary": "View Resource fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getResourceFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resource-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resource-fields-get",
        "x-filename-id": "resource-fields-get"
      }
    },
    "/resourceRole/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceRole"],
        "summary": "View ResourceRole Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceRoleFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A ResourceRole field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRole-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceRole-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourcerole-getfieldlength-fieldname-get"
      }
    },
    "/resourceRole": {
      "get": {
        "tags": ["ResourceRole"],
        "summary": "Read ResourceRole",
        "description": "Reads ResourceRole objects from the database.",
        "operationId": "getResourceRole",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceRole>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceRole"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRole-load"
        },
        "x-internal-id": "resourceRole-get",
        "x-filename-id": "resourcerole-get"
      },
      "put": {
        "tags": ["ResourceRole"],
        "summary": "Update ResourceRole",
        "description": "Send a request to this endpoint to update one or more ResourceRole. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateResourceRole",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceRole objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceRole>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceRole"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRole-update"
        },
        "x-internal-id": "resourceRole-put",
        "x-filename-id": "resourcerole-put"
      },
      "post": {
        "tags": ["ResourceRole"],
        "summary": "Create ResourceRole",
        "description": "Send a request to this endpoint to create one or more ResourceRole. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createResourceRole",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceRole objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceRole>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceRole"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Role Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateResourceRoleResponse",
                  "$ref": "#/components/schemas/CreateResourceRoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRole-create"
        },
        "x-internal-id": "resourceRole-post",
        "x-filename-id": "resourcerole-post"
      },
      "delete": {
        "tags": ["ResourceRole"],
        "summary": "Delete ResourceRole",
        "description": "Send a request to this endpoint to delete one or more ResourceRole. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteResourceRole",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of ResourceRole objects.<p><p>Required fields: You must supply both the RoleObjectId and ResourceObjectId fields when you use the Delete ResourceAccess operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceRole>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceRole"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRole-delete"
        },
        "x-internal-id": "resourceRole-delete",
        "x-filename-id": "resourcerole-delete"
      }
    },
    "/resourceRole/fields": {
      "get": {
        "tags": ["ResourceRole"],
        "summary": "View ResourceRole fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getResourceRoleFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceRole-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceRole-fields-get",
        "x-filename-id": "resourcerole-fields-get"
      }
    },
    "/resourceTeam/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ResourceTeam"],
        "summary": "View ResourceTeam Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceTeamFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A ResourceTeam field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceTeam-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceTeam-getFieldLength-{fieldName}-get",
        "x-filename-id": "resourceteam-getfieldlength-fieldname-get"
      }
    },
    "/resourceTeam": {
      "get": {
        "tags": ["ResourceTeam"],
        "summary": "Read ResourceTeam",
        "description": "Reads ResourceTeam objects from the database.",
        "operationId": "getResourceTeam",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ResourceTeam>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceTeam"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceTeam-load"
        },
        "x-internal-id": "resourceTeam-get",
        "x-filename-id": "resourceteam-get"
      },
      "put": {
        "tags": ["ResourceTeam"],
        "summary": "Update ResourceTeam",
        "description": "Send a request to this endpoint to update one or more ResourceTeam. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateResourceTeam",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceTeam objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceTeam>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceTeam"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceTeam-update"
        },
        "x-internal-id": "resourceTeam-put",
        "x-filename-id": "resourceteam-put"
      },
      "post": {
        "tags": ["ResourceTeam"],
        "summary": "Create ResourceTeam",
        "description": "Send a request to this endpoint to create one or more ResourceTeam. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createResourceTeam",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ResourceTeam objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ResourceTeam>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceTeam"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceTeam-create"
        },
        "x-internal-id": "resourceTeam-post",
        "x-filename-id": "resourceteam-post"
      },
      "delete": {
        "tags": ["ResourceTeam"],
        "summary": "Delete ResourceTeam",
        "description": "Send a request to this endpoint to delete one or more ResourceTeam. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteResourceTeam",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of resourceTeam.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceTeam-delete"
        },
        "x-internal-id": "resourceTeam-delete",
        "x-filename-id": "resourceteam-delete"
      }
    },
    "/resourceTeam/fields": {
      "get": {
        "tags": ["ResourceTeam"],
        "summary": "View ResourceTeam fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getResourceTeamFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceTeam-getFieldLength-{fieldName}"
        },
        "x-internal-id": "resourceTeam-fields-get",
        "x-filename-id": "resourceteam-fields-get"
      }
    },
    "/riskCategory/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskCategory"],
        "summary": "View RiskCategory Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskCategoryFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A riskCategory field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskCategory-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskCategory-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskcategory-getfieldlength-fieldname-get"
      }
    },
    "/riskCategory": {
      "get": {
        "tags": ["RiskCategory"],
        "summary": "Read RiskCategories",
        "description": "Reads RiskCategory objects from the database.",
        "operationId": "getRiskCategory",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskCategory>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskCategory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskCategory-load"
        },
        "x-internal-id": "riskCategory-get",
        "x-filename-id": "riskcategory-get"
      },
      "put": {
        "tags": ["RiskCategory"],
        "summary": "Update RiskCategories",
        "description": "Send a request to this endpoint to update one or more riskCategory. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRiskCategory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskCategory objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskCategory>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskCategory"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskCategory-update"
        },
        "x-internal-id": "riskCategory-put",
        "x-filename-id": "riskcategory-put"
      },
      "post": {
        "tags": ["RiskCategory"],
        "summary": "Create RiskCategories",
        "description": "Send a request to this endpoint to create one or more riskCategory. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskCategory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskCategory objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskCategory>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskCategory"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskCategory-create"
        },
        "x-internal-id": "riskCategory-post",
        "x-filename-id": "riskcategory-post"
      },
      "delete": {
        "tags": ["RiskCategory"],
        "summary": "Delete RiskCategories",
        "description": "Send a request to this endpoint to delete one or more riskCategory. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskCategory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of riskCategory.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskCategory-delete"
        },
        "x-internal-id": "riskCategory-delete",
        "x-filename-id": "riskcategory-delete"
      }
    },
    "/riskCategory/fields": {
      "get": {
        "tags": ["RiskCategory"],
        "summary": "View RiskCategory fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskCategoryFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskCategory-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskCategory-fields-get",
        "x-filename-id": "riskcategory-fields-get"
      }
    },
    "/riskImpact/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskImpact"],
        "summary": "View RiskImpact Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskImpactFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A riskImpact field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskImpact-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskImpact-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskimpact-getfieldlength-fieldname-get"
      }
    },
    "/riskImpact": {
      "get": {
        "tags": ["RiskImpact"],
        "summary": "Read RiskImpacts",
        "description": "Reads RiskImpact objects from the database.",
        "operationId": "getRiskImpact",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskImpact>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskImpact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskImpact-load"
        },
        "x-internal-id": "riskImpact-get",
        "x-filename-id": "riskimpact-get"
      },
      "put": {
        "tags": ["RiskImpact"],
        "summary": "Update RiskImpacts",
        "description": "Send a request to this endpoint to update one or more riskImpact. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRiskImpact",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskImpact objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskImpact>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskImpact"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskImpact-update"
        },
        "x-internal-id": "riskImpact-put",
        "x-filename-id": "riskimpact-put"
      },
      "post": {
        "tags": ["RiskImpact"],
        "summary": "Create RiskImpacts",
        "description": "Send a request to this endpoint to create one or more riskImpact. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskImpact",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskImpact objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskImpact>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskImpact"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateRiskImpactResponse",
                  "$ref": "#/components/schemas/CreateRiskImpactResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskImpact-create"
        },
        "x-internal-id": "riskImpact-post",
        "x-filename-id": "riskimpact-post"
      },
      "delete": {
        "tags": ["RiskImpact"],
        "summary": "Delete RiskImpacts",
        "description": "Send a request to this endpoint to delete one or more riskImpact. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskImpact",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of RiskImpact objects.<p><p>Required fields: You must supply both the RiskObjectId and RiskThresholdObjectId fields when you use the Delete RiskImpact operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskImpact>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskImpact"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskImpact-delete"
        },
        "x-internal-id": "riskImpact-delete",
        "x-filename-id": "riskimpact-delete"
      }
    },
    "/riskImpact/fields": {
      "get": {
        "tags": ["RiskImpact"],
        "summary": "View RiskImpact fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskImpactFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskImpact-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskImpact-fields-get",
        "x-filename-id": "riskimpact-fields-get"
      }
    },
    "/riskMatrix/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskMatrix"],
        "summary": "View RiskMatrix Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskMatrixFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A riskMatrix field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrix-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskMatrix-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskmatrix-getfieldlength-fieldname-get"
      }
    },
    "/riskMatrix": {
      "get": {
        "tags": ["RiskMatrix"],
        "summary": "Read RiskMatrixs",
        "description": "Reads RiskMatrix objects from the database.",
        "operationId": "getRiskMatrix",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskMatrix>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskMatrix"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrix-load"
        },
        "x-internal-id": "riskMatrix-get",
        "x-filename-id": "riskmatrix-get"
      },
      "put": {
        "tags": ["RiskMatrix"],
        "summary": "Update RiskMatrixs",
        "description": "Send a request to this endpoint to update one or more riskMatrix. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRiskMatrix",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskMatrix objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskMatrix>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskMatrix"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrix-update"
        },
        "x-internal-id": "riskMatrix-put",
        "x-filename-id": "riskmatrix-put"
      },
      "post": {
        "tags": ["RiskMatrix"],
        "summary": "Create RiskMatrixs",
        "description": "Send a request to this endpoint to create one or more riskMatrix. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskMatrix",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskMatrix objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskMatrix>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskMatrix"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrix-create"
        },
        "x-internal-id": "riskMatrix-post",
        "x-filename-id": "riskmatrix-post"
      },
      "delete": {
        "tags": ["RiskMatrix"],
        "summary": "Delete RiskMatrixs",
        "description": "Send a request to this endpoint to delete one or more riskMatrix. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskMatrix",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of riskMatrix.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrix-delete"
        },
        "x-internal-id": "riskMatrix-delete",
        "x-filename-id": "riskmatrix-delete"
      }
    },
    "/riskMatrix/fields": {
      "get": {
        "tags": ["RiskMatrix"],
        "summary": "View RiskMatrix fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskMatrixFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrix-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskMatrix-fields-get",
        "x-filename-id": "riskmatrix-fields-get"
      }
    },
    "/riskMatrixScore/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskMatrixScore"],
        "summary": "View RiskMatrixScore Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskMatrixScoreFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A riskMatrixScore field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixScore-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskMatrixScore-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskmatrixscore-getfieldlength-fieldname-get"
      }
    },
    "/riskMatrixScore": {
      "get": {
        "tags": ["RiskMatrixScore"],
        "summary": "Read RiskMatrixScores",
        "description": "Reads RiskMatrixScore objects from the database.",
        "operationId": "getRiskMatrixScore",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskMatrixScore>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskMatrixScore"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixScore-load"
        },
        "x-internal-id": "riskMatrixScore-get",
        "x-filename-id": "riskmatrixscore-get"
      },
      "put": {
        "tags": ["RiskMatrixScore"],
        "summary": "Update RiskMatrixScores",
        "description": "Send a request to this endpoint to update one or more riskMatrixScore. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRiskMatrixScore",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskMatrixScore objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskMatrixScore>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskMatrixScore"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixScore-update"
        },
        "x-internal-id": "riskMatrixScore-put",
        "x-filename-id": "riskmatrixscore-put"
      },
      "post": {
        "tags": ["RiskMatrixScore"],
        "summary": "Create RiskMatrixScores",
        "description": "Send a request to this endpoint to create one or more riskMatrixScore. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskMatrixScore",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskMatrixScore objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskMatrixScore>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskMatrixScore"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixScore-create"
        },
        "x-internal-id": "riskMatrixScore-post",
        "x-filename-id": "riskmatrixscore-post"
      },
      "delete": {
        "tags": ["RiskMatrixScore"],
        "summary": "Delete RiskMatrixScores",
        "description": "Send a request to this endpoint to delete one or more riskMatrixScore. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskMatrixScore",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of riskMatrixScore.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixScore-delete"
        },
        "x-internal-id": "riskMatrixScore-delete",
        "x-filename-id": "riskmatrixscore-delete"
      }
    },
    "/riskMatrixScore/fields": {
      "get": {
        "tags": ["RiskMatrixScore"],
        "summary": "View RiskMatrixScore fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskMatrixScoreFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixScore-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskMatrixScore-fields-get",
        "x-filename-id": "riskmatrixscore-fields-get"
      }
    },
    "/riskMatrixThreshold/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskMatrixThreshold"],
        "summary": "View RiskMatrixThreshold Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskMatrixThresholdFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A riskMatrixThreshold field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixThreshold-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskMatrixThreshold-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskmatrixthreshold-getfieldlength-fieldname-get"
      }
    },
    "/riskMatrixThreshold": {
      "get": {
        "tags": ["RiskMatrixThreshold"],
        "summary": "Read RiskMatrixThresholds",
        "description": "Reads RiskMatrixThreshold objects from the database.",
        "operationId": "getRiskMatrixThreshold",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskMatrixThreshold>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskMatrixThreshold"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixThreshold-load"
        },
        "x-internal-id": "riskMatrixThreshold-get",
        "x-filename-id": "riskmatrixthreshold-get"
      },
      "post": {
        "tags": ["RiskMatrixThreshold"],
        "summary": "Create RiskMatrixThresholds",
        "description": "Send a request to this endpoint to create one or more riskMatrixThreshold. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskMatrixThreshold",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskMatrixThreshold objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskMatrixThreshold>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskMatrixThreshold"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateRiskMatrixThresholdResponse",
                  "$ref": "#/components/schemas/CreateRiskMatrixThresholdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixThreshold-create"
        },
        "x-internal-id": "riskMatrixThreshold-post",
        "x-filename-id": "riskmatrixthreshold-post"
      },
      "delete": {
        "tags": ["RiskMatrixThreshold"],
        "summary": "Delete RiskMatrixThresholds",
        "description": "Send a request to this endpoint to delete one or more riskMatrixThreshold. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskMatrixThreshold",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of riskMatrixThreshold objects.<p><p>Required fields: You must supply both the RiskMatrixObjectId and RiskThresholdObjectId fields when you use the Delete RiskMatrixThresholds operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskMatrixThreshold>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskMatrixThreshold"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixThreshold-delete"
        },
        "x-internal-id": "riskMatrixThreshold-delete",
        "x-filename-id": "riskmatrixthreshold-delete"
      }
    },
    "/riskMatrixThreshold/fields": {
      "get": {
        "tags": ["RiskMatrixThreshold"],
        "summary": "View RiskMatrixThreshold fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskMatrixThresholdFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskMatrixThreshold-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskMatrixThreshold-fields-get",
        "x-filename-id": "riskmatrixthreshold-fields-get"
      }
    },
    "/risk/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Risk"],
        "summary": "View Risk Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A risk field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "risk-getFieldLength-{fieldName}"
        },
        "x-internal-id": "risk-getFieldLength-{fieldName}-get",
        "x-filename-id": "risk-getfieldlength-fieldname-get"
      }
    },
    "/risk": {
      "get": {
        "tags": ["Risk"],
        "summary": "Read Risks",
        "description": "Reads Risk objects from the database.",
        "operationId": "getRisk",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Risk>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Risk"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "risk-load"
        },
        "x-internal-id": "risk-get",
        "x-filename-id": "risk-get"
      },
      "put": {
        "tags": ["Risk"],
        "summary": "Update Risks",
        "description": "Send a request to this endpoint to update one or more risk. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRisk",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of risk objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Risk>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Risk"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "risk-update"
        },
        "x-internal-id": "risk-put",
        "x-filename-id": "risk-put"
      },
      "post": {
        "tags": ["Risk"],
        "summary": "Create Risks",
        "description": "Send a request to this endpoint to create one or more risk. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRisk",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of risk objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Risk>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Risk"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "risk-create"
        },
        "x-internal-id": "risk-post",
        "x-filename-id": "risk-post"
      },
      "delete": {
        "tags": ["Risk"],
        "summary": "Delete Risks",
        "description": "Send a request to this endpoint to delete one or more risk. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRisk",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of risk.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "risk-delete"
        },
        "x-internal-id": "risk-delete",
        "x-filename-id": "risk-delete"
      }
    },
    "/risk/fields": {
      "get": {
        "tags": ["Risk"],
        "summary": "View Risk fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "risk-getFieldLength-{fieldName}"
        },
        "x-internal-id": "risk-fields-get",
        "x-filename-id": "risk-fields-get"
      }
    },
    "/riskResponseActionImpact/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskResponseActionImpact"],
        "summary": "View RiskResponseActionImpact Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskResponseActionImpactFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A riskResponseActionImpact field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseActionImpact-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskResponseActionImpact-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskresponseactionimpact-getfieldlength-fieldname-get"
      }
    },
    "/riskResponseActionImpact": {
      "get": {
        "tags": ["RiskResponseActionImpact"],
        "summary": "Read RiskResponseActionImpacts",
        "description": "Reads RiskResponseActionImpact objects from the database.",
        "operationId": "getRiskResponseActionImpact",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskResponseActionImpact>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskResponseActionImpact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseActionImpact-load"
        },
        "x-internal-id": "riskResponseActionImpact-get",
        "x-filename-id": "riskresponseactionimpact-get"
      },
      "put": {
        "tags": ["RiskResponseActionImpact"],
        "summary": "Update RiskResponseActionImpacts",
        "description": "Send a request to this endpoint to update one or more riskResponseActionImpact. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRiskResponseActionImpact",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskResponseActionImpact objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskResponseActionImpact>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskResponseActionImpact"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseActionImpact-update"
        },
        "x-internal-id": "riskResponseActionImpact-put",
        "x-filename-id": "riskresponseactionimpact-put"
      },
      "post": {
        "tags": ["RiskResponseActionImpact"],
        "summary": "Create RiskResponseActionImpacts",
        "description": "Send a request to this endpoint to create one or more riskResponseActionImpact. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskResponseActionImpact",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskResponseActionImpact objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskResponseActionImpact>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskResponseActionImpact"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateRiskResponseActionImpactResponse",
                  "$ref": "#/components/schemas/CreateRiskResponseActionImpactResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseActionImpact-create"
        },
        "x-internal-id": "riskResponseActionImpact-post",
        "x-filename-id": "riskresponseactionimpact-post"
      },
      "delete": {
        "tags": ["RiskResponseActionImpact"],
        "summary": "Delete RiskResponseActionImpacts",
        "description": "Send a request to this endpoint to delete one or more riskResponseActionImpact. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskResponseActionImpact",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of riskResponseActionImpact objects.<p><p>Required fields: You must supply both the RiskResponseActionObjectId and RiskThresholdObjectId fields when you use the Delete RiskResponseActionImpacts operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskResponseActionImpact>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskResponseActionImpact"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseActionImpact-delete"
        },
        "x-internal-id": "riskResponseActionImpact-delete",
        "x-filename-id": "riskresponseactionimpact-delete"
      }
    },
    "/riskResponseActionImpact/fields": {
      "get": {
        "tags": ["RiskResponseActionImpact"],
        "summary": "View RiskResponseActionImpact fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskResponseActionImpactFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseActionImpact-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskResponseActionImpact-fields-get",
        "x-filename-id": "riskresponseactionimpact-fields-get"
      }
    },
    "/riskResponseAction/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskResponseAction"],
        "summary": "View RiskResponseAction Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskResponseActionFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A riskResponseAction field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseAction-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskResponseAction-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskresponseaction-getfieldlength-fieldname-get"
      }
    },
    "/riskResponseAction": {
      "get": {
        "tags": ["RiskResponseAction"],
        "summary": "Read RiskResponseActions",
        "description": "Reads RiskResponseAction objects from the database.",
        "operationId": "getRiskResponseAction",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskResponseAction>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskResponseAction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseAction-load"
        },
        "x-internal-id": "riskResponseAction-get",
        "x-filename-id": "riskresponseaction-get"
      },
      "put": {
        "tags": ["RiskResponseAction"],
        "summary": "Update RiskResponseActions",
        "description": "Send a request to this endpoint to update one or more riskResponseAction. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRiskResponseAction",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskResponseAction objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskResponseAction>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskResponseAction"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseAction-update"
        },
        "x-internal-id": "riskResponseAction-put",
        "x-filename-id": "riskresponseaction-put"
      },
      "post": {
        "tags": ["RiskResponseAction"],
        "summary": "Create RiskResponseActions",
        "description": "Send a request to this endpoint to create one or more riskResponseAction. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskResponseAction",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskResponseAction objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskResponseAction>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskResponseAction"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseAction-create"
        },
        "x-internal-id": "riskResponseAction-post",
        "x-filename-id": "riskresponseaction-post"
      },
      "delete": {
        "tags": ["RiskResponseAction"],
        "summary": "Delete RiskResponseActions",
        "description": "Send a request to this endpoint to delete one or more riskResponseAction. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskResponseAction",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of riskResponseAction.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseAction-delete"
        },
        "x-internal-id": "riskResponseAction-delete",
        "x-filename-id": "riskresponseaction-delete"
      }
    },
    "/riskResponseAction/fields": {
      "get": {
        "tags": ["RiskResponseAction"],
        "summary": "View RiskResponseAction fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskResponseActionFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponseAction-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskResponseAction-fields-get",
        "x-filename-id": "riskresponseaction-fields-get"
      }
    },
    "/riskResponsePlan/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskResponsePlan"],
        "summary": "View RiskResponsePlan Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskResponsePlanFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A riskResponsePlan field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponsePlan-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskResponsePlan-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskresponseplan-getfieldlength-fieldname-get"
      }
    },
    "/riskResponsePlan": {
      "get": {
        "tags": ["RiskResponsePlan"],
        "summary": "Read RiskResponsePlans",
        "description": "Reads RiskResponsePlan objects from the database.",
        "operationId": "getRiskResponsePlan",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskResponsePlan>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskResponsePlan"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponsePlan-load"
        },
        "x-internal-id": "riskResponsePlan-get",
        "x-filename-id": "riskresponseplan-get"
      },
      "put": {
        "tags": ["RiskResponsePlan"],
        "summary": "Update RiskResponsePlans",
        "description": "Send a request to this endpoint to update one or more riskResponsePlan. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRiskResponsePlan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskResponsePlan objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskResponsePlan>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskResponsePlan"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponsePlan-update"
        },
        "x-internal-id": "riskResponsePlan-put",
        "x-filename-id": "riskresponseplan-put"
      },
      "post": {
        "tags": ["RiskResponsePlan"],
        "summary": "Create RiskResponsePlans",
        "description": "Send a request to this endpoint to create one or more riskResponsePlan. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskResponsePlan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskResponsePlan objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskResponsePlan>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskResponsePlan"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponsePlan-create"
        },
        "x-internal-id": "riskResponsePlan-post",
        "x-filename-id": "riskresponseplan-post"
      },
      "delete": {
        "tags": ["RiskResponsePlan"],
        "summary": "Delete RiskResponsePlans",
        "description": "Send a request to this endpoint to delete one or more riskResponsePlan. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskResponsePlan",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of riskResponsePlan.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponsePlan-delete"
        },
        "x-internal-id": "riskResponsePlan-delete",
        "x-filename-id": "riskresponseplan-delete"
      }
    },
    "/riskResponsePlan/fields": {
      "get": {
        "tags": ["RiskResponsePlan"],
        "summary": "View RiskResponsePlan fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskResponsePlanFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskResponsePlan-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskResponsePlan-fields-get",
        "x-filename-id": "riskresponseplan-fields-get"
      }
    },
    "/riskThresholdLevel/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskThresholdLevel"],
        "summary": "View RiskThresholdLevel Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskThresholdLevelFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A riskThresholdLevel field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThresholdLevel-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskThresholdLevel-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskthresholdlevel-getfieldlength-fieldname-get"
      }
    },
    "/riskThresholdLevel": {
      "get": {
        "tags": ["RiskThresholdLevel"],
        "summary": "Read RiskThresholdLevels",
        "description": "Reads RiskThresholdLevel objects from the database.",
        "operationId": "getRiskThresholdLevel",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskThresholdLevel>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskThresholdLevel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThresholdLevel-load"
        },
        "x-internal-id": "riskThresholdLevel-get",
        "x-filename-id": "riskthresholdlevel-get"
      },
      "put": {
        "tags": ["RiskThresholdLevel"],
        "summary": "Update RiskThresholdLevels",
        "description": "Send a request to this endpoint to update one or more riskThresholdLevel. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRiskThresholdLevel",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskThresholdLevel objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskThresholdLevel>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskThresholdLevel"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThresholdLevel-update"
        },
        "x-internal-id": "riskThresholdLevel-put",
        "x-filename-id": "riskthresholdlevel-put"
      },
      "post": {
        "tags": ["RiskThresholdLevel"],
        "summary": "Create RiskThresholdLevels",
        "description": "Send a request to this endpoint to create one or more riskThresholdLevel. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskThresholdLevel",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskThresholdLevel objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskThresholdLevel>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskThresholdLevel"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThresholdLevel-create"
        },
        "x-internal-id": "riskThresholdLevel-post",
        "x-filename-id": "riskthresholdlevel-post"
      },
      "delete": {
        "tags": ["RiskThresholdLevel"],
        "summary": "Delete RiskThresholdLevels",
        "description": "Send a request to this endpoint to delete one or more riskThresholdLevel. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskThresholdLevel",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of riskThresholdLevel.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThresholdLevel-delete"
        },
        "x-internal-id": "riskThresholdLevel-delete",
        "x-filename-id": "riskthresholdlevel-delete"
      }
    },
    "/riskThresholdLevel/fields": {
      "get": {
        "tags": ["RiskThresholdLevel"],
        "summary": "View RiskThresholdLevel fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskThresholdLevelFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThresholdLevel-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskThresholdLevel-fields-get",
        "x-filename-id": "riskthresholdlevel-fields-get"
      }
    },
    "/riskThreshold/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RiskThreshold"],
        "summary": "View RiskThreshold Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRiskThresholdFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An riskThreshold field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThreshold-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskThreshold-getFieldLength-{fieldName}-get",
        "x-filename-id": "riskthreshold-getfieldlength-fieldname-get"
      }
    },
    "/riskThreshold": {
      "get": {
        "tags": ["RiskThreshold"],
        "summary": "Read RiskThresholds",
        "description": "Reads RiskThreshold objects from the database.",
        "operationId": "getRiskThreshold",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RiskThreshold>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskThreshold"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThreshold-load"
        },
        "x-internal-id": "riskThreshold-get",
        "x-filename-id": "riskthreshold-get"
      },
      "put": {
        "tags": ["RiskThreshold"],
        "summary": "Update  RiskThresholds",
        "description": "Send a request to this endpoint to update one or more riskThreshold. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRiskThreshold",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskThreshold objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskThreshold>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskThreshold"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThreshold-update"
        },
        "x-internal-id": "riskThreshold-put",
        "x-filename-id": "riskthreshold-put"
      },
      "post": {
        "tags": ["RiskThreshold"],
        "summary": "Create RiskThresholds",
        "description": "Send a request to this endpoint to create one or more riskThreshold. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRiskThreshold",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of riskThreshold objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RiskThreshold>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RiskThreshold"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThreshold-create"
        },
        "x-internal-id": "riskThreshold-post",
        "x-filename-id": "riskthreshold-post"
      },
      "delete": {
        "tags": ["RiskThreshold"],
        "summary": "Delete RiskThresholds",
        "description": "Send a request to this endpoint to delete one or more riskThreshold. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRiskThreshold",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of riskThreshold.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThreshold-delete"
        },
        "x-internal-id": "riskThreshold-delete",
        "x-filename-id": "riskthreshold-delete"
      }
    },
    "/riskThreshold/fields": {
      "get": {
        "tags": ["RiskThreshold"],
        "summary": "View RiskThreshold fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRiskThresholdFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "riskThreshold-getFieldLength-{fieldName}"
        },
        "x-internal-id": "riskThreshold-fields-get",
        "x-filename-id": "riskthreshold-fields-get"
      }
    },
    "/roleRate/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["RoleRate"],
        "summary": "View RoleRate Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRoleRateFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A RoleRate field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "role-getFieldLength-{fieldName}"
        },
        "x-internal-id": "roleRate-getFieldLength-{fieldName}-get",
        "x-filename-id": "rolerate-getfieldlength-fieldname-get"
      }
    },
    "/roleRate": {
      "get": {
        "tags": ["RoleRate"],
        "summary": "Read RoleRate",
        "description": "Reads RoleRate objects from the database.",
        "operationId": "getRoleRate",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<RoleRate>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "role-load"
        },
        "x-internal-id": "roleRate-get",
        "x-filename-id": "rolerate-get"
      },
      "put": {
        "tags": ["RoleRate"],
        "summary": "Update Activities",
        "description": "Send a request to this endpoint to update one or more RoleRate. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRoleRate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of RoleRate objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RoleRate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "roleRate-update"
        },
        "x-internal-id": "roleRate-put",
        "x-filename-id": "rolerate-put"
      },
      "post": {
        "tags": ["RoleRate"],
        "summary": "Create RoleRate",
        "description": "Send a request to this endpoint to create one or more RoleRate. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRoleRate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of RoleRate objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<RoleRate>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "RoleRate-create"
        },
        "x-internal-id": "roleRate-post",
        "x-filename-id": "rolerate-post"
      }
    },
    "/roleRate/fields": {
      "get": {
        "tags": ["RoleRate"],
        "summary": "View RoleRate fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRoleRateFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "roleRate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "roleRate-fields-get",
        "x-filename-id": "rolerate-fields-get"
      }
    },
    "/role/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Role"],
        "summary": "View Role Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getRoleFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A Role field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "role-getFieldLength-{fieldName}"
        },
        "x-internal-id": "role-getFieldLength-{fieldName}-get",
        "x-filename-id": "role-getfieldlength-fieldname-get"
      }
    },
    "/role": {
      "get": {
        "tags": ["Role"],
        "summary": "Read Role",
        "description": "Reads Role objects from the database.",
        "operationId": "getRole",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Role>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "role-load"
        },
        "x-internal-id": "role-get",
        "x-filename-id": "role-get"
      },
      "put": {
        "tags": ["Role"],
        "summary": "Update Activities",
        "description": "Send a request to this endpoint to update one or more Role. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of Role objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Role>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "Role-update"
        },
        "x-internal-id": "role-put",
        "x-filename-id": "role-put"
      },
      "post": {
        "tags": ["Role"],
        "summary": "Create Role",
        "description": "Send a request to this endpoint to create one or more Role. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createRole",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of Role objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Role>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "Role-create"
        },
        "x-internal-id": "role-post",
        "x-filename-id": "role-post"
      },
      "delete": {
        "tags": ["Role"],
        "summary": "Delete Role",
        "description": "Send a request to this endpoint to delete one or more Role. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of Role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "role-delete"
        },
        "x-internal-id": "role-delete",
        "x-filename-id": "role-delete"
      }
    },
    "/role/fields": {
      "get": {
        "tags": ["Role"],
        "summary": "View Role fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getRoleFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "role-getFieldLength-{fieldName}"
        },
        "x-internal-id": "role-fields-get",
        "x-filename-id": "role-fields-get"
      }
    },
    "/scheduleCheckOption/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ScheduleCheckOption"],
        "summary": "View ScheduleCheckOption Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getScheduleCheckOptionFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ScheduleCheckOption field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "scheduleCheckOption-getFieldLength-{fieldName}"
        },
        "x-internal-id": "scheduleCheckOption-getFieldLength-{fieldName}-get",
        "x-filename-id": "schedulecheckoption-getfieldlength-fieldname-get"
      }
    },
    "/scheduleCheckOption": {
      "get": {
        "tags": ["ScheduleCheckOption"],
        "summary": "Read ScheduleCheckOption",
        "description": "Reads ScheduleCheckOption objects from the database.",
        "operationId": "getScheduleCheckOption",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ScheduleCheckOption>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleCheckOption"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "scheduleCheckOption-load"
        },
        "x-internal-id": "scheduleCheckOption-get",
        "x-filename-id": "schedulecheckoption-get"
      },
      "put": {
        "tags": ["ScheduleCheckOption"],
        "summary": "Update ScheduleCheckOption",
        "description": "Send a request to this endpoint to update one or more ScheduleCheckOption. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateScheduleCheckOption",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ScheduleOptions objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ScheduleCheckOption>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleCheckOption"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "scheduleCheckOption-update"
        },
        "x-internal-id": "scheduleCheckOption-put",
        "x-filename-id": "schedulecheckoption-put"
      },
      "post": {
        "tags": ["ScheduleCheckOption"],
        "summary": "Create ScheduleCheckOption",
        "description": "Send a request to this endpoint to create ScheduleCheckOption. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createScheduleCheckOption",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of risk objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ScheduleCheckOption>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleCheckOption"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "ScheduleCheckOption-create"
        },
        "x-internal-id": "scheduleCheckOption-post",
        "x-filename-id": "schedulecheckoption-post"
      },
      "delete": {
        "tags": ["ScheduleCheckOption"],
        "summary": "Delete ScheduleCheckOption",
        "description": "Send a request to this endpoint to delete one or more ScheduleCheckOption. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteScheduleCheckOption",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of ScheduleCheckOption.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "ScheduleCheckOption-delete"
        },
        "x-internal-id": "scheduleCheckOption-delete",
        "x-filename-id": "schedulecheckoption-delete"
      }
    },
    "/scheduleCheckOption/fields": {
      "get": {
        "tags": ["ScheduleCheckOption"],
        "summary": "View ScheduleCheckOption fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getScheduleCheckOptionFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "scheduleCheckOption-getFieldLength-{fieldName}"
        },
        "x-internal-id": "scheduleCheckOption-fields-get",
        "x-filename-id": "schedulecheckoption-fields-get"
      }
    },
    "/scheduleOptions/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["ScheduleOptions"],
        "summary": "View ScheduleOptions Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getScheduleOptionsFieldLength_1",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An ScheduleOptions field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "scheduleOptions-getFieldLength-{fieldName}"
        },
        "x-internal-id": "scheduleOptions-getFieldLength-{fieldName}-get",
        "x-filename-id": "scheduleoptions-getfieldlength-fieldname-get"
      }
    },
    "/scheduleOptions": {
      "get": {
        "tags": ["ScheduleOptions"],
        "summary": "Read ScheduleOptions",
        "description": "Reads ScheduleOptions objects from the database.",
        "operationId": "getScheduleOptions",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ScheduleOptions>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleOptions"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "scheduleOptions-load"
        },
        "x-internal-id": "scheduleOptions-get",
        "x-filename-id": "scheduleoptions-get"
      },
      "put": {
        "tags": ["ScheduleOptions"],
        "summary": "Update ScheduleOptions",
        "description": "Send a request to this endpoint to update one or more ScheduleOptions. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateScheduleOptions",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ScheduleOptions objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<ScheduleOptions>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleOptions"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "scheduleOptions-update"
        },
        "x-internal-id": "scheduleOptions-put",
        "x-filename-id": "scheduleoptions-put"
      }
    },
    "/scheduleOptions/fields": {
      "get": {
        "tags": ["ScheduleOptions"],
        "summary": "View ScheduleOptions fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getScheduleOptionsFields_1",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "scheduleOptions-getFieldLength-{fieldName}"
        },
        "x-internal-id": "scheduleOptions-fields-get",
        "x-filename-id": "scheduleoptions-fields-get"
      }
    },
    "/shift/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Shift"],
        "summary": "View Shift Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getShiftFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A Shift field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "shift-getFieldLength-{fieldName}"
        },
        "x-internal-id": "shift-getFieldLength-{fieldName}-get",
        "x-filename-id": "shift-getfieldlength-fieldname-get"
      }
    },
    "/shift": {
      "get": {
        "tags": ["Shift"],
        "summary": "Read Shift",
        "description": "Reads Shift objects from the database.",
        "operationId": "getShift",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Shift>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shift"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "shift-load"
        },
        "x-internal-id": "shift-get",
        "x-filename-id": "shift-get"
      },
      "put": {
        "tags": ["Shift"],
        "summary": "Update Activities",
        "description": "Send a request to this endpoint to update one or more Shift. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateShift",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of Shift objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Shift>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shift"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "shift-update"
        },
        "x-internal-id": "shift-put",
        "x-filename-id": "shift-put"
      },
      "post": {
        "tags": ["Shift"],
        "summary": "Create Shift",
        "description": "Send a request to this endpoint to create one or more Shift. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createShift",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of Shift objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Shift>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shift"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "shift-create"
        },
        "x-internal-id": "shift-post",
        "x-filename-id": "shift-post"
      },
      "delete": {
        "tags": ["Shift"],
        "summary": "Delete Shift",
        "description": "Send a request to this endpoint to delete one or more Shift. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteShift",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of Shift.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "shift-delete"
        },
        "x-internal-id": "shift-delete",
        "x-filename-id": "shift-delete"
      }
    },
    "/shift/fields": {
      "get": {
        "tags": ["Shift"],
        "summary": "View Shift fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getShiftFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "shift-getFieldLength-{fieldName}"
        },
        "x-internal-id": "shift-fields-get",
        "x-filename-id": "shift-fields-get"
      }
    },
    "/spread/resourceAssignmentSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadResourceAssignmentSpread",
        "description": "Reads the live resource assignment spread data from the specified resource assignment.",
        "operationId": "readResourceAssignmentSpread",
        "parameters": [
          {
            "name": "ResourceAssignmentObjectId",
            "in": "query",
            "description": "ResourceAssignmentObjectId's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualOvertimeCost,ActualOvertimeUnits,ActualRegularCost,ActualRegularUnits,ActualUnits,AtCompletionCost,AtCompletionUnits,PlannedCost,PlannedUnits,RemainingCost,RemainingLateCost,RemainingLateUnits,RemainingUnits,StaffedRemainingCost,StaffedRemainingLateCost,StaffedRemainingLateUnits,StaffedRemainingUnits,UnstaffedRemainingCost,UnstaffedRemainingLateCost,UnstaffedRemainingLateUnits,UnstaffedRemainingUnits,PeriodActualCost,PeriodActualUnits,PeriodAtCompletionCost,PeriodAtCompletionUnits"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadResourceAssignmentSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadResourceAssignmentSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readResourceAssignmentSpread"
        },
        "x-internal-id": "spread-resourceAssignmentSpread-get",
        "x-filename-id": "spread-resourceassignmentspread-get"
      },
      "put": {
        "tags": ["Spread"],
        "summary": "Update ResourceAssignmentSpread",
        "description": "Send a request to this endpoint to update one or more ResourceAssignmentSpread. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateResourceAssignmentSpread",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ResourceAssignmentSpread object.",
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateResourceAssignmentSpread",
                "type": "object",
                "$ref": "#/components/schemas/UpdateResourceAssignmentSpread"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "resourceAssignmentSpread-update"
        },
        "x-internal-id": "spread-resourceAssignmentSpread-put",
        "x-filename-id": "spread-resourceassignmentspread-put"
      }
    },
    "/spread/wbsRoleSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadWBSRoleSpread",
        "description": "Reads the spreads of the specified role assignments to the activities from the specified WBS.",
        "operationId": "readWBSRoleSpread",
        "parameters": [
          {
            "name": "WBSObjectId",
            "in": "query",
            "description": "WBSObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "RoleObjectId",
            "in": "query",
            "description": "RoleObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "7027,7037"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualOvertimeCost,ActualOvertimeUnits,ActualRegularCost,ActualRegularUnits,ActualUnits,AtCompletionCost,AtCompletionUnits,Limit,PeriodActualCost,PeriodActualUnits,PeriodAtCompletionCost,PeriodAtCompletionUnits,PlannedCost,PlannedUnitsRemainingCost,RemainingLateCost,RemainingLateUnits,RemainingUnits,StaffedActualCost,StaffedActualOvertimeCost,StaffedActualOvertimeUnits,StaffedActualRegularCost,StaffedActualRegularUnits,StaffedActualUnits,StaffedAtCompletionCost,StaffedAtCompletionUnits,StaffedPlannedCost,StaffedPlannedUnits,StaffedRemainingCost,StaffedRemainingLateCost,StaffedRemainingLateUnits,StaffedRemainingUnits,UnstaffedActualCost,UnstaffedActualOvertimeCost,UnstaffedActualOvertimeUnits,UnstaffedActualRegularCost,UnstaffedActualRegularUnits,UnstaffedActualUnits,UnstaffedAtCompletionCost,UnstaffedAtCompletionUnits,UnstaffedPlannedCost,UnstaffedPlannedUnits,UnstaffedRemainingCost,UnstaffedRemainingLateCost,UnstaffedRemainingLateUnits,UnstaffedRemainingUnits"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadWBSRoleSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadWBSRoleSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readWBSRoleSpread"
        },
        "x-internal-id": "spread-wbsRoleSpread-get",
        "x-filename-id": "spread-wbsrolespread-get"
      }
    },
    "/spread/wbsResourceSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadWBSResourceSpread",
        "description": "Reads the summarized spreads of the Resources for the specified WBS.",
        "operationId": "readWBSResourceSpread",
        "parameters": [
          {
            "name": "WBSObjectId",
            "in": "query",
            "description": "WBSObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "ResourceObjectId",
            "in": "query",
            "description": "ResourceObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "7027,7037"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualOvertimeCost,ActualOvertimeUnits,ActualRegularCost,ActualRegularUnits,ActualUnits,AtCompletionCost,AtCompletionUnits,Limit,PeriodActualCost,PeriodActualUnits,PeriodAtCompletionCost,PeriodAtCompletionUnits,PlannedCost,PlannedUnits,RemainingCost,RemainingLateCost,RemainingLateUnits,RemainingUnits,StaffedActualCost,StaffedActualOvertimeCost,StaffedActualOvertimeUnits,StaffedActualRegularCost,StaffedActualRegularUnits,StaffedActualUnits,StaffedAtCompletionCost,StaffedAtCompletionUnits,StaffedPlannedCost,StaffedPlannedUnits,StaffedRemainingCost,StaffedRemainingLateCost,StaffedRemainingLateUnits,StaffedRemainingUnits,UnstaffedActualCost,UnstaffedActualOvertimeCost,UnstaffedActualOvertimeUnits,UnstaffedActualRegularCost,UnstaffedActualRegularUnits,UnstaffedActualUnits,UnstaffedAtCompletionCost,UnstaffedAtCompletionUnits,UnstaffedPlannedCost,UnstaffedPlannedUnits,UnstaffedRemainingCost,UnstaffedRemainingLateCost,UnstaffedRemainingLateUnits,UnstaffedRemainingUnits"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadWBSResourceSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadWBSResourceSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readWBSResourceSpread"
        },
        "x-internal-id": "spread-wbsResourceSpread-get",
        "x-filename-id": "spread-wbsresourcespread-get"
      }
    },
    "/spread/projectResourceSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadProjectResourceSpread",
        "description": "Reads the summarized spreads of the specified Project Resources",
        "operationId": "readProjectResourceSpread",
        "parameters": [
          {
            "name": "ProjectObjectId",
            "in": "query",
            "description": "ProjectObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "ResourceObjectId",
            "in": "query",
            "description": "ResourceObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "7027,7037"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualOvertimeCost,ActualOvertimeUnits,ActualRegularCost,ActualRegularUnits,ActualUnits,AtCompletionCost,AtCompletionUnits,Limit,PeriodActualCost,PeriodActualUnits,PeriodAtCompletionCost,PeriodAtCompletionUnits,PlannedCost,PlannedUnits,RemainingCost,RemainingLateCost,RemainingLateUnits,RemainingUnits,StaffedActualCost,StaffedActualOvertimeCost,StaffedActualOvertimeUnits,StaffedActualRegularCost,StaffedActualRegularUnits,StaffedActualUnits,StaffedAtCompletionCost,StaffedAtCompletionUnits,StaffedPlannedCost,StaffedPlannedUnits,StaffedRemainingCost,StaffedRemainingLateCost,StaffedRemainingLateUnits,StaffedRemainingUnits,UnstaffedActualCost,UnstaffedActualOvertimeCost,UnstaffedActualOvertimeUnits,UnstaffedActualRegularCost,UnstaffedActualRegularUnits,UnstaffedActualUnits,UnstaffedAtCompletionCost,UnstaffedAtCompletionUnits,UnstaffedPlannedCost,UnstaffedPlannedUnits,UnstaffedRemainingCost,UnstaffedRemainingLateCost,UnstaffedRemainingLateUnits,UnstaffedRemainingUnits"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadProjectResourceSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadProjectResourceSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readProjectResourceSpread"
        },
        "x-internal-id": "spread-projectResourceSpread-get",
        "x-filename-id": "spread-projectresourcespread-get"
      }
    },
    "/spread/wbsExpenseSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadWBSExpenseSpread",
        "description": "Reads the summarized WBS spreads of the specified project resources",
        "operationId": "readWBSExpenseSpread",
        "parameters": [
          {
            "name": "WBSObjectId",
            "in": "query",
            "description": "WBSObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "ExpenseCategoryObjectId",
            "in": "query",
            "description": "ExpenseCategoryObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "7027,7037"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,AtCompletionCost,PlannedCost,RemainingCost"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadWBSExpenseSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadWBSExpenseSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readWBSExpenseSpread"
        },
        "x-internal-id": "spread-wbsExpenseSpread-get",
        "x-filename-id": "spread-wbsexpensespread-get"
      }
    },
    "/spread/activitySpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadActivitySpread",
        "description": "Reads the live activity spread data from the specified activities.",
        "operationId": "readActivitySpread",
        "parameters": [
          {
            "name": "ActivityObjectId",
            "in": "query",
            "description": "ActivityObjectId's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualExpenseCost,ActualLaborCost,ActualLaborUnits,ActualMaterialCost,ActualNonLaborCost,ActualNonLaborUnits,ActualTotalCost,AtCompletionExpenseCost,AtCompletionLaborCost,AtCompletionLaborUnits,AtCompletionMaterialCost,AtCompletionNonLaborCost,AtCompletionNonLaborUnits,AtCompletionTotalCost,Baseline1ActualExpenseCost,Baseline1ActualLaborCost,Baseline1ActualLaborUnits,Baseline1ActualMaterialCost,Baseline1ActualNonLaborCost,Baseline1ActualNonLaborUnits,Baseline1ActualTotalCost,Baseline1PlannedExpenseCost,Baseline1PlannedLaborCost,Baseline1PlannedLaborUnits,Baseline1PlannedMaterialCost,Baseline1PlannedNonLaborCost,Baseline1PlannedNonLaborUnits,Baseline1PlannedTotalCost,BaselineActualExpenseCost,BaselineActualLaborCost,BaselineActualLaborUnits,BaselineActualMaterialCost,BaselineActualNonLaborCost,BaselineActualNonLaborUnits,BaselineActualTotalCost,BaselinePlannedExpenseCost,BaselinePlannedLaborCost,BaselinePlannedLaborUnits,BaselinePlannedMaterialCost,BaselinePlannedNonLaborCost,BaselinePlannedNonLaborUnits,BaselinePlannedTotalCost,EarnedValueCost,EarnedValueLaborUnits,EstimateAtCompletionCost,EstimateAtCompletionLaborUnits,EstimateToCompleteCost,EstimateToCompleteLaborUnits,PlannedExpenseCost,PlannedLaborCost,PlannedLaborUnits,PlannedMaterialCost,PlannedNonLaborCost,PlannedNonLaborUnits,PlannedTotalCost,PlannedValueCost,PlannedValueLaborUnits,RemainingExpenseCost,RemainingLaborCost,RemainingLaborUnits,RemainingLateExpenseCost,RemainingLateLaborCost,RemainingLateLaborUnits,RemainingLateMaterialCost,RemainingLateNonLaborCost,RemainingLateNonLaborUnits,RemainingLateTotalCost,RemainingMaterialCost,RemainingNonLaborCost,RemainingNonLaborUnits,RemainingTotalCost"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadActivitySpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadActivitySpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readActivitySpread"
        },
        "x-internal-id": "spread-activitySpread-get",
        "x-filename-id": "spread-activityspread-get"
      }
    },
    "/spread/projectRoleSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadProjectRoleSpread",
        "description": "Reads the spreads of the specified role assignments to the activities from the specified projects.",
        "operationId": "readProjectRoleSpread",
        "parameters": [
          {
            "name": "ProjectObjectId",
            "in": "query",
            "description": "ProjectObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "RoleObjectId",
            "in": "query",
            "description": "RoleObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "7027,7037"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualOvertimeCost,ActualOvertimeUnits,ActualRegularCost,ActualRegularUnits,ActualUnits,AtCompletionCost,AtCompletionUnits,Limit,PeriodActualCost,PeriodActualUnits,PeriodAtCompletionCost,PeriodAtCompletionUnits,PlannedCost,PlannedUnits,RemainingCost,RemainingLateCost,RemainingLateUnits,RemainingUnits,StaffedActualCost,StaffedActualOvertimeCost,StaffedActualOvertimeUnits,StaffedActualRegularCost,StaffedActualRegularUnits,StaffedActualUnits,StaffedAtCompletionCost,StaffedAtCompletionUnits,StaffedPlannedCost,StaffedPlannedUnits,StaffedRemainingCost,StaffedRemainingLateCost,StaffedRemainingLateUnits,StaffedRemainingUnits,UnstaffedActualCost,UnstaffedActualOvertimeCost,UnstaffedActualOvertimeUnits,UnstaffedActualRegularCost,UnstaffedActualRegularUnits,UnstaffedActualUnits,UnstaffedAtCompletionCost,UnstaffedAtCompletionUnits,UnstaffedPlannedCost,UnstaffedPlannedUnits,UnstaffedRemainingCost,UnstaffedRemainingLateCost,UnstaffedRemainingLateUnits,UnstaffedRemainingUnits"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadProjectRoleSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadProjectRoleSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readProjectRoleSpread"
        },
        "x-internal-id": "spread-projectRoleSpread-get",
        "x-filename-id": "spread-projectrolespread-get"
      }
    },
    "/spread/projectSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadProjectSpread",
        "description": "Reads the summarized spreads for the specified projects.",
        "operationId": "ReadProjectSpread",
        "parameters": [
          {
            "name": "ProjectObjectId",
            "in": "query",
            "description": "ProjectObjectId's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualExpenseCost,ActualLaborCost,ActualLaborUnits,ActualMaterialCost,ActualNonlaborCost,ActualNonlaborUnits,ActualTotalCost,AtCompletionExpenseCost,AtCompletionLaborCost,AtCompletionLaborUnits,AtCompletionMaterialCost,AtCompletionNonlaborCost,AtCompletionNonlaborUnits,AtCompletionTotalCost,BaselinePlannedExpenseCost,BaselinePlannedLaborCost,BaselinePlannedLaborUnits,BaselinePlannedMaterialCost,BaselinePlannedNonlaborCost,BaselinePlannedNonlaborUnits,BaselinePlannedTotalCost,EarnedValueCost,EarnedValueLaborUnits,EstimateAtCompletionCost,EstimateAtCompletionLaborUnits,EstimateToCompleteCost,EstimateToCompleteLaborUnits,PeriodActualCost,PeriodActualExpenseCost,PeriodActualLaborCost,PeriodActualLaborUnits,PeriodActualMaterialCost,PeriodActualNonLaborCost,PeriodActualNonLaborUnits,PeriodAtCompletionExpenseCost,PeriodAtCompletionLaborCost,PeriodAtCompletionLaborUnits,PeriodAtCompletionMaterialCost,PeriodAtCompletionNonLaborCost,PeriodAtCompletionNonLaborUnits,PeriodAtCompletionTotalCost,PeriodEarnedValueCost,PeriodEarnedValueLaborUnits,PeriodEstimateAtCompletionCost,PeriodEstimateAtCompletionLaborUnits,PeriodPlannedValueCost,PeriodPlannedValueLaborUnits,PlannedExpenseCost,PlannedLaborCost,PlannedLaborUnits,PlannedMaterialCost,PlannedNonlaborCost,PlannedNonlaborUnits,PlannedTotalCost,PlannedValueCost,PlannedValueLaborUnits,RemainingExpenseCost,RemainingLaborCost,RemainingLaborUnits,RemainingLateExpenseCost,RemainingLateLaborCost,RemainingLateLaborUnits,RemainingLateMaterialCost,RemainingLateNonlaborCost,RemainingLateNonlaborUnits,RemainingLateTotalCost,RemainingMaterialCost,RemainingNonlaborCost,RemainingNonlaborUnits,RemainingTotalCost"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadProjectSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadProjectSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-ReadProjectSpread"
        },
        "x-internal-id": "spread-projectSpread-get",
        "x-filename-id": "spread-projectspread-get"
      }
    },
    "/spread/cbsExpenseSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadCBSExpenseSpread",
        "description": "Reads the summarized CBS spreads of the specified project resources",
        "operationId": "readCBSResourceSpread",
        "parameters": [
          {
            "name": "ProjectObjectId",
            "in": "query",
            "description": "ProjectObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "BaselineIds",
            "in": "query",
            "description": "BaselineIds's to load",
            "schema": {
              "type": "string"
            },
            "example": "7027,7037"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualUnits,AtCompletionCost,AtCompletionUnits,PlannedCost,PlannedUnits,RemainingCost,RemainingUnits"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadCBSExpenseSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadCBSExpenseSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readCBSResourceSpread"
        },
        "x-internal-id": "spread-cbsExpenseSpread-get",
        "x-filename-id": "spread-cbsexpensespread-get"
      }
    },
    "/spread/cbsResourceSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadCBSResourceSpread",
        "description": "Reads the summarized CBS spreads of the specified Project Resources",
        "operationId": "readCBSResourceSpread_1",
        "parameters": [
          {
            "name": "ProjectObjectId",
            "in": "query",
            "description": "ProjectObjectId's to load",
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "BaselineIds",
            "in": "query",
            "description": "BaselineIds's to load",
            "schema": {
              "type": "string"
            },
            "example": "7027,7037"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "SummaryDateField",
            "in": "query",
            "description": "SummaryDateField",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualUnits,AtCompletionCost,AtCompletionUnits,PlannedCost,PlannedUnits,RemainingCost,RemainingUnits"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadCBSResourceSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadCBSResourceSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readCBSResourceSpread"
        },
        "x-internal-id": "spread-cbsResourceSpread-get",
        "x-filename-id": "spread-cbsresourcespread-get"
      }
    },
    "/spread/epsSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadEPSSpread",
        "description": "Reads the summarized spread data from the specified EPS objects.",
        "operationId": "readEPSSpread",
        "parameters": [
          {
            "name": "EPSObjectId",
            "in": "query",
            "description": "EPSObjectId's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "4835,4845"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualExpenseCost,ActualLaborCost,ActualLaborUnits,ActualMaterialCost,ActualNonlaborCost,ActualNonlaborUnits,ActualTotalCost,AtCompletionExpenseCost,AtCompletionLaborCost,AtCompletionLaborUnits,AtCompletionMaterialCost,AtCompletionNonlaborCost,AtCompletionNonlaborUnits,AtCompletionTotalCost,BaselinePlannedExpenseCost,BaselinePlannedLaborCost,BaselinePlannedLaborUnits,BaselinePlannedMaterialCost,BaselinePlannedNonlaborCost,BaselinePlannedNonlaborUnits,BaselinePlannedTotalCost,EarnedValueCost,EarnedValueLaborUnits,EstimateAtCompletionCost,EstimateAtCompletionLaborUnits,EstimateToCompleteCost,EstimateToCompleteLaborUnits,PeriodActualCost,PeriodActualExpenseCost,PeriodActualLaborCost,PeriodActualLaborUnits,PeriodActualMaterialCost,PeriodActualNonLaborCost,PeriodActualNonLaborUnits,PeriodAtCompletionExpenseCost,PeriodAtCompletionLaborCost,PeriodAtCompletionLaborUnits,PeriodAtCompletionMaterialCost,PeriodAtCompletionNonLaborCost,PeriodAtCompletionNonLaborUnits,PeriodAtCompletionTotalCost,PeriodEarnedValueCost,PeriodEarnedValueLaborUnits,PeriodEstimateAtCompletionCost,PeriodEstimateAtCompletionLaborUnits,PeriodPlannedValueCost,PeriodPlannedValueLaborUnits,PlannedExpenseCost,PlannedLaborCost,PlannedLaborUnits,PlannedMaterialCost,PlannedNonlaborCost,PlannedNonlaborUnits,PlannedTotalCost,PlannedValueCost,PlannedValueLaborUnits,RemainingExpenseCost,RemainingLaborCost,RemainingLaborUnits,RemainingLateExpenseCost,RemainingLateLaborCost,RemainingLateLaborUnits,RemainingLateMaterialCost,RemainingLateNonlaborCost,RemainingLateNonlaborUnits,RemainingLateTotalCost,RemainingMaterialCost,RemainingNonlaborCost,RemainingNonlaborUnits,RemainingTotalCost"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadEPSSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadEPSSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readEPSSpread"
        },
        "x-internal-id": "spread-epsSpread-get",
        "x-filename-id": "spread-epsspread-get"
      }
    },
    "/spread/wbsSpread": {
      "get": {
        "tags": ["Spread"],
        "summary": "ReadWBSSpread",
        "description": "Reads the summarized WBS spread data for the specified WBS spread.",
        "operationId": "readWBSSpread",
        "parameters": [
          {
            "name": "WBSObjectId",
            "in": "query",
            "description": "WBSObjectId's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "12345,89656"
          },
          {
            "name": "PeriodType",
            "in": "query",
            "description": "PeriodType to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "WEEK"
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "StartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "EndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeCumulative",
            "in": "query",
            "description": "IncludeCumulative to load : Supported values - true, false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SpreadField",
            "in": "query",
            "description": "SpreadField's to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ActualCost,ActualExpenseCost,ActualLaborCost,ActualLaborUnits,ActualMaterialCost,ActualNonlaborCost,ActualNonlaborUnits,ActualTotalCost,AtCompletionExpenseCost,AtCompletionLaborCost,AtCompletionLaborUnits,AtCompletionMaterialCost,AtCompletionNonlaborCost,AtCompletionNonlaborUnits,AtCompletionTotalCost,BaselinePlannedExpenseCost,BaselinePlannedLaborCost,BaselinePlannedLaborUnits,BaselinePlannedMaterialCost,BaselinePlannedNonlaborCost,BaselinePlannedNonlaborUnits,BaselinePlannedTotalCost,EarnedValueCost,EarnedValueLaborUnits,EstimateAtCompletionCost,EstimateAtCompletionLaborUnits,EstimateToCompleteCost,EstimateToCompleteLaborUnits,PeriodActualCost,PeriodActualExpenseCost,PeriodActualLaborCost,PeriodActualLaborUnits,PeriodActualMaterialCost,PeriodActualNonLaborCost,PeriodActualNonLaborUnits,PeriodAtCompletionExpenseCost,PeriodAtCompletionLaborCost,PeriodAtCompletionLaborUnits,PeriodAtCompletionMaterialCost,PeriodAtCompletionNonLaborCost,PeriodAtCompletionNonLaborUnits,PeriodAtCompletionTotalCost,PeriodEarnedValueCost,PeriodEarnedValueLaborUnits,PeriodEstimateAtCompletionCost,PeriodEstimateAtCompletionLaborUnits,PeriodPlannedValueCost,PeriodPlannedValueLaborUnits,PlannedExpenseCost,PlannedLaborCost,PlannedLaborUnits,PlannedMaterialCost,PlannedNonlaborCost,PlannedNonlaborUnits,PlannedTotalCost,PlannedValueCost,PlannedValueLaborUnits,RemainingExpenseCost,RemainingLaborCost,RemainingLaborUnits,RemainingLateExpenseCost,RemainingLateLaborCost,RemainingLateLaborUnits,RemainingLateMaterialCost,RemainingLateNonlaborCost,RemainingLateNonlaborUnits,RemainingLateTotalCost,RemainingMaterialCost,RemainingNonlaborCost,RemainingNonlaborUnits,RemainingTotalCost"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<ReadWBSSpreadResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadWBSSpreadResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "job-readWBSSpread"
        },
        "x-internal-id": "spread-wbsSpread-get",
        "x-filename-id": "spread-wbsspread-get"
      }
    },
    "/timesheetAudit/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["TimesheetAudit"],
        "summary": "View TimesheetAudit Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getTimesheetAuditFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An TimesheetAudit field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetAudit-getFieldLength-{fieldName}"
        },
        "x-internal-id": "timesheetAudit-getFieldLength-{fieldName}-get",
        "x-filename-id": "timesheetaudit-getfieldlength-fieldname-get"
      }
    },
    "/timesheetAudit": {
      "get": {
        "tags": ["TimesheetAudit"],
        "summary": "Read TimesheetAudit",
        "description": "Reads TimesheetAudit objects from the database.",
        "operationId": "getTimesheetAudit",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<TimesheetAudit>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetAudit"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetAudit-load"
        },
        "x-internal-id": "timesheetAudit-get",
        "x-filename-id": "timesheetaudit-get"
      }
    },
    "/timesheetAudit/fields": {
      "get": {
        "tags": ["TimesheetAudit"],
        "summary": "View TimesheetAudit fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getTimesheetAuditFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetAudit-getFieldLength-{fieldName}"
        },
        "x-internal-id": "timesheetAudit-fields-get",
        "x-filename-id": "timesheetaudit-fields-get"
      }
    },
    "/timesheetDelegate/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["TimesheetDelegate"],
        "summary": "View TimesheetDelegate Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getTimesheetDelegateFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An TimesheetDelegate field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetDelegate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "timesheetDelegate-getFieldLength-{fieldName}-get",
        "x-filename-id": "timesheetdelegate-getfieldlength-fieldname-get"
      }
    },
    "/timesheetDelegate": {
      "get": {
        "tags": ["TimesheetDelegate"],
        "summary": "Read TimesheetDelegate",
        "description": "Reads TimesheetDelegate objects from the database.",
        "operationId": "getTimesheetDelegate",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<TimesheetDelegate>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetDelegate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetDelegate-load"
        },
        "x-internal-id": "timesheetDelegate-get",
        "x-filename-id": "timesheetdelegate-get"
      }
    },
    "/timesheetDelegate/fields": {
      "get": {
        "tags": ["TimesheetDelegate"],
        "summary": "View TimesheetDelegate fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getTimesheetDelegateFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetDelegate-getFieldLength-{fieldName}"
        },
        "x-internal-id": "timesheetDelegate-fields-get",
        "x-filename-id": "timesheetdelegate-fields-get"
      }
    },
    "/timesheetPeriod/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["TimesheetPeriod"],
        "summary": "View TimesheetPeriod Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getTimesheetPeriodFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A timesheetPeriod field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetPeriod-getFieldLength-{fieldName}"
        },
        "x-internal-id": "timesheetPeriod-getFieldLength-{fieldName}-get",
        "x-filename-id": "timesheetperiod-getfieldlength-fieldname-get"
      }
    },
    "/timesheetPeriod": {
      "get": {
        "tags": ["TimesheetPeriod"],
        "summary": "Read TimesheetPeriods",
        "description": "Reads TimesheetPeriod objects from the database.",
        "operationId": "getTimesheetPeriod",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<TimesheetPeriod>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetPeriod"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetPeriod-load"
        },
        "x-internal-id": "timesheetPeriod-get",
        "x-filename-id": "timesheetperiod-get"
      },
      "put": {
        "tags": ["TimesheetPeriod"],
        "summary": "Update TimesheetPeriods",
        "description": "Send a request to this endpoint to update one or more timesheetPeriod. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateTimesheetPeriod",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of timesheetPeriod objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<TimesheetPeriod>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimesheetPeriod"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetPeriod-update"
        },
        "x-internal-id": "timesheetPeriod-put",
        "x-filename-id": "timesheetperiod-put"
      },
      "post": {
        "tags": ["TimesheetPeriod"],
        "summary": "Create TimesheetPeriods",
        "description": "Send a request to this endpoint to create one or more timesheetPeriod. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createTimesheetPeriod",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of timesheetPeriod objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<TimesheetPeriod>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimesheetPeriod"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetPeriod-create"
        },
        "x-internal-id": "timesheetPeriod-post",
        "x-filename-id": "timesheetperiod-post"
      },
      "delete": {
        "tags": ["TimesheetPeriod"],
        "summary": "Delete TimesheetPeriods",
        "description": "Send a request to this endpoint to delete one or more timesheetPeriod. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteTimesheetPeriod",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of timesheetPeriod.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetPeriod-delete"
        },
        "x-internal-id": "timesheetPeriod-delete",
        "x-filename-id": "timesheetperiod-delete"
      }
    },
    "/timesheetPeriod/fields": {
      "get": {
        "tags": ["TimesheetPeriod"],
        "summary": "View TimesheetPeriod fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getTimesheetPeriodFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheetPeriod-getFieldLength-{fieldName}"
        },
        "x-internal-id": "timesheetPeriod-fields-get",
        "x-filename-id": "timesheetperiod-fields-get"
      }
    },
    "/timesheet/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["Timesheet"],
        "summary": "View Timesheet Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getTimesheetFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An timesheet field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheet-getFieldLength-{fieldName}"
        },
        "x-internal-id": "timesheet-getFieldLength-{fieldName}-get",
        "x-filename-id": "timesheet-getfieldlength-fieldname-get"
      }
    },
    "/timesheet": {
      "get": {
        "tags": ["Timesheet"],
        "summary": "Read Timesheet",
        "description": "Reads timesheet objects from the database.",
        "operationId": "getTimesheet",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<Timesheet>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timesheet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheet-load"
        },
        "x-internal-id": "timesheet-get",
        "x-filename-id": "timesheet-get"
      },
      "put": {
        "tags": ["Timesheet"],
        "summary": "Update Timesheet",
        "description": "Send a request to this endpoint to update one or more timesheet. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateTimesheet",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of timesheet objects.<p><p>Required fields: You must supply both the ResourceObjectId and TimesheetPeriodObjectId fields when you use the Update timesheet operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Timesheet>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Timesheet"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheet-update"
        },
        "x-internal-id": "timesheet-put",
        "x-filename-id": "timesheet-put"
      },
      "post": {
        "tags": ["Timesheet"],
        "summary": "Create Timesheet",
        "description": "Send a request to this endpoint to create one or more timesheet. An application object will be created for each JSON object provided in the request body",
        "operationId": "createTimesheet",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of timesheet objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Timesheet>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Timesheet"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<CreateTimesheetsResponse>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateTimesheetsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheet-create"
        },
        "x-internal-id": "timesheet-post",
        "x-filename-id": "timesheet-post"
      },
      "delete": {
        "tags": ["Timesheet"],
        "summary": "Delete Timesheet",
        "description": "Send a request to this endpoint to delete one or more timesheet. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteTimesheet",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of timesheet objects.<p><p>Required fields: You must supply both the ResourceObjectId and TimesheetPeriodObjectId fields when you use the Delete timesheet operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<Timesheet>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Timesheet"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheet-delete"
        },
        "x-internal-id": "timesheet-delete",
        "x-filename-id": "timesheet-delete"
      }
    },
    "/timesheet/fields": {
      "get": {
        "tags": ["Timesheet"],
        "summary": "View Timesheet fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getTimesheetFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "timesheet-getFieldLength-{fieldName}"
        },
        "x-internal-id": "timesheet-fields-get",
        "x-filename-id": "timesheet-fields-get"
      }
    },
    "/updateBaselineOption/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["UpdateBaselineOption"],
        "summary": "View UpdateBaselineOption Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getUpdateBaselineOptionFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An UpdateBaselineOption field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "updateBaselineOption-getFieldLength-{fieldName}"
        },
        "x-internal-id": "updateBaselineOption-getFieldLength-{fieldName}-get",
        "x-filename-id": "updatebaselineoption-getfieldlength-fieldname-get"
      }
    },
    "/updateBaselineOption": {
      "get": {
        "tags": ["UpdateBaselineOption"],
        "summary": "Read UpdateBaselineOption",
        "description": "Reads UpdateBaselineOption objects from the database.",
        "operationId": "getUpdateBaselineOption",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<UpdateBaselineOption>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateBaselineOption"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "updateBaselineOption-load"
        },
        "x-internal-id": "updateBaselineOption-get",
        "x-filename-id": "updatebaselineoption-get"
      },
      "put": {
        "tags": ["UpdateBaselineOption"],
        "summary": "Update UpdateBaselineOption",
        "description": "Send a request to this endpoint to update one or more UpdateBaselineOption. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateUpdateBaselineOption",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of UpdateBaselineOption objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<UpdateBaselineOption>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateBaselineOption"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "updateBaselineOption-update"
        },
        "x-internal-id": "updateBaselineOption-put",
        "x-filename-id": "updatebaselineoption-put"
      }
    },
    "/updateBaselineOption/fields": {
      "get": {
        "tags": ["UpdateBaselineOption"],
        "summary": "View UpdateBaselineOption fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getUpdateBaselineOptionFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "updateBaselineOption-getFieldLength-{fieldName}"
        },
        "x-internal-id": "updateBaselineOption-fields-get",
        "x-filename-id": "updatebaselineoption-fields-get"
      }
    },
    "/userInterfaceView/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["UserInterfaceView"],
        "summary": "View UserInterfaceView Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getUserInterfaceViewFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "Field to retun length",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userInterfaceView-getFieldLength-{fieldName}"
        },
        "x-internal-id": "userInterfaceView-getFieldLength-{fieldName}-get",
        "x-filename-id": "userinterfaceview-getfieldlength-fieldname-get"
      }
    },
    "/userInterfaceView": {
      "get": {
        "tags": ["UserInterfaceView"],
        "summary": "Read UserInterfaceView",
        "description": "Reads UserInterfaceView objects from the database.",
        "operationId": "getUserInterfaceView",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<UserInterfaceView>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInterfaceView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userInterfaceView-load"
        },
        "x-internal-id": "userInterfaceView-get",
        "x-filename-id": "userinterfaceview-get"
      }
    },
    "/userInterfaceView/fields": {
      "get": {
        "tags": ["UserInterfaceView"],
        "summary": "View UserInterfaceView fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getUserInterfaceViewFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userInterfaceView-getFieldLength-{fieldName}"
        },
        "x-internal-id": "userInterfaceView-fields-get",
        "x-filename-id": "userinterfaceview-fields-get"
      }
    },
    "/userLicense/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["UserLicense"],
        "summary": "View UserLicense Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getUserLicenseFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A UserLicense field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userLicense-getFieldLength-{fieldName}"
        },
        "x-internal-id": "userLicense-getFieldLength-{fieldName}-get",
        "x-filename-id": "userlicense-getfieldlength-fieldname-get"
      }
    },
    "/userLicense": {
      "get": {
        "tags": ["UserLicense"],
        "summary": "Read UserLicense",
        "description": "Reads UserLicense objects from the database.",
        "operationId": "getUserLicense",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<UserLicense>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLicense"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userLicense-load"
        },
        "x-internal-id": "userLicense-get",
        "x-filename-id": "userlicense-get"
      },
      "post": {
        "tags": ["UserLicense"],
        "summary": "Create UserLicense",
        "description": "Send a request to this endpoint to create one or more UserLicense. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createUserLicense",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of UserLicense objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<UserLicense>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserLicense"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "UserLicense Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userLicense-create"
        },
        "x-internal-id": "userLicense-post",
        "x-filename-id": "userlicense-post"
      },
      "delete": {
        "tags": ["UserLicense"],
        "summary": "Delete UserLicense",
        "description": "Send a request to this endpoint to delete one or more UserLicense. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteUserLicense",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of UserLicense.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userLicense-delete"
        },
        "x-internal-id": "userLicense-delete",
        "x-filename-id": "userlicense-delete"
      }
    },
    "/userLicense/fields": {
      "get": {
        "tags": ["UserLicense"],
        "summary": "View UserLicense fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getUserLicenseFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userLicense-getFieldLength-{fieldName}"
        },
        "x-internal-id": "userLicense-fields-get",
        "x-filename-id": "userlicense-fields-get"
      }
    },
    "/userOBS/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["UserOBS"],
        "summary": "View UserOBS Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getUserOBSFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "Field to retun length",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userOBS-getFieldLength-{fieldName}"
        },
        "x-internal-id": "userOBS-getFieldLength-{fieldName}-get",
        "x-filename-id": "userobs-getfieldlength-fieldname-get"
      }
    },
    "/userOBS": {
      "get": {
        "tags": ["UserOBS"],
        "summary": "Read UserOBS",
        "description": "Reads UserOBS objects from the database.",
        "operationId": "getUserOBS",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<UserOBS>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOBS"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userOBS-load"
        },
        "x-internal-id": "userOBS-get",
        "x-filename-id": "userobs-get"
      },
      "put": {
        "tags": ["UserOBS"],
        "summary": "Update UserOBS",
        "description": "Send a request to this endpoint to update one or more UserOBS. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateUserOBS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of UserOBS objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<UserOBS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserOBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userOBS-update"
        },
        "x-internal-id": "userOBS-put",
        "x-filename-id": "userobs-put"
      },
      "post": {
        "tags": ["UserOBS"],
        "summary": "Create UserOBS",
        "description": "Send a request to this endpoint to create one or more UserOBS. An application object will be created for each JSON object provided in the request body",
        "operationId": "createUserOBS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of UserOBS objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<UserOBS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserOBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "UserOBS Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateUserOBSResponse",
                  "$ref": "#/components/schemas/CreateUserOBSResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userOBS-create"
        },
        "x-internal-id": "userOBS-post",
        "x-filename-id": "userobs-post"
      },
      "delete": {
        "tags": ["UserOBS"],
        "summary": "Delete UserOBS",
        "description": "Send a request to this endpoint to delete one or more UserOBS. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteUserOBS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "<p>A list of UserOBS objects.<p><p>Required fields: You must supply both the OBSObjectId and UserObjectId fields when you use the Delete UserOBS operation. All other fields are optional.</p>",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<UserOBS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserOBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userOBS-delete"
        },
        "x-internal-id": "userOBS-delete",
        "x-filename-id": "userobs-delete"
      }
    },
    "/userOBS/fields": {
      "get": {
        "tags": ["UserOBS"],
        "summary": "View UserOBS fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getUserOBSFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "userOBS-getFieldLength-{fieldName}"
        },
        "x-internal-id": "userOBS-fields-get",
        "x-filename-id": "userobs-fields-get"
      }
    },
    "/user/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["User"],
        "summary": "View User Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getUserFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "A user field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "user-getFieldLength-{fieldName}"
        },
        "x-internal-id": "user-getFieldLength-{fieldName}-get",
        "x-filename-id": "user-getfieldlength-fieldname-get"
      }
    },
    "/user": {
      "get": {
        "tags": ["User"],
        "summary": "Read Users",
        "description": "Reads User objects from the database.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<User>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "user-load"
        },
        "x-internal-id": "user-get",
        "x-filename-id": "user-get"
      },
      "put": {
        "tags": ["User"],
        "summary": "Update Users",
        "description": "Send a request to this endpoint to update one or more user. For each JSON object provided in the request body, an application object with a matching ID value will be updated to reflect the JSON contents.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of activity objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<User>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "user-update"
        },
        "x-internal-id": "user-put",
        "x-filename-id": "user-put"
      },
      "post": {
        "tags": ["User"],
        "summary": "Create Users",
        "description": "Send a request to this endpoint to create one or more user. An application object will be created for each JSON object provided in the request body.",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of user objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<User>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "user-create"
        },
        "x-internal-id": "user-post",
        "x-filename-id": "user-post"
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete Users",
        "description": "Send a request to this endpoint to delete one or more user. Objects with ID values that match the values provided in the request body will be deleted.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "user-delete"
        },
        "x-internal-id": "user-delete",
        "x-filename-id": "user-delete"
      }
    },
    "/user/fields": {
      "get": {
        "tags": ["User"],
        "summary": "View User fields",
        "description": "Send a request to this endpoint to load all the fields for a BO.",
        "operationId": "getUserFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "user-getFieldLength-{fieldName}"
        },
        "x-internal-id": "user-fields-get",
        "x-filename-id": "user-fields-get"
      }
    },
    "/wbsMilestone/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["WBSMilestone"],
        "summary": "View Project Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getWBSMilestoneFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An project field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbsMilestone-getFieldLength-{fieldName}"
        },
        "x-internal-id": "wbsMilestone-getFieldLength-{fieldName}-get",
        "x-filename-id": "wbsmilestone-getfieldlength-fieldname-get"
      }
    },
    "/wbsMilestone": {
      "get": {
        "tags": ["WBSMilestone"],
        "summary": "Read WBSMilestone",
        "description": "Reads WBSMilestone objects from the database.",
        "operationId": "getWBSMilestone",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<WBSMilestone>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WBSMilestone"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbsMilestone-load"
        },
        "x-internal-id": "wbsMilestone-get",
        "x-filename-id": "wbsmilestone-get"
      },
      "put": {
        "tags": ["WBSMilestone"],
        "summary": "Update WBSMilestone",
        "description": "Send a request to this endpoint to update one or more WBSMilestone. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateWBSMilestone",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of WBSMilestone objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<WBSMilestone>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WBSMilestone"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbsMilestone-update"
        },
        "x-internal-id": "wbsMilestone-put",
        "x-filename-id": "wbsmilestone-put"
      },
      "post": {
        "tags": ["WBSMilestone"],
        "summary": "Create WBSMilestone",
        "description": "Send a request to this endpoint to create one or more WBSMilestone. An application object will be created for each JSON object provided in the request body",
        "operationId": "createWBSMilestone",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of WBSMilestone objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<WBSMilestone>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WBSMilestone"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbsMilestone-create"
        },
        "x-internal-id": "wbsMilestone-post",
        "x-filename-id": "wbsmilestone-post"
      },
      "delete": {
        "tags": ["WBSMilestone"],
        "summary": "Delete WBSMilestone",
        "description": "Send a request to this endpoint to delete one or more WBSMilestone. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteWBSMilestone",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of WBSMilestone.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbsMilestone-delete"
        },
        "x-internal-id": "wbsMilestone-delete",
        "x-filename-id": "wbsmilestone-delete"
      }
    },
    "/wbsMilestone/fields": {
      "get": {
        "tags": ["WBSMilestone"],
        "summary": "View Project fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getWBSMilestoneFields",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbsMilestone-getFieldLength-{fieldName}"
        },
        "x-internal-id": "wbsMilestone-fields-get",
        "x-filename-id": "wbsmilestone-fields-get"
      }
    },
    "/wbs/getFieldLength/{fieldName}": {
      "get": {
        "tags": ["WBS"],
        "summary": "View WBS Field Length",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getWBSFieldLength",
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "description": "An project field.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbs-getFieldLength-{fieldName}"
        },
        "x-internal-id": "wbs-getFieldLength-{fieldName}-get",
        "x-filename-id": "wbs-getfieldlength-fieldname-get"
      }
    },
    "/wbs": {
      "get": {
        "tags": ["WBS"],
        "summary": "Read WBS",
        "description": "Reads WBS objects from the database.",
        "operationId": "getWBS",
        "parameters": [
          {
            "name": "Filter",
            "in": "query",
            "description": "Supported Filter Operators -  :gt:, :lt:, :eq:, :gte:, :lte:, :and:, :or:",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId IN(1,2) :and: CreateDate:gte:'2021-04-20' :and: LastUpdateDate:lt:'2022-04-20' :and: Name :like: 'abc%'"
          },
          {
            "name": "Fields",
            "in": "query",
            "description": "Fields to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Name,ObjectId"
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "OrderBy condition",
            "schema": {
              "type": "string"
            },
            "example": "ObjectId desc"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "List<WBS>",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WBS"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbs-load"
        },
        "x-internal-id": "wbs-get",
        "x-filename-id": "wbs-get"
      },
      "put": {
        "tags": ["WBS"],
        "summary": "Update WBS",
        "description": "Send a request to this endpoint to update one or more WBS. An application object will be created for each JSON object provided in the request body",
        "operationId": "updateWBS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of WBS objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<WBS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbs-update"
        },
        "x-internal-id": "wbs-put",
        "x-filename-id": "wbs-put"
      },
      "post": {
        "tags": ["WBS"],
        "summary": "Create WBS",
        "description": "Send a request to this endpoint to create one or more WBS. An application object will be created for each JSON object provided in the request body",
        "operationId": "createWBS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of WBS objects.",
          "content": {
            "application/json": {
              "schema": {
                "title": "List<WBS>",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resource Created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbs-create"
        },
        "x-internal-id": "wbs-post",
        "x-filename-id": "wbs-post"
      },
      "delete": {
        "tags": ["WBS"],
        "summary": "Delete WBS",
        "description": "Send a request to this endpoint to delete one or more WBS. An application object will be created for each JSON object provided in the request body",
        "operationId": "deleteWBS",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ObjectId",
            "in": "query",
            "description": "One or more system-generated identifiers of WBS.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1,2,3"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbs-delete"
        },
        "x-internal-id": "wbs-delete",
        "x-filename-id": "wbs-delete"
      }
    },
    "/wbs/fields": {
      "get": {
        "tags": ["WBS"],
        "summary": "View WBS fields",
        "description": "Send a request to this endpoint to load length of variable character fields for a BO.",
        "operationId": "getEPSFields_1",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "405": {
            "description": "Invalid Input."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "extensions": {
          "x-internal-id": "wbs-getFieldLength-{fieldName}"
        },
        "x-internal-id": "wbs-fields-get",
        "x-filename-id": "wbs-fields-get"
      }
    }
  },
  "components": {
    "schemas": {
      "RiskImpactExport": {
        "title": "RiskImpact",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskImpact Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskImpact Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "PROJECT_ID",
                "PROJECT_NAME",
                "PROJECT_OBJECT_ID",
                "RISK_ID",
                "RISK_NAME",
                "RISK_OBJECT_ID",
                "RISK_THRESHOLD_LEVEL_CODE",
                "RISK_THRESHOLD_LEVEL_NAME",
                "RISK_THRESHOLD_LEVEL_OBJECT_ID",
                "RISK_THRESHOLD_NAME",
                "RISK_THRESHOLD_OBJECT_ID"
              ]
            }
          }
        },
        "description": "RiskImpact Entity"
      },
      "CostAccount": {
        "title": "CostAccount",
        "required": ["Id", "Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this account was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this account."
          },
          "Description": {
            "type": "string",
            "description": "The description of the cost account."
          },
          "Id": {
            "type": "string",
            "description": "The short ID assigned to each cost account for identification. Each cost account is uniquely identified by concatenating its own ID together with its parents' IDs."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this account was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this account."
          },
          "Name": {
            "type": "string",
            "description": "The name of the cost account."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ParentObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent cost account of this cost account in the hierarchy.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          }
        },
        "description": "CostAccount Entity"
      },
      "Activity": {
        "title": "Activity",
        "required": ["ProjectObjectId", "WBSObjectId"],
        "type": "object",
        "properties": {
          "AccountingVariance": {
            "type": "number",
            "description": "The difference between the planned value of work scheduled and the actual cost of work performed. Computed as accounting variance = planned value - actual cost . A negative value indicates that actual costs have exceeded the scheduled costs.",
            "format": "double"
          },
          "AccountingVarianceLaborUnits": {
            "type": "number",
            "description": "The difference between the planned value of work scheduled and the actual work performed. Computed as accounting variance labor units = planned value labor units - actual units. A negative value indicates that actual costs have exceeded the scheduled costs.",
            "format": "double"
          },
          "ActivityOwnerUserId": {
            "type": "integer",
            "description": "The unique user ID of the activity owner.",
            "format": "int32"
          },
          "ActualDuration": {
            "type": "number",
            "description": "The total working time from the activity actual start date to the actual finish date (for completed activities), or to the current data date (for in-progress activities). The actual working time is computed using the activity's calendar.",
            "format": "double"
          },
          "ActualExpenseCost": {
            "type": "number",
            "description": "The actual costs for all project expenses associated with the activity.",
            "format": "double"
          },
          "ActualFinishDate": {
            "type": "string",
            "description": "The date on which the activity is actually finished.",
            "format": "date-time"
          },
          "ActualLaborCost": {
            "type": "number",
            "description": "The actual costs for all labor resources assigned to the activity. If no resources are assigned, computed as the activity actual labor units * project default price / time.",
            "format": "double"
          },
          "ActualLaborUnits": {
            "type": "number",
            "description": "The actual units for all labor resources assigned to the activity.",
            "format": "double"
          },
          "ActualMaterialCost": {
            "type": "number",
            "description": "The sum of all regular and overtime costs for material resources.",
            "format": "double"
          },
          "ActualNonLaborCost": {
            "type": "number",
            "description": "The actual costs for all nonlabor resources assigned to the activity. If no resources are assigned, computed as the activity actual nonlabor units * project default price / time.",
            "format": "double"
          },
          "ActualNonLaborUnits": {
            "type": "number",
            "description": "The actual units for all nonlabor resources assigned to the activity.",
            "format": "double"
          },
          "ActualStartDate": {
            "type": "string",
            "description": "The date on which the activity is actually started.",
            "format": "date-time"
          },
          "ActualThisPeriodLaborCost": {
            "type": "number",
            "description": "The actual this period labor cost for all labor resources assigned to the activity.",
            "format": "double"
          },
          "ActualThisPeriodLaborUnits": {
            "type": "number",
            "description": "The actual this period labor units (hours) for all labor resources assigned to the activity.",
            "format": "double"
          },
          "ActualThisPeriodMaterialCost": {
            "type": "number",
            "description": "The sum of all material resource costs for the current period.",
            "format": "double"
          },
          "ActualThisPeriodNonLaborCost": {
            "type": "number",
            "description": "The actual this period nonlabor cost for all nonlabor resources assigned to the activity. If no resources are assigned, computed as the activity actual nonlabor units * project default price / time.",
            "format": "double"
          },
          "ActualThisPeriodNonLaborUnits": {
            "type": "number",
            "description": "The actual this period nonlabor units (hours) for all nonlabor resources assigned to the activity.",
            "format": "double"
          },
          "ActualTotalCost": {
            "type": "number",
            "description": "The actual total cost for the activity, including labor resources, nonlabor resources, and project expenses. Actual total cost = actual labor costs + actual nonlabor costs + actual expense costs.",
            "format": "double"
          },
          "ActualTotalUnits": {
            "type": "number",
            "description": "The sum of Actual Labor Units and Actual Nonlabor Units.",
            "format": "double"
          },
          "AtCompletionDuration": {
            "type": "number",
            "description": "The total working time from the activity's current start date to the current finish date. The current start date is the planned start date until the activity is started, then it is the actual start date. The current finish date is the activity planned finish date while the activity is not started, the remaining finish date while the activity is in progress, and the actual finish date once the activity is completed. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "AtCompletionExpenseCost": {
            "type": "number",
            "description": "The total working time from the activity's current start date to the current finish date. The current start date is the planned start date until the activity is started, then it is the actual start date. The current finish date is the activity planned finish date while the activity is not started, the remaining finish date while the activity is in progress, and the actual finish date once the activity is completed. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "AtCompletionLaborCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining costs for all labor resources assigned to the activity. Computed as actual labor cost + remaining labor cost. Same as the planned labor costs if the activity is not started and the actual labor costs once the activity is completed.",
            "format": "double"
          },
          "AtCompletionLaborUnits": {
            "type": "number",
            "description": "The sum of the actual plus remaining units for all labor resources assigned to the activity. Computed as actual labor units + remaining labor units. Same as the planned labor units if the activity is not started and the actual labor units once the activity is completed.",
            "format": "double"
          },
          "AtCompletionLaborUnitsVariance": {
            "type": "number",
            "description": "The project baseline planned total labor units minus the estimate at completion labor units.",
            "format": "double"
          },
          "AtCompletionMaterialCost": {
            "type": "number",
            "description": "The project baseline planned total labor units minus the estimate at completion labor units.",
            "format": "double"
          },
          "AtCompletionNonLaborCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining costs for all nonlabor resources assigned to the activity. Computed as actual nonlabor cost + remaining nonlabor cost. Same as the planned nonlabor costs if the activity is not started and the actual nonlabor costs once the activity is completed.",
            "format": "double"
          },
          "AtCompletionNonLaborUnits": {
            "type": "number",
            "description": "The sum of the actual plus remaining units for all nonlabor resources assigned to the activity. Computed as actual nonlabor units + remaining nonlabor units. Same as the planned nonlabor units if the activity is not started and the actual nonlabor units once the activity is completed.",
            "format": "double"
          },
          "AtCompletionTotalCost": {
            "type": "number",
            "description": "The total cost at completion for the activity, including labor resources, nonlabor resources, and project expenses. At completion total cost = at completion labor cost + at completion nonlabor cost + at completion expense cost.",
            "format": "double"
          },
          "AtCompletionTotalUnits": {
            "type": "number",
            "description": "The sum of the actual plus remaining units for the resource assignment on the activity.",
            "format": "double"
          },
          "AtCompletionVariance": {
            "type": "number",
            "description": "The difference between the project baseline total cost and the current estimate of total cost. Computed as VAC = BAC - EAC. A negative value indicates an estimated cost overrun. BAC is computed from the current project baseline.",
            "format": "double"
          },
          "AutoComputeActuals": {
            "type": "boolean",
            "description": "The option that determines whether the activity's actual and remaining units, start date, finish date, and percent complete are computed automatically using the planned dates, planned units and the schedule percent complete. If this option is selected, the actual/remaining units and actual dates are automatically updated when project actuals are applied. Use this option to assume that all work for the activity proceeds according to plan."
          },
          "Baseline1Duration": {
            "type": "number",
            "description": "The duration for the activity in the primary baseline. The duration is the total working time from the activity current start date to the current finish date. Same as the actual duration plus the remaining duration. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "Baseline1FinishDate": {
            "type": "string",
            "description": "The current finish date of the activity in the primary baseline. Set to the activity planned finish date while the activity is not started, the remaining finish date while the activity is in progress, and the actual finish date once the activity is completed.",
            "format": "date-time"
          },
          "Baseline1PlannedDuration": {
            "type": "number",
            "description": "The planned duration for the activity in the primary baseline. Planned duration is the total working time from the activity current start date to the current finish date. Same as the actual duration plus the remaining duration. The total working time is computed using the activity's calendar. This field is named Baseline 1 Budgeted Duration in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "Baseline1PlannedExpenseCost": {
            "type": "number",
            "description": "The planned costs for all project expenses associated with the activity. This field is named Baseline 1 Budgeted Expense Cost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "Baseline1PlannedLaborCost": {
            "type": "number",
            "description": "The cost at completion for all labor resources assigned to the activity in the primary baseline. Computed from the primary baseline at completion labor units. If no resources are assigned, computed as the activity BL labor units * project default price / time. This field is named Baseline 1 Budgeted Labor Cost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "Baseline1PlannedLaborUnits": {
            "type": "number",
            "description": "The planned units for all labor resources assigned to the activity. This field is named Baseline 1 Budgeted Labor Units in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "Baseline1PlannedMaterialCost": {
            "type": "number",
            "description": "The Planned Material Cost for a primary baseline activity.",
            "format": "double"
          },
          "Baseline1PlannedNonLaborCost": {
            "type": "number",
            "description": "The planned costs for all nonlabor resources assigned to the activity. If no resources are assigned, computed as the activity planned nonlabor units * project default price / time. This field is named Baseline 1 Budgeted Non Labor Cost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "Baseline1PlannedNonLaborUnits": {
            "type": "number",
            "description": "The planned units for all nonlabor resources assigned to the activity. This field is named Baseline 1 Budgeted Non Labor Units in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "Baseline1PlannedTotalCost": {
            "type": "number",
            "description": "The planned total cost for the activity, including labor resources, nonlabor resources, and project expenses. Planned total cost = planned labor cost + planned nonlabor cost + planned expense cost. This field is named Baseline 1 Budgeted Total Cost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "Baseline1StartDate": {
            "type": "string",
            "description": "The current start date of the activity in the primary baseline. Set to the planned start date until the activity is started, then set to the actual start date.",
            "format": "date-time"
          },
          "BaselineDuration": {
            "type": "number",
            "description": "The duration for the activity in the project baseline. The duration is the total working time from the activity current start date to the current finish date. Same as the actual duration plus the remaining duration. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "BaselineFinishDate": {
            "type": "string",
            "description": "The current finish date of the activity in the project baseline. Set to the activity planned finish date while the activity is not started, the remaining finish date while the activity is in progress, and the actual finish date once the activity is completed.",
            "format": "date-time"
          },
          "BaselinePlannedDuration": {
            "type": "number",
            "description": "The planned duration for the activity in the project baseline. Planned duration is the total working time from the activity current start date to the current finish date. Same as the actual duration plus the remaining duration. The total working time is computed using the activity's calendar. This field is named Baseline Budgeted Duration in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "BaselinePlannedExpenseCost": {
            "type": "number",
            "description": "The planned costs for all project expenses associated with the activity. This field is named Baseline Budgeted Expense Cost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "BaselinePlannedLaborCost": {
            "type": "number",
            "description": "The cost at completion for all labor resources assigned to the activity in the project baseline. Computed from the baseline at completion labor units. If no resources are assigned, computed as the activity BL labor units * project default price / time. This field is named Baseline Budgeted Labor Cost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "BaselinePlannedLaborUnits": {
            "type": "number",
            "description": "The planned units for all labor resources assigned to the activity. This field is named Baseline Budgeted Labor Units in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "BaselinePlannedMaterialCost": {
            "type": "number",
            "description": "The Planned Material Cost for a project baseline activity.",
            "format": "double"
          },
          "BaselinePlannedNonLaborCost": {
            "type": "number",
            "description": "The planned costs for all nonlabor resources assigned to the activity. If no resources are assigned, computed as the activity planned nonlabor units * project default price / time. This field is named Baseline Budgeted Non Labor Cost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "BaselinePlannedNonLaborUnits": {
            "type": "number",
            "description": "The planned units for all nonlabor resources assigned to the activity. This field is named Baseline Budgeted Non Labor Units in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "BaselinePlannedTotalCost": {
            "type": "number",
            "description": "The planned total cost for the activity, including labor resources, nonlabor resources, and project expenses. Planned total cost = planned labor cost + planned nonlabor cost + planned expense cost. This field is named Baseline Budgeted Total Cost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "BaselineStartDate": {
            "type": "string",
            "description": "The current start date of the activity in the project baseline. Set to the planned start date until the activity is started, then set to the actual start date.",
            "format": "date-time"
          },
          "BudgetAtCompletion": {
            "type": "number",
            "description": "The planned total cost through activity completion. Computed as planned labor cost + planned nonlabor cost + planned expense cost, same as the planned total cost.",
            "format": "double"
          },
          "CBSCode": {
            "type": "string",
            "description": "The unique name of the Unifier CBS Code. Assign CBS codes to activities so that you can filter which activities you will send to Unifier."
          },
          "CBSId": {
            "type": "integer",
            "description": "The unique Id of CBS Code.",
            "format": "int32"
          },
          "CBSObjectId": {
            "type": "integer",
            "description": "The identifier of the CoUnifier CBS.",
            "format": "int32"
          },
          "CalendarName": {
            "type": "string",
            "description": "The name of the calendar."
          },
          "CalendarObjectId": {
            "type": "integer",
            "description": "The unique ID of the calendar assigned to the activity. Activity calendars can be assigned from the global calendar pool or the project calendar pool.",
            "format": "int32"
          },
          "CostPercentComplete": {
            "type": "number",
            "description": "The percent complete of costs for all labor resources, nonlabor resources, and expenses for the activity. Computed as actual total cost / at completion total cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "CostPercentOfPlanned": {
            "type": "number",
            "description": "The percent complete of planned costs for all labor resources, nonlabor resources, and expenses for the activity. Computed as actual total cost / BL planned total cost * 100. The value can exceed 100.",
            "format": "double"
          },
          "CostPerformanceIndex": {
            "type": "number",
            "description": "The earned value divided by the actual cost. A value less than 1 indicates that actual cost have exceeded the planned value.",
            "format": "double"
          },
          "CostPerformanceIndexLaborUnits": {
            "type": "number",
            "description": "The ratio of the earned value labor units and the actual work performed. Computed as CPI labor units = earned value labor units / actual labor units .",
            "format": "double"
          },
          "CostVariance": {
            "type": "number",
            "description": "The difference between the earned value and the actual cost of work performed. Computed as CV = earned value - actual costs. A negative value indicates that actual costs have exceeded the value of work performed.",
            "format": "double"
          },
          "CostVarianceIndex": {
            "type": "number",
            "description": "The ratio of the cost variance and the earned value of work performed. Computed as CVI = cost variance / earned value.",
            "format": "double"
          },
          "CostVarianceIndexLaborUnits": {
            "type": "number",
            "description": "The ratio of the cost variance labor units and the earned value of work performed. Computed as CVI labor units = CV labor units / earned value labor units",
            "format": "double"
          },
          "CostVarianceLaborUnits": {
            "type": "number",
            "description": "The difference between the earned value of labor units and the actual cost of labor units. Calculated as CV labor units = earned value planned units - actual units. A negative value indicates that actual costs have exceeded the value of work performed.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this activity was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this activity."
          },
          "DataDate": {
            "type": "string",
            "description": "The current data date for the project. The project status is up to date as of the data date. The data date is modified when project actuals are applied.",
            "format": "date-time"
          },
          "Duration1Variance": {
            "type": "number",
            "description": "The duration between the activity's primary baseline duration and the at complete duration. Computed as primary baseline duration - at completion duration.",
            "format": "double"
          },
          "DurationPercentComplete": {
            "type": "number",
            "description": "The percent complete of the activity duration. Computed as (planned duration - remaining duration) / planned duration * 100. Always in the range 0 to 100. The planned duration is taken from the current plan, not from the baseline.",
            "format": "double"
          },
          "DurationPercentOfPlanned": {
            "type": "number",
            "description": "The activity actual duration percent of planned. Computed as actual duration / BL duration * 100. The value can exceed 100. The BL duration is the activity's at completion duration from the project baseline.",
            "format": "double"
          },
          "DurationType": {
            "type": "string",
            "description": "The duration type of the activity. One of 'Fixed Units/Time', 'Fixed Duration and Units/Time', 'Fixed Units', or 'Fixed Duration and Units'. For 'Fixed Units/Time' activities, the resource units per time are constant when the activity duration or units are changed. This type is used when an activity has fixed resources with fixed productivity output per time period. For 'Fixed Duration and Units/Time' activities, the activity duration is constant as the units or resource units per time are changed. This type is used when the activity is to be completed within a fixed time period regardless of the resources assigned. For 'Fixed Units' activities, the activity units are constant when the duration or resource units per time are changed. This type is used when the total amount of work is fixed, and increasing the resources can decrease the activity duration."
          },
          "DurationVariance": {
            "type": "number",
            "description": "The duration between the activity's project baseline duration and the at complete duration. Computed as project baseline duration - at completion duration.",
            "format": "double"
          },
          "EarlyFinishDate": {
            "type": "string",
            "description": "The earliest possible date the activity can finish. This date is computed by the project scheduler based on network logic, schedule constraints, and resource availability.",
            "format": "date-time"
          },
          "EarlyStartDate": {
            "type": "string",
            "description": "The earliest possible date the remaining work for the activity can begin. This date is computed by the project scheduler based on network logic, schedule constraints, and resource availability.",
            "format": "date-time"
          },
          "EarnedValueCost": {
            "type": "number",
            "description": "The portion of the project baseline total cost of the activity that is actually completed as of the project data date. Computed as earned value = BAC * performance % complete. The method for computing performance % complete depends on the earned-value technique selected for the activity's WBS. BAC is computed from the project baseline.",
            "format": "double"
          },
          "EarnedValueLaborUnits": {
            "type": "number",
            "description": "The portion of the project baseline labor units that is actually completed as of the project data date. Computed as labor units earned value = project baseline labor units * performance % complete. The method for computing performance % complete depends on the earned-value technique selected for the activity's WBS. The BL labor units is taken from the project baseline.",
            "format": "double"
          },
          "EstimateAtCompletionCost": {
            "type": "number",
            "description": "The estimated cost at completion for the activity. Computed as the actual total cost plus the estimate-to-complete cost; EAC = ACWP + ETC. Note that the method for computing ETC depends on the earned-value technique selected for the activity's WBS.",
            "format": "double"
          },
          "EstimateAtCompletionLaborUnits": {
            "type": "number",
            "description": "The estimated labor units at completion of the activity. Calculated as actual labor units + estimate to complete labor units. estimate to complete labor units is calculated based off of the earned value setting on the WBS.",
            "format": "double"
          },
          "EstimateToComplete": {
            "type": "number",
            "description": "The estimated cost to complete the activity. Computed as either the remaining total cost for the activity (remaining total cost), or as PF * (BAC - earned value), depending on the earned-value technique selected for the activity's WBS. BAC is computed from the project baseline.",
            "format": "double"
          },
          "EstimateToCompleteLaborUnits": {
            "type": "number",
            "description": "The estimated quantity to complete the activity. Computed as either the remaining total units for the activity (remaining total units), or as PF * (BL labor units - earned value), depending on the earned-value technique selected for the activity's WBS.",
            "format": "double"
          },
          "EstimatedWeight": {
            "type": "number",
            "format": "double"
          },
          "ExpectedFinishDate": {
            "type": "string",
            "description": "The date the activity is expected to be finished according to the progress made on the activity's work products. The expected finish date is entered manually by people familiar with progress of the activity's work products.",
            "format": "date-time"
          },
          "ExpenseCost1Variance": {
            "type": "number",
            "description": "The difference between primary baseline expense cost and at completion expense cost. Calculated as primary baseline expense cost - at completion expense cost (at completion expense cost = actual expense cost + remaining expense cost).",
            "format": "double"
          },
          "ExpenseCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of costs for all expenses associated with the activity. Computed as actual expense cost / at completion expense cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "ExpenseCostVariance": {
            "type": "number",
            "description": "The difference between project baseline expense cost and at completion expense cost. Calculated as project baseline expense cost - at completion expense cost (at completion expense cost = actual expense cost + remaining expense cost).",
            "format": "double"
          },
          "ExternalEarlyStartDate": {
            "type": "string",
            "description": "The date value that determines the early start date for imported activities with external constraints lost (relations from/to external projects that do not exist in the database). This field is the relationship early finish date (REF) when the lost relationship type is FS or SS. When the relationship type is SF or FF, this field is calculated as REF - RD of the successor.",
            "format": "date-time"
          },
          "ExternalLateFinishDate": {
            "type": "string",
            "description": "The date value that determines the Late Finish Date for imported activities with external constraints lost (from/to external projects that do not exist in the database). This field is the relationship late finish date (RLF) when the lost relationship type is FS or FF. When the relationship type is SS or SF, this field is calculated as RLS + RD of the predecessor.",
            "format": "date-time"
          },
          "Feedback": {
            "type": "string",
            "description": "The feedback from the resource."
          },
          "FinancialPeriodTmplId": {
            "type": "integer",
            "format": "int32"
          },
          "FinishDate": {
            "type": "string",
            "description": "The current finish date of the activity. Set to the activity planned finish date while the activity is not started, the remaining finish date while the activity is in progress, and the actual finish date once the activity is completed.",
            "format": "date-time"
          },
          "FinishDate1Variance": {
            "type": "number",
            "description": "The duration between the finish date in the current project and the primary baseline finish date. Calculated as finish date - primary baseline finish date.",
            "format": "double"
          },
          "FinishDateVariance": {
            "type": "number",
            "description": "The duration between the finish date in the current project and the project baseline finish date. Calculated as finish date - project baseline finish date.",
            "format": "double"
          },
          "FloatPath": {
            "type": "integer",
            "description": "The integer representing the critical path this activity is on. The value 1 is the most critical path, value 2 is the second most critical path, etc.",
            "format": "int32"
          },
          "FloatPathOrder": {
            "type": "integer",
            "description": "The integer representing the order in which this object was found on one of the critical paths.",
            "format": "int32"
          },
          "FreeFloat": {
            "type": "number",
            "description": "The amount of time the activity can be delayed before delaying the start date of any successor activity.",
            "format": "double"
          },
          "GUID": {
            "type": "string",
            "description": "The globally unique ID generated by the system."
          },
          "HasFutureBucketData": {
            "type": "boolean",
            "description": "The flag that indicates whether a resource assignment on the activity has future bucket data."
          },
          "Id": {
            "type": "string",
            "description": "The short ID that uniquely identifies the activity within the project."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsCritical": {
            "type": "boolean",
            "description": "The flag that indicates whether the activity is critical. An activity is critical when its total Float is below the critical duration specified for the project. Delaying critical activities will delay the finish date of the project."
          },
          "IsLongestPath": {
            "type": "boolean",
            "description": "The flag that indicates whether an activity is on the longest path. Default = 'N'"
          },
          "IsNewFeedback": {
            "type": "boolean",
            "description": "The flag that indicates that a resource has sent feedback notes about this activity which have not been reviewed yet."
          },
          "IsStarred": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object has been assigned a star in P6 Team Member"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "IsWorkPackage": {
            "type": "boolean",
            "description": "Indicates if this WBS is a workpackage in Prime or not."
          },
          "LaborCost1Variance": {
            "type": "number",
            "description": "The difference between primary baseline labor cost and at completion labor cost. Calculated as BL labor cost - at completion labor cost",
            "format": "double"
          },
          "LaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of costs for all labor resources assigned to the activity. Computed as actual labor cost / at completion labor cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "LaborCostVariance": {
            "type": "number",
            "description": "The difference between project baseline labor cost and at completion labor cost. Calculated as BL labor cost - at completion labor cost",
            "format": "double"
          },
          "LaborUnits1Variance": {
            "type": "number",
            "description": "The difference between primary baseline labor units and at completion labor units. Calculated as BL labor units - at completion labor units.",
            "format": "double"
          },
          "LaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all labor resources for the activity. Computed as actual labor units / at completion labor units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "LaborUnitsVariance": {
            "type": "number",
            "description": "The difference between project baseline labor units and at completion labor units. Calculated as BL labor units - at completion labor units.",
            "format": "double"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this activity was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this activity."
          },
          "LateFinishDate": {
            "type": "string",
            "description": "The latest possible date the activity must finish without delaying the project finish date. This date is computed by the project scheduler based on network logic, schedule constraints, and resource availability.",
            "format": "date-time"
          },
          "LateStartDate": {
            "type": "string",
            "description": "The latest possible date the remaining work for the activity must begin without delaying the project finish date. This date is computed by the project scheduler based on network logic, schedule constraints, and resource availability.",
            "format": "date-time"
          },
          "LevelingPriority": {
            "type": "string",
            "description": "The activity priority used to prioritize activities in a project when performing resource leveling. Valid values are 'Top', 'High', 'Normal', 'Low', and 'Lowest'."
          },
          "LocationName": {
            "type": "string",
            "description": "The name of the location assigned to the activity."
          },
          "LocationObjectId": {
            "type": "integer",
            "description": "The unique ID of the location assigned to the activity.",
            "format": "int32"
          },
          "MaterialCost1Variance": {
            "type": "number",
            "description": "The primary Baseline Planned Material Cost minus the At Completion Material Cost.",
            "format": "double"
          },
          "MaterialCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of costs for all material resources assigned to the activity. Computed as actual nonlabor cost / at completion nonlabor cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "MaterialCostVariance": {
            "type": "number",
            "description": "The project BaselinePlannedMaterialCost minus the AtCompletionMaterialCost.",
            "format": "double"
          },
          "MaximumDuration": {
            "type": "number",
            "description": "The maximum duration of the activity.",
            "format": "double"
          },
          "MinimumDuration": {
            "type": "number",
            "description": "The minimum duration of the activity.",
            "format": "double"
          },
          "MostLikelyDuration": {
            "type": "number",
            "description": "The most likely duration of the activity.",
            "format": "double"
          },
          "Name": {
            "type": "string",
            "description": "The name of the activity. The activity name does not have to be unique."
          },
          "NonLaborCost1Variance": {
            "type": "number",
            "description": "The difference between the primary baseline nonlabor cost and at completion nonlabor cost. Calculated as BL nonlabor cost - at completion nonlabor cost.",
            "format": "double"
          },
          "NonLaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of costs for all nonlabor resources assigned to the activity. Computed as actual nonlabor cost / at completion nonlabor cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "NonLaborCostVariance": {
            "type": "number",
            "description": "The difference between the project baseline labor cost and at completion labor cost. Calculated as BL nonlabor cost - at completion nonlabor cost.",
            "format": "double"
          },
          "NonLaborUnits1Variance": {
            "type": "number",
            "description": "The difference between the primary baseline nonlabor units and at completion nonlabor units. Calculated as BL nonlabor units - at completion nonlabor units.",
            "format": "double"
          },
          "NonLaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all nonlabor resources for the activity. Computed as actual nonlabor units / at completion nonlabor units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "NonLaborUnitsVariance": {
            "type": "number",
            "description": "The difference between the project baseline labor units and at completion labor units. Calculated as BL nonlabor units - at completion nonlabor units.",
            "format": "double"
          },
          "NotesToResources": {
            "type": "string",
            "description": "The notes from the project manager to the timesheet resources."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OwnerIDArray": {
            "type": "string",
            "description": "A comma separated list of activity owner IDs."
          },
          "OwnerNamesArray": {
            "type": "string",
            "description": "A comma separated list of activity owner names."
          },
          "PercentComplete": {
            "type": "number",
            "description": "The activity percent complete. This value is tied to the activity duration % complete, units % complete, or physical % complete, depending on the setting for the activity's percent complete type, which is one of Duration, Units, or Physical. Always in the range 0 to 100.",
            "format": "double"
          },
          "PercentCompleteType": {
            "type": "string",
            "description": "The activity percent complete type: 'Physical', 'Duration', or 'Units'."
          },
          "PerformancePercentComplete": {
            "type": "number",
            "description": "The activity performance percent complete. The performance percent complete is used to compute earned value and may be based on the activity % complete, on the 0/100 rule, on the 50/50 rule, etc., depending on the technique for computing earned-value percent complete for the activity's WBS. The performance % complete specifies what percentage of the activity's planned worth has been earned so far.",
            "format": "double"
          },
          "PerformancePercentCompleteByLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PhysicalPercentComplete": {
            "type": "number",
            "description": "The physical percent complete, which can either be user entered or calculated from the activity's weighted steps.",
            "format": "double"
          },
          "PlannedDuration": {
            "type": "number",
            "description": "The total working time from the activity planned start date to the planned finish date. The planned working time is computed using the activity's calendar. This field is named OriginalDuration in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedExpenseCost": {
            "type": "number",
            "description": "The planned costs for all project expenses associated with the activity. This field is named BudgetedExpenseCost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedFinishDate": {
            "type": "string",
            "description": "The date the activity is scheduled to finish. This date is computed by the project scheduler but can be updated manually by the project manager. This date is not changed by the project scheduler after the activity has been started.",
            "format": "date-time"
          },
          "PlannedLaborCost": {
            "type": "number",
            "description": "The planned costs for all labor resources assigned to the activity. If no resources are assigned, computed as the activity planned labor units * project default price / time. This field is named BudgetedLaborCost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedLaborUnits": {
            "type": "number",
            "description": "The planned units for all labor resources assigned to the activity. This field is named BudgetedLaborUnits in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedMaterialCost": {
            "type": "number",
            "description": "The sum of all material resource costs.",
            "format": "double"
          },
          "PlannedNonLaborCost": {
            "type": "number",
            "description": "The planned costs for all nonlabor resources assigned to the activity. If no resources are assigned, computed as the activity planned nonlabor units * project default price / time. This field is named BudgetedNonLaborCost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedNonLaborUnits": {
            "type": "number",
            "description": "The planned units for all nonlabor resources assigned to the activity. This field is named BudgetedNonLaborUnits in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedStartDate": {
            "type": "string",
            "description": "The date the activity is scheduled to begin. This date is computed by the project scheduler but can be updated manually by the project manager. This date is not changed by the project scheduler after the activity has been started.",
            "format": "date-time"
          },
          "PlannedTotalCost": {
            "type": "number",
            "description": "The planned total cost for the activity, including labor resources, nonlabor resources, and project expenses. Planned total cost = planned labor cost + planned nonlabor cost + planned material cost + planned expense cost. This field is named BudgetedTotalCost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedTotalUnits": {
            "type": "number",
            "description": "The sum of Planned Labor Units and Planned Nonlabor Units. This field is named BudgetedTotalUnits in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedValueCost": {
            "type": "number",
            "description": "The portion of the project baseline total cost of the activity that is scheduled to be completed as of the project data date. Computed as BAC * schedule % complete. Also known as the work scheduled to be performed for the activity. The schedule % complete specifies how much of the activity's project baseline duration has been completed so far. BAC is computed from the project baseline.",
            "format": "double"
          },
          "PlannedValueLaborUnits": {
            "type": "number",
            "description": "The portion of the project baseline labor units that is scheduled to be completed as of the project data date. Computed as BL labor units * schedule % complete. The schedule % complete specifies how much of the activity's project baseline duration has been completed so far. BL labor units is taken from the project baseline.",
            "format": "double"
          },
          "PostRespCriticalityIndex": {
            "type": "number",
            "format": "double"
          },
          "PostResponsePessimisticFinish": {
            "type": "string",
            "description": "The Post Response Pessimistic Finish date calculated by Oracle Prime during quantitative risk analysis.",
            "format": "date-time"
          },
          "PostResponsePessimisticStart": {
            "type": "string",
            "description": "The Post Response Pessimistic Start date calculated by Oracle Prime during quantitative risk analysis.",
            "format": "date-time"
          },
          "PreRespCriticalityIndex": {
            "type": "number",
            "format": "double"
          },
          "PreResponsePessimisticFinish": {
            "type": "string",
            "description": "The Pre Response Pessimistic Finish date calculated by Oracle Prime during quantitative risk analysis.",
            "format": "date-time"
          },
          "PreResponsePessimisticStart": {
            "type": "string",
            "description": "The Pre Response Pessimistic Start date calculated by Oracle Prime during quantitative risk analysis.",
            "format": "date-time"
          },
          "PrimaryConstraintDate": {
            "type": "string",
            "description": "The constraint date for the activity, if the activity has a constraint. The activity's constraint type determines whether this is a start date or finish date. Activity constraints are used by the project scheduler.",
            "format": "date-time"
          },
          "PrimaryConstraintType": {
            "type": "string",
            "description": "The type of constraint applied to the activity start or finish date. Activity constraints are used by the project scheduler. Start date constraints are 'Start On', 'Start On or Before', and 'Start On or After'. Finish date constraints are 'Finish On', 'Finish On or Before', and 'Finish On or After'. Another type of constraint, 'As Late As Possible', schedules the activity as late as possible based on the available free float."
          },
          "PrimaryResourceId": {
            "type": "string",
            "description": "The name of the resource."
          },
          "PrimaryResourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "PrimaryResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the primary resource for the activity. The primary resource is responsible for the overall work on the activity and updates the activity status using Timesheets.",
            "format": "int32"
          },
          "ProjectFlag": {
            "type": "string",
            "description": "Indicates if this WBS node is a Project/EPS node."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code of the associated project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ProjectProjectFlag": {
            "type": "string",
            "description": "Indicates if this Project/EPS nose is a Project or EPS."
          },
          "RemainingDuration": {
            "type": "number",
            "description": "The remaining duration of the activity. Remaining duration is the total working time from the activity remaining start date to the remaining finish date. The remaining working time is computed using the activity's calendar. Before the activity is started, the remaining duration is the same as the planned duration. After the activity is completed the remaining duration is zero.",
            "format": "double"
          },
          "RemainingEarlyFinishDate": {
            "type": "string",
            "description": "The remaining late end date, which is calculated by the scheduler.",
            "format": "date-time"
          },
          "RemainingEarlyStartDate": {
            "type": "string",
            "description": "The date the remaining work for the activity is scheduled to begin. This date is computed by the project scheduler but can be updated manually by the project manager. Before the activity is started, the remaining start date is the same as the planned start date. This is the start date that Timesheets users follow.",
            "format": "date-time"
          },
          "RemainingExpenseCost": {
            "type": "number",
            "description": "The remaining costs for all project expenses associated with the activity.",
            "format": "double"
          },
          "RemainingFloat": {
            "type": "number",
            "description": "The amount of time remaining by which the activity can be delayed before delaying the project finish date. Computed as late finish - remaining finish. If the remaining finish is the same as the early finish (in general, when the activity is not started), then the remaining float is the same as the total float.",
            "format": "double"
          },
          "RemainingLaborCost": {
            "type": "number",
            "description": "The remaining costs for all labor resources assigned to the activity. If no resources are assigned, computed as the activity remaining labor units * project default price / time.",
            "format": "double"
          },
          "RemainingLaborUnits": {
            "type": "number",
            "description": "The remaining units for all labor resources assigned to the activity. The remaining units reflects the work remaining to be done for the activity. Before the activity is started, the remaining units are the same as the planned units. After the activity is completed, the remaining units are zero.",
            "format": "double"
          },
          "RemainingLateFinishDate": {
            "type": "string",
            "description": "The remaining late finish date calculated by the scheduler.",
            "format": "date-time"
          },
          "RemainingLateStartDate": {
            "type": "string",
            "description": "The remaining late start date calculated by the scheduler.",
            "format": "date-time"
          },
          "RemainingMaterialCost": {
            "type": "number",
            "description": "The sum of all material resource remaining costs.",
            "format": "double"
          },
          "RemainingNonLaborCost": {
            "type": "number",
            "description": "The remaining costs for all nonlabor resources assigned to the activity. If no resources are assigned, computed as the activity remaining nonlabor units * project default price / time.",
            "format": "double"
          },
          "RemainingNonLaborUnits": {
            "type": "number",
            "description": "The remaining units for all nonlabor resources assigned to the activity. The remaining units reflects the work remaining to be done for the activity. Before the activity is started, the remaining units are the same as the planned units. After the activity is completed, the remaining units are zero.",
            "format": "double"
          },
          "RemainingTotalCost": {
            "type": "number",
            "description": "The remaining total cost for the activity, including labor resources, nonlabor resources, and project expenses. Remaining total cost = remaining labor costs + remaining nonlabor costs + remaining expense costs.",
            "format": "double"
          },
          "RemainingTotalUnits": {
            "type": "number",
            "description": "The sum of Remaining Labor Units and Remaining Nonlabor Units.",
            "format": "double"
          },
          "ResumeDate": {
            "type": "string",
            "description": "The date when a suspended task or resource dependent activity should be resumed. The resume date must be later than the suspend date and earlier than the actual finish date. The Suspend/Resume period behaves like a nonworktime on the activity calendar or resource calendar for task and resource dependent activities.",
            "format": "date-time"
          },
          "ReviewFinishDate": {
            "type": "string",
            "description": "The finish date of the activity as proposed by the primary resource using Timesheets, while the activity is in \"For Review\" state. If the project manager approves the activity completion, the review finish is copied to the actual finish.",
            "format": "date-time"
          },
          "ReviewRequired": {
            "type": "boolean",
            "description": "The indicator that determines whether the activity status updates made in Team Member interfaces must be approved before committing changes."
          },
          "ReviewStatus": {
            "type": "string",
            "description": "The activity review status. Valid values are 'OK', 'For Review', and 'Rejected'. Primary resources set the status to 'For Review' when they believe the activity is completed but are not allowed to mark activities as completed."
          },
          "SchedulePercentComplete": {
            "type": "number",
            "description": "The activity schedule percent complete, which specifies how much of the activity's project baseline duration has been completed so far. Computed based on where the current data date falls relative to the activity's project baseline start and finish dates. If the data date is earlier than the BL start, the schedule % complete is 0. If the data date is later than the BL finish, the schedule % complete is 100. The schedule % complete indicates how much of the activity duration should be currently completed, relative to the selected project baseline.",
            "format": "double"
          },
          "SchedulePerformanceIndex": {
            "type": "number",
            "description": "The ratio of the earned value of work performed and the work scheduled to be performed. Computed as SPI = earned value/ planned value. A value less than 1 indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "SchedulePerformanceIndexLaborUnits": {
            "type": "number",
            "description": "The ratio of the earned value of labor units and the planned value of labor units. Computed as SPI labor units = earned value labor units / planned value labor units.",
            "format": "double"
          },
          "ScheduleVariance": {
            "type": "number",
            "description": "The difference between the earned value of work performed and the work scheduled to be performed. Computed as SV = earned value - planned value. A negative value indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "ScheduleVarianceIndex": {
            "type": "number",
            "description": "The ratio of the schedule variance and the work scheduled to be performed. Computed as SVI = SV / planned value.",
            "format": "double"
          },
          "ScheduleVarianceIndexLaborUnits": {
            "type": "number",
            "description": "The ratio of the schedule variance and the work scheduled to be performed. Computed as SVI labor units = SV labor units / planned value labor units.",
            "format": "double"
          },
          "ScheduleVarianceLaborUnits": {
            "type": "number",
            "description": "The difference between the earned value of work performed and the work scheduled to be performed. Computed as SV labor units = earned value labor units - planned value labor units.",
            "format": "double"
          },
          "ScopePercentComplete": {
            "type": "number",
            "format": "double"
          },
          "SecondaryConstraintDate": {
            "type": "string",
            "description": "The date to be used for the cstr_type2 assignment, if the activity has a cstr_type2 value. The activity's constraint type determines whether this is a start date or finish date. Activity constraints are used by the project scheduler.",
            "format": "date-time"
          },
          "SecondaryConstraintType": {
            "type": "string",
            "description": "The additional constraint to be used by the scheduler. If more than one constraint is assigned, this value should be restricted to one of the following: \"Start On or Before\", \"Start On or After\", \"Finish On or Before\", or \"Finish On or After\"."
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the activity. Set to the remaining start date until the activity is started, then set to the actual start date.",
            "format": "date-time"
          },
          "StartDate1Variance": {
            "type": "number",
            "description": "The duration between the start date in the current project and the primary baseline start date. Calculated as start date - primary baseline start date.",
            "format": "double"
          },
          "StartDateVariance": {
            "type": "number",
            "description": "The duration between the start date in the current project and the project baseline start date. Calculated as start date - project baseline start date.",
            "format": "double"
          },
          "Status": {
            "type": "string",
            "description": "The current status of the activity, either 'Not Started', 'In Progress', or 'Completed'."
          },
          "StatusCode": {
            "type": "string",
            "description": "The project status, either 'Planned', 'Active', 'Inactive', 'What-If', 'Requested', or 'Template'."
          },
          "SuspendDate": {
            "type": "string",
            "description": "The start date when the progress of a task or resource dependent activity is delayed from. The suspend date must be later than the actual start date, which the activity must have. The progress of the activity can be resumed by setting the resume date. The Suspend/Resume period behaves like a nonworktime on the activity calendar or resource calendar for task and resource dependent activities.",
            "format": "date-time"
          },
          "TaskStatusCompletion": {
            "type": "string"
          },
          "TaskStatusDates": {
            "type": "string"
          },
          "TaskStatusIndicator": {
            "type": "boolean"
          },
          "ToCompletePerformanceIndex": {
            "type": "number",
            "description": "The TCPI, which is calculated as (budget at completion - earned value) / (estimate at completion - ACWP).",
            "format": "double"
          },
          "TotalCost1Variance": {
            "type": "number",
            "description": "The difference between the primary baseline total cost and the at completion total cost. Calculated as BL total cost - at completion total cost.",
            "format": "double"
          },
          "TotalCostVariance": {
            "type": "number",
            "description": "The difference between the project baseline total cost and the at completion total cost. Calculated as BL total cost - at completion total cost.",
            "format": "double"
          },
          "TotalFloat": {
            "type": "number",
            "description": "The amount of time the activity can be delayed before delaying the project finish date. Total float can be computed as late start - early start or as late finish - early finish; this option can be set when running the project scheduler.",
            "format": "double"
          },
          "Type": {
            "type": "string",
            "description": "The type of activity, either 'Task Dependent', 'Resource Dependent', 'Level of Effort', 'Start Milestone', 'Finish Milestone', or 'WBS Summary'. A 'Task Dependent' activity is scheduled using the activity's calendar rather than the calendars of the assigned resources. A 'Resource Dependent' activity is scheduled using the calendars of the assigned resources. This type is used when several resources are assigned to the activity, but they may work separately. A 'Start Milestone' or 'Finish Milestone' is a zero-duration activity without resources, marking a significant project event. A 'Level of Effort' activity has a duration that is determined by its dependent activities. Administration-type activities are typically 'Level of Effort'. A 'WBS Summary' comprises a group of activities that share a common WBS level. For example, all activities whose WBS codes start with A (A.1, A.1.1, A.1.1.2, A.2, A.3 and so forth) can be part of one WBS activity whose WBS code is A."
          },
          "UnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all labor and nonlabor resources assigned to the activity. Computed as actual units / at completion units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "UnreadCommentCount": {
            "type": "integer",
            "description": "The number of Team Member Discussion comments associated with the Activity which have not yet been read.",
            "format": "int32"
          },
          "WBSCode": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes."
          },
          "WBSName": {
            "type": "string",
            "description": "The name of the WBS element."
          },
          "WBSNamePath": {
            "type": "string"
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS for the activity.",
            "format": "int32"
          },
          "WBSPath": {
            "type": "string",
            "description": "The WBS hierarchy of the activity."
          },
          "WorkPackageId": {
            "type": "string"
          },
          "WorkPackageName": {
            "type": "string"
          }
        },
        "description": "Activity Entity"
      },
      "ReadCBSResourceSpreadResponse": {
        "title": "ReadCBSResourceSpreadResponse",
        "type": "object",
        "properties": {
          "cbsresourceSpread": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CBSResourceSpread"
            }
          },
          "CBSResourceSpread": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CBSResourceSpread"
            }
          }
        },
        "description": "ReadCBSResourceSpreadResponse Entity"
      },
      "Document": {
        "title": "Document",
        "required": ["ProjectObjectId", "Title"],
        "type": "object",
        "properties": {
          "ActivityObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "Author": {
            "type": "string",
            "description": "The person who created the work product or document."
          },
          "ContentRepositoryDocumentInternalId": {
            "type": "string",
            "description": "The internal ID of the content repository document."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this document was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this document."
          },
          "Deliverable": {
            "type": "boolean",
            "description": "The flag that indicates that the work product or document is a project deliverable."
          },
          "Description": {
            "type": "string",
            "description": "The narrative description of the work product or document."
          },
          "DocumentCategoryName": {
            "type": "string",
            "description": "The name of the associated document category."
          },
          "DocumentCategoryObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated document category.",
            "format": "int32"
          },
          "DocumentStatusCodeName": {
            "type": "string",
            "description": "The name of the associated document status code."
          },
          "DocumentStatusCodeObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated document status code.",
            "format": "int32"
          },
          "DocumentType": {
            "type": "string",
            "description": "The type of document: 'Non-Collaboration' or 'Collaboration'."
          },
          "GUID": {
            "type": "string",
            "description": "The globally unique ID generated by the system."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this document was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this document."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ParentObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent document of this document in the hierarchy.",
            "format": "int32"
          },
          "PrivateLocation": {
            "type": "string",
            "description": "The work product or document's private file location."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "PublicLocation": {
            "type": "string",
            "description": "The work product or document's publicly-accessible file location."
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The work product or document's reference or catalog number."
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the associated resource."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the associated resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "RevisionDate": {
            "type": "string",
            "description": "The date of the work product or document's last update.",
            "format": "date-time"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "description": "The title or name of a project work product or document."
          },
          "Version": {
            "type": "string",
            "description": "The work product or document's version number."
          }
        },
        "description": "Document Entity"
      },
      "RoleRateExport": {
        "title": "RoleRate",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RoleRate Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RoleRate Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "EFFECTIVE_DATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "MAX_UNITS_PER_TIME",
                "OBJECT_ID",
                "PRICE_PER_UNIT",
                "PRICE_PER_UNIT_2",
                "PRICE_PER_UNIT_3",
                "PRICE_PER_UNIT_4",
                "PRICE_PER_UNIT_5",
                "ROLE_ID",
                "ROLE_NAME",
                "ROLE_OBJECT_ID"
              ]
            }
          }
        },
        "description": "RoleRate Entity"
      },
      "ReadResourceAssignmentSpreadResponse": {
        "title": "ReadResourceAssignmentSpreadResponse",
        "type": "object",
        "properties": {
          "ResourceAssignmentObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceAssignmentSpreadPeriod"
            }
          }
        },
        "description": "ReadResourceAssignmentSpreadResponse Entity"
      },
      "ShiftExport": {
        "title": "Shift",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for Shift Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for Shift Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID"
              ]
            }
          }
        },
        "description": "Shift Entity"
      },
      "Currency": {
        "title": "Currency",
        "required": ["Id", "Name", "Symbol"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this currency was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this currency."
          },
          "DecimalPlaces": {
            "type": "integer",
            "description": "The number of decimal places displayed.",
            "format": "int32"
          },
          "DecimalSymbol": {
            "type": "string",
            "description": "The decimal symbol displayed."
          },
          "DigitGroupingSymbol": {
            "type": "string",
            "description": "The symbol used to group the numbers."
          },
          "ExchangeRate": {
            "type": "number",
            "description": "The exchange rate against the base currency.",
            "format": "double"
          },
          "Id": {
            "type": "string",
            "description": "The unique currency abbreviation for each currency."
          },
          "IsBaseCurrency": {
            "type": "boolean",
            "description": "The currency used to store cost in the Project Management database. The exchange rate for the base currency is always 1.0. The base currency ID, name, and symbol default to U.S. dollars and can be edited but never deleted."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this currency was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this currency."
          },
          "Name": {
            "type": "string",
            "description": "The name of the currency."
          },
          "NegativeSymbol": {
            "type": "string",
            "description": "The symbol used to display a negative currency."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "PositiveSymbol": {
            "type": "string",
            "description": "The symbol used to display a positive currency."
          },
          "Symbol": {
            "type": "string",
            "description": "The currency symbol displayed."
          }
        },
        "description": "Currency Entity"
      },
      "ResourceRequestCriterion": {
        "type": "object",
        "properties": {
          "CriterionType": {
            "type": "string"
          },
          "Proficiency": {
            "type": "string"
          },
          "ValueObjectId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RecalculateAssignmentCosts": {
        "title": "RecalculateAssignmentCosts",
        "type": "object",
        "properties": {
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "SynchronizeOvertimeFactor": {
            "type": "boolean",
            "description": "Flag that indicates that the overtime factor for the resource should be included when recalculating cost"
          },
          "Timeout": {
            "type": "integer",
            "description": "The amount of time in seconds that the server side will wait for the job service to complete before it returns with the current job status. The Timeout parameter is optional. When this operation is used without specifying a Timeout parameter or with a Timeout of 0, the server immediately returns without waiting for the job service to complete.",
            "format": "int32"
          }
        },
        "description": "RecalculateAssignmentCosts Entity"
      },
      "ResourceAssignmentSpread": {
        "type": "object",
        "properties": {
          "ResourceAssignmentObjectId": {
            "type": "string",
            "description": "The unique ID of the associated resource assignment."
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Period"
            }
          }
        },
        "description": "The live resource assignment spread data."
      },
      "CreateTimesheetsResponse": {
        "title": "CreateTimesheetsResponse",
        "type": "object",
        "properties": {
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "TimesheetPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the timesheet period.",
            "format": "int32"
          }
        },
        "description": "CreateTimesheetsResponse Entity"
      },
      "RiskThresholdLevel": {
        "title": "RiskThresholdLevel",
        "required": ["Code", "RiskThresholdObjectId"],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string",
            "description": "The 10 character code for the threshold level. Must be unique."
          },
          "Color": {
            "type": "string",
            "description": "The Hex representation for the color e.g. 0xFFFFFF."
          },
          "CostRange": {
            "type": "number",
            "description": "The cost range of the threshold level.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this threshold level was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the threshold level."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this threshold level was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the threshold level."
          },
          "Level": {
            "type": "integer",
            "description": "The valid values are between 0 and 9. Defines a level for the Risk Threshold.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The 40 character name for the threshold level. Does not need to be unique."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProbabilityRange": {
            "type": "number",
            "description": "The probability range of the threshold level.",
            "format": "double"
          },
          "Range": {
            "type": "string",
            "description": "The user defined range."
          },
          "RiskThresholdName": {
            "type": "string",
            "description": "The name of the associated risk score type."
          },
          "RiskThresholdObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Threshold.",
            "format": "int32"
          },
          "ScheduleRange": {
            "type": "number",
            "description": "The schedule range of the threshold level.",
            "format": "double"
          },
          "ThresholdType": {
            "type": "string",
            "description": "The type of Risk Threshold. Valid types are 'Probability', 'Tolerance', 'Schedule', 'Cost', 'Relative Schedule', 'Relative Cost' and 'User Defined'."
          },
          "ToleranceRange": {
            "type": "integer",
            "description": "The tolerance range of the threshold level.",
            "format": "int32"
          }
        },
        "description": "RiskThresholdLevel Entity"
      },
      "RiskCategory": {
        "title": "RiskCategory",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this risk category was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this risk category."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk category was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this risk category."
          },
          "Name": {
            "type": "string",
            "description": "The name of the risk category."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ParentObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent risk type of this risk type in the hierarchy.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          }
        },
        "description": "RiskCategory Entity"
      },
      "GlobalProfile": {
        "title": "GlobalProfile",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this Global Profile was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this Global Profile."
          },
          "IsDefault": {
            "type": "boolean",
            "description": "The flag that indicates this security profile is assigned to new users by default. When a GlobalProfile object is deleted from the database, all users assigned to that profile are reassigned to the default profile. You cannot not delete the default profile."
          },
          "IsSuperUser": {
            "type": "boolean",
            "description": "The flag that identifies the superuser profile. Superuser profiles are automatically granted all privileges."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this Global Profile was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this Global Profile."
          },
          "Name": {
            "type": "string",
            "description": "The privileges that are turned on."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "Privilege": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Privilege"
            }
          }
        },
        "description": "GlobalProfile Entity"
      },
      "ExpenseCategoryExport": {
        "title": "ExpenseCategory",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ExpenseCategory Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ExpenseCategory Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "ExpenseCategory Entity"
      },
      "ImportOptionsTemplate": {
        "title": "ImportOptionsTemplate",
        "type": "object",
        "properties": {
          "ImportOptionsTemplateType": {
            "type": "string",
            "description": "The content of the template."
          },
          "Name": {
            "type": "string",
            "description": "The name of the template."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ViewData": {
            "type": "string",
            "description": "The content of the template."
          }
        },
        "description": "ImportOptionsTemplate Entity"
      },
      "Timesheet": {
        "title": "Timesheet",
        "required": ["ResourceObjectId", "TimesheetPeriodObjectId"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this timesheet was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this timesheet."
          },
          "IsDaily": {
            "type": "boolean",
            "description": "The flag that identifies whether timesheet users enter hours daily or by entire timesheet reporting period."
          },
          "LastReceivedDate": {
            "type": "string",
            "description": "The last date on which the timesheet was submitted by the resource.",
            "format": "date-time"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this timesheet was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this timesheet."
          },
          "Notes": {
            "type": "string",
            "description": "The notes associated with the timesheet."
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the resource."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "Status": {
            "type": "string",
            "description": "The current status of the timesheet: 'Submitted', 'Approved', 'Resource Manager Approved', 'Project Manager Approved', 'Active', or 'Rejected'."
          },
          "StatusDate": {
            "type": "string",
            "description": "The date on which the status of the timesheet was last changed.",
            "format": "date-time"
          },
          "TimesheetPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the timesheet period.",
            "format": "int32"
          }
        },
        "description": "Timesheet Entity"
      },
      "TimesheetPeriod": {
        "title": "TimesheetPeriod",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this timesheet period was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this timesheet period."
          },
          "EndDate": {
            "type": "string",
            "description": "The timesheet period end date.",
            "format": "date-time"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this timesheet period was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this timesheet period."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "StartDate": {
            "type": "string",
            "description": "The timesheet period start date.",
            "format": "date-time"
          }
        },
        "description": "TimesheetPeriod Entity"
      },
      "CreateResourceAssignmentPeriodActualsResponse": {
        "title": "CreateResourceAssignmentPeriodActualsResponse",
        "type": "object",
        "properties": {
          "FinancialPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated financial period.",
            "format": "int32"
          },
          "ResourceAssignmentObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource assignment.",
            "format": "int32"
          }
        },
        "description": "CreateResourceAssignmentPeriodActualsResponse Entity"
      },
      "ActivityCodeExport": {
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ActivityCode Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ActivityCode Business Object",
              "enum": [
                "CODE_CONCAT_NAME",
                "CODE_TYPE_NAME",
                "CODE_TYPE_OBJECT_ID",
                "CODE_TYPE_SCOPE",
                "CODE_VALUE",
                "COLOR",
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "PROJECT_OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        }
      },
      "Project": {
        "title": "Project",
        "required": ["Id", "Name", "ParentEPSObjectId"],
        "type": "object",
        "properties": {
          "ActivityDefaultActivityType": {
            "type": "string",
            "description": "The default type for activities. Possible values are 'Task Dependent', 'Resource Dependent', 'Level of Effort', or 'Milestone'. A 'Task Dependent' activity is scheduled using the activity's calendar rather than the calendars of the assigned resources. A 'Resource Dependent' activity is scheduled using the calendars of the assigned resources. This type is used when several resources are assigned to the activity, but they may work separately. A 'Milestone' is a zero-duration activity without resources, marking a significant project event. A 'Level of Effort' activity has a duration that is determined by its dependent activities. Administration-type activities are typically 'Level of Effort'."
          },
          "ActivityDefaultCalendarName": {
            "type": "string",
            "description": "The name of the calendar assigned to new activities by default. Can be null for baselines."
          },
          "ActivityDefaultCalendarObjectId": {
            "type": "integer",
            "description": "The unique ID of the calendar assigned to new activities by default. Can be null for baselines.",
            "format": "int32"
          },
          "ActivityDefaultCostAccountObjectId": {
            "type": "integer",
            "description": "The unique ID of the cost account assigned to new activities and project expenses by default.",
            "format": "int32"
          },
          "ActivityDefaultDurationType": {
            "type": "string",
            "description": "The duration type assigned to new activities by default. Valid values are 'Fixed Units/Time', 'Fixed Duration and Units/Time', 'Fixed Units', or 'Fixed Duration and Units'."
          },
          "ActivityDefaultPercentCompleteType": {
            "type": "string",
            "description": "The percent complete type assigned to new activities by default. Valid values are 'Physical', 'Duration', and 'Units'."
          },
          "ActivityDefaultPricePerUnit": {
            "type": "number",
            "description": "The price used to estimate resource costs for activities that have planned, actual, or remaining units, but no resource assignments. This price is also used to compute costs for activities in cases where resources are assigned but the resources have no prices. Resource cost is computed as the resource units multiplied by the price per time.",
            "format": "double"
          },
          "ActivityDefaultReviewRequired": {
            "type": "boolean",
            "description": "The indicator that determines whether status changes for new activities must be approved by default."
          },
          "ActivityIdBasedOnSelectedActivity": {
            "type": "boolean",
            "description": "The flag that indicates how to auto-number activity IDs for new activities-Y/N - Y means use the selected activity's activity ID as prefix, N means use standard auto-numbering based on the prefix, suffix. Default = 'false'"
          },
          "ActivityIdIncrement": {
            "type": "integer",
            "description": "The increment used for auto-numbering of activity IDs. When a new activity is created, the activity ID is automatically generated using auto-numbering. Activity ID auto-numbering concatenates the prefix and the suffix, with the suffix incremented to make the code unique. Example: 'A', '1000', '10' yields activity IDs of 'A1010', 'A1020', 'A1030', etc.",
            "format": "int32"
          },
          "ActivityIdPrefix": {
            "type": "string",
            "description": "The prefix used for auto-numbering of activity IDs. When a new activity is created, the activity ID is automatically generated using auto-numbering. Activity ID auto-numbering concatenates the prefix and the suffix, with the suffix incremented to make the code unique. Example: 'A', '1000', '10' yields activity IDs of 'A1010', 'A1020', 'A1030', etc."
          },
          "ActivityIdSuffix": {
            "type": "integer",
            "description": "The suffix used for auto-numbering of activity IDs. When a new activity is created, the activity ID is automatically generated using auto-numbering. Activity ID auto-numbering concatenates the prefix and the suffix, with the suffix incremented to make the code unique. Example: 'A', '1000', '10' yields activity IDs of 'A1010', 'A1020', 'A1030', etc.",
            "format": "int32"
          },
          "ActivityPercentCompleteBasedOnActivitySteps": {
            "type": "boolean",
            "description": "The flag that indicates whether activity physical percent complete is automatically computed from the activity steps completed."
          },
          "AddActualToRemaining": {
            "type": "boolean",
            "description": "The flag that indicates whether to add actual to remaining or to subtract actual from at complete when actual units and costs are updated. Default = 'true'"
          },
          "AddedBy": {
            "type": "string",
            "description": "The name of the user who added the project to the database."
          },
          "AllowNegativeActualUnitsFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether the project can allow the negative values for the actual units."
          },
          "AllowStatusReview": {
            "type": "boolean",
            "description": "The indicator that determines whether status updates to activities in a project are eligible for manual approval before committing changes."
          },
          "AnnualDiscountRate": {
            "type": "number",
            "description": "The user-defined number field that identifies the discount rate for the project.",
            "format": "double"
          },
          "AnticipatedFinishDate": {
            "type": "string",
            "description": "The anticipated finish date of Project element. User-entered - not dependent upon any other fields. If there are no children, the anticipated finish date will be the finish date displayed in the columns.",
            "format": "date-time"
          },
          "AnticipatedStartDate": {
            "type": "string",
            "description": "The anticipated start date of Project element. User-entered - not dependent upon any other fields. If there are no children, the anticipated start date will be the start date displayed in the columns.",
            "format": "date-time"
          },
          "AssignmentDefaultDrivingFlag": {
            "type": "boolean",
            "description": "The default flag assigned to new assignments, to indicate whether assignments will drive activity dates."
          },
          "AssignmentDefaultRateType": {
            "type": "string",
            "description": "The default rate type when adding resource assignments to a project. Valid values are 'Price / Unit', 'Price / Unit2', 'Price / Unit3', 'Price / Unit4', and 'Price / Unit5'."
          },
          "CalculateFloatBasedOnFinishDate": {
            "type": "boolean",
            "description": "The flag that indicates how each activity's float will be calculated with respect to other projects in the scheduling batch. This setting only has an effect when scheduling multiple projects at the same time. If true, each activity's float is calculated based on its project's ScheduledFinishDate. If false, then each activity's float is calculated based on the latest ScheduledFinishDate of all of the projects in the scheduling batch."
          },
          "CheckOutDate": {
            "type": "string",
            "description": "The date on which the project was checked out of the Project Management database.",
            "format": "date-time"
          },
          "CheckOutStatus": {
            "type": "boolean",
            "description": "The flag that indicates that the project is currently checked out to an external file or database and is being managed remotely."
          },
          "CheckOutUserObjectId": {
            "type": "integer",
            "description": "The unique ID of the User that checked out this project.",
            "format": "int32"
          },
          "ComputeTotalFloatType": {
            "type": "string",
            "description": "The method for calculating total float for all activities. Start Float is the difference between the early and late start dates (Start Float = Late Start - Early Start); Finish Float is the difference between the early and late finish dates (Finish Float = Late Finish - Early Finish); and Smallest of Start Float and Finish Float is the most critical float value."
          },
          "ContainsSummaryData": {
            "type": "boolean",
            "description": "The flag that indicates that the Project has been summarized."
          },
          "ContractManagementGroupName": {
            "type": "string",
            "description": "The name of the Contract Management Group."
          },
          "ContractManagementProjectName": {
            "type": "string",
            "description": "The name of the Contract Management Project."
          },
          "CostQuantityRecalculateFlag": {
            "type": "boolean",
            "description": "The flag that, when costs and quantities are linked, indicates whether the quantities should be updated when costs are updated,"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this project was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project."
          },
          "CriticalActivityFloatLimit": {
            "type": "number",
            "description": "The duration used to determine if an activity is critical. When an activity has total float that is less than or equal to this duration, the activity is marked as critical.",
            "format": "double"
          },
          "CriticalActivityFloatThreshold": {
            "type": "number",
            "description": "The maximum float time for activities before they are marked critical.",
            "format": "double"
          },
          "CriticalActivityPathType": {
            "type": "string",
            "description": "The critical path type, which indicates how critical path activities are identified for the project, based on either 'Critical Float' or 'Longest Path'."
          },
          "CriticalFloatThreshold": {
            "type": "number",
            "description": "The option used for setting the critical float threshold value when scheduling projects.",
            "format": "double"
          },
          "CurrentBaselineProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the project's baseline to use for computing summaries.",
            "format": "int32"
          },
          "CurrentBudget": {
            "type": "number",
            "description": "The sum of the original budget plus the approved and pending budgets from the budget change log.",
            "format": "double"
          },
          "CurrentVariance": {
            "type": "number",
            "description": "The difference between the current budget and the total spending plan. Calculated as current budget - total spending plan. Not rolled up",
            "format": "double"
          },
          "DataDate": {
            "type": "string",
            "description": "The current data date for the project. The project status is up to date as of the data date. The data date is modified when project actuals are applied.",
            "format": "date-time"
          },
          "DateAdded": {
            "type": "string",
            "description": "The date on which the project was added to the Project Management database.",
            "format": "date-time"
          },
          "DefaultPriceTimeUnits": {
            "type": "string",
            "description": "The time units associated with the project's default price per time. Valid values are 'Hour', 'Day', 'Week', 'Month', and 'Year'."
          },
          "Description": {
            "type": "string",
            "description": "The description of the Project."
          },
          "DiscountApplicationPeriod": {
            "type": "string",
            "description": "the timescale for entering ROI spending and benefit plan. Valid values are 'Month', 'Quarter', or 'Year'."
          },
          "DistributedCurrentBudget": {
            "type": "number",
            "description": "The current budget values from one level lower.",
            "format": "double"
          },
          "EarnedValueComputeType": {
            "type": "string",
            "description": "The technique used for computing earned-value percent complete for activities within the Project. Valid values are 'Activity Percent Complete', '0 / 100', '50 / 50', 'Custom Percent Complete', 'WBS Milestones Percent Complete', and 'Activity Percent Complete Using Resource Curves'."
          },
          "EarnedValueETCComputeType": {
            "type": "string",
            "description": "The technique for computing earned-value estimate-to-complete for activities within the Project. Valid values are 'ETC = Remaining Cost for Activity', 'Performance Factor = 1', 'Performance Factor = Custom Value', 'Performance Factor = 1 / Cost Performance Index', and 'Performance Factor = 1 / (Cost Performance Index * Schedule Performance Index)'."
          },
          "EarnedValueETCUserValue": {
            "type": "number",
            "description": "The user-defined performance factor, PF, for computing earned-value estimate-to-complete. ETC is computed as PF * (BAC - earned value).",
            "format": "double"
          },
          "EarnedValueUserPercent": {
            "type": "number",
            "description": "The user-defined percent complete for computing earned value for activities within the Project. A value of, say, 25 means that 25% of the planned amount is earned when the activity is started and the remainder is earned when the activity is completed.",
            "format": "double"
          },
          "EnablePrimeSycFlag": {
            "type": "boolean"
          },
          "EnablePublication": {
            "type": "boolean",
            "description": "Enables the project to be processed by the Project Arbiter service."
          },
          "EnableSummarization": {
            "type": "boolean",
            "description": "The option which, when true, directs the Summarizer service to automatically summarize the project. If this is false, the project will be skipped during the summary run."
          },
          "EtlInterval": {
            "type": "string",
            "description": "The time interval for ETL for use in P6 Analytics, could be 'None', 'Scheduled', 'Immediate'."
          },
          "FinancialPeriodTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "FinishDate": {
            "type": "string",
            "description": "The finish date of the project. This is a summary method calculated from fields populated by the Summarizer job service.",
            "format": "date-time"
          },
          "FiscalYearStartMonth": {
            "type": "integer",
            "description": "The month that marks the beginning of the fiscal year for the project.",
            "format": "int32"
          },
          "ForecastFinishDate": {
            "type": "string",
            "description": "The alternate end date to be optionally used by the scheduler. The user sets the alternate end date by dragging the project bar in the Gantt Chart while manually leveling the resource profile in a resource analysis layout.",
            "format": "date-time"
          },
          "ForecastStartDate": {
            "type": "string",
            "description": "The alternate start date to be optionally used by the scheduler. The user sets the alternate start date by dragging the project bar in the Gantt Chart around while manually leveling the resource profile in a resource analysis layout.",
            "format": "date-time"
          },
          "GUID": {
            "type": "string",
            "description": "The globally unique ID generated by the system."
          },
          "HasFutureBucketData": {
            "type": "boolean",
            "description": "The flag that indicates whether a resource assignment in the project has future bucket data."
          },
          "HistoryInterval": {
            "type": "string",
            "description": "The time interval for how historical project data is stored for use in P6 Analytics, could be 'Month', 'Week', 'Quarter', 'Year' and 'Financial Period'."
          },
          "HistoryLevel": {
            "type": "string",
            "description": "The level of historical project data that is stored for use in P6 Analytics, cab be 'None', 'Project', 'WBS' and 'Activity'."
          },
          "Id": {
            "type": "string",
            "description": "The short code assigned to each Project element for identification. Each Project element is uniquely identified by this short code."
          },
          "IgnoreOtherProjectRelationships": {
            "type": "boolean",
            "description": "Determines whether to ignore activity relationships between projects."
          },
          "IndependentETCLaborUnits": {
            "type": "number",
            "description": "The user-entered ETC total labor.",
            "format": "double"
          },
          "IndependentETCTotalCost": {
            "type": "number",
            "description": "The user-entered ETC total cost.",
            "format": "double"
          },
          "IntegratedType": {
            "type": "string",
            "description": "The flag indicating whether the project is integrated with an Enterprise Resource Planning (ERP) system. 'Fusion' indicates the project is integrated with Oracle Fusion. 'ERP' indicates the project is integrated with another ERP system. 'Gateway' indicates the project is integrated with Oracle Primavera Gateway."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this Project is a template Project."
          },
          "LastApplyActualsDate": {
            "type": "string",
            "description": "The last date Apply Actuals was run for this project.",
            "format": "date-time"
          },
          "LastFinancialPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the last closed financial period for the project.",
            "format": "int32"
          },
          "LastLevelDate": {
            "type": "string",
            "description": "The date the project was last leveled.",
            "format": "date-time"
          },
          "LastPublishedOn": {
            "type": "string",
            "description": "The date the project was last published.",
            "format": "date-time"
          },
          "LastScheduleDate": {
            "type": "string",
            "description": "The date the project was last scheduled.",
            "format": "date-time"
          },
          "LastSummarizedDate": {
            "type": "string",
            "description": "The date the project was last summarized.",
            "format": "date-time"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project."
          },
          "Latitude": {
            "type": "number",
            "format": "double"
          },
          "LevelAllResources": {
            "type": "boolean",
            "description": "The resources to level."
          },
          "LevelDateFlag": {
            "type": "boolean",
            "description": "Gets the date the project was last leveled."
          },
          "LevelFloatThresholdCount": {
            "type": "integer",
            "description": "The amount of float you want to maintain when activities are delayed because of resource conflicts. You can type a new number and time unit.",
            "format": "int32"
          },
          "LevelOuterAssign": {
            "type": "boolean",
            "description": "Include resource assignments in other projects to level."
          },
          "LevelOuterAssignPriority": {
            "type": "integer",
            "description": "Set the range of the leveling priority that you specify when determining if a resource is over-allocated. Assignments in closed projects are considered.",
            "format": "int32"
          },
          "LevelOverAllocationPercent": {
            "type": "number",
            "format": "double"
          },
          "LevelPriorityList": {
            "type": "string",
            "description": "Lists the fields by which to prioritize resources when leveling. Priorities are used only when more than one activity competes for the same resource at the same time. Sort Order: The order in which to level resources according to the field names displayed. Double-click the Sort Order field to choose Ascending, Descending, or Hierarchy (option only appears for fields that are hierarchical)"
          },
          "LevelResourceList": {
            "type": "string",
            "description": "Consists of the list of resources to level."
          },
          "LevelWithinFloat": {
            "type": "boolean",
            "description": "To delay activities with resource conflicts only up to their late finish date."
          },
          "LevelingPriority": {
            "type": "integer",
            "description": "The priority for scheduling.",
            "format": "int32"
          },
          "LimitMultipleFloatPaths": {
            "type": "boolean",
            "description": "The option used for enabling/disabling limit multiple float paths when scheduling projects."
          },
          "LinkActualToActualThisPeriod": {
            "type": "boolean",
            "description": "The flag that indicates whether actual units and costs are linked to actual-this-period units and costs. Setting this field to true asynchronously causes all actual-this-period values to be recalculated for the project via a job service. Default = 'true'."
          },
          "LinkPercentCompleteWithActual": {
            "type": "boolean",
            "description": "The flag that indicates whether actual units and cost should be recalculated when percent complete changes. Default = 'false'"
          },
          "LinkPlannedAndAtCompletionFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether the At Completion Cost/Units should be linked to Planned Cost/Units for not-started activities. Default = 'true'"
          },
          "LocationName": {
            "type": "string",
            "description": "The name of the location assigned to the project."
          },
          "LocationObjectId": {
            "type": "integer",
            "description": "The unique ID of the location assigned to the project.",
            "format": "int32"
          },
          "Longitude": {
            "type": "number",
            "format": "double"
          },
          "MakeOpenEndedActivitiesCritical": {
            "type": "boolean",
            "description": "The option used by the scheduler for automatically leveling resources when scheduling projects."
          },
          "MaximumMultipleFloatPaths": {
            "type": "integer",
            "description": "The number of critical float paths to calculate. For example, if you set the field to five, the module calculates the five most critical float paths ending with the activity you selected. The module ranks each float path from most critical to least critical, and stores the value for each activity in the Float Path field. For example, if you calculate five float paths, the module will store a value of one in the Float Path field for each activity in the most critical float path; the module will store a value of five for each activity in the least critical float path. Note: To view the critical float paths after you schedule the project, group activities in the Activity Table by Float Path and sort by Float Path Order. A Float Path value of one indicates that those activities are part of the most critical float path. The Float Path Order value indicates the order in which the activities were processed.",
            "format": "int32"
          },
          "MultipleFloatPathsEnabled": {
            "type": "boolean",
            "description": "The Boolean value that indicates whether multiple critical float paths (sequences of activities) should be calculated in the project schedule."
          },
          "MultipleFloatPathsEndingActivityObjectId": {
            "type": "integer",
            "description": "The activity in the WBS that you want to represent the end of the float paths. Typically, this will be a milestone activity or some other significant activity that has a start date or end date that cannot change. Note: if a value is not assigned, the module will choose an activity based on MultipleFloatPathsUseTotalFloat. If you are calculating multiple paths using Free Float, the module will choose the open-ended activity with the most critical Free Float. If you are calculating multiple paths using Total Float, the module will calculate the Total Float for all activity relationships, then choose the activity with the most critical Relationship Total Float.",
            "format": "int32"
          },
          "MultipleFloatPathsUseTotalFloat": {
            "type": "boolean"
          },
          "MustFinishByDate": {
            "type": "string",
            "description": "The date by which all project activities must finish. If entered, it is used as the project late finish date by the project scheduler.",
            "format": "date-time"
          },
          "Name": {
            "type": "string",
            "description": "The name of the Project element."
          },
          "NetPresentValue": {
            "type": "number",
            "description": "The estimated net value, at the present time for the project",
            "format": "double"
          },
          "OBSName": {
            "type": "string",
            "description": "The name of the person/role in the organization, sometimes referred to as the \"responsible manager\"."
          },
          "OBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the project manager from the project's OBS tree who is responsible for the Project.",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OriginalBudget": {
            "type": "number",
            "description": "The original budget for the project.",
            "format": "double"
          },
          "OutOfSequenceScheduleType": {
            "type": "string",
            "description": "The type of logic used to schedule the progressed activities: 'Retained Logic', 'Progress Override', or 'Actual Dates'."
          },
          "OverallProjectScore": {
            "type": "integer",
            "description": "The project score calculated based on all project code types assigned to this project.",
            "format": "int32"
          },
          "OwnerResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the Owner Resource of this project.",
            "format": "int32"
          },
          "ParentEPSId": {
            "type": "string",
            "description": "The ID of the parent EPS of this project."
          },
          "ParentEPSName": {
            "type": "string",
            "description": "The parent EPS of this project."
          },
          "ParentEPSObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent EPS of this project.",
            "format": "int32"
          },
          "PaybackPeriod": {
            "type": "integer",
            "description": "The PaybackPeriod for the project",
            "format": "int32"
          },
          "PerformancePercentCompleteByLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedStartDate": {
            "type": "string",
            "description": "The planned start date of the project. Used by the project scheduler.",
            "format": "date-time"
          },
          "PostResponsePessimisticFinish": {
            "type": "string",
            "format": "date-time"
          },
          "PostResponsePessimisticStart": {
            "type": "string",
            "format": "date-time"
          },
          "PreResponsePessimisticFinish": {
            "type": "string",
            "format": "date-time"
          },
          "PreResponsePessimisticStart": {
            "type": "string",
            "format": "date-time"
          },
          "PrimaryResourcesCanMarkActivitiesAsCompleted": {
            "type": "boolean",
            "description": "The flag that indicates whether primary resources can mark the project activities as completed. If not selected, a primary resource can only mark an activity as For Review. In this case the project manager reviews the activity and marks it as either Rejected or completed."
          },
          "PrimaryResourcesCanUpdateActivityDates": {
            "type": "boolean"
          },
          "ProjectForecastStartDate": {
            "type": "string",
            "description": "The alternate start date to be optionally used by the scheduler. The user sets the alternate start date by dragging the project bar in the Gantt Chart around while manually leveling the resource profile in a resource analysis layout.",
            "format": "date-time"
          },
          "ProjectScheduleType": {
            "type": "string",
            "description": "The type of schedule the project is based on. It can contain either \"Duration\" or \"Resource\" or \"Cost\"."
          },
          "PropertyType": {
            "type": "string",
            "description": "The project property name associated with the scheduling of projects."
          },
          "ProposedBudget": {
            "type": "number",
            "description": "The Proposed Budget, which is the sum of the original budget plus the approved and pending budgets from the budget change log.",
            "format": "double"
          },
          "PublicationPriority": {
            "type": "integer",
            "description": "A priority value the Project Arbiter service uses to determine the order in which projects are submitted to the service queue, where 1 is highest priority and 100 is lowest priority.",
            "format": "int32"
          },
          "PublishLevel": {
            "type": "string",
            "description": "The publish level for the project publication."
          },
          "RelationshipLagCalendar": {
            "type": "string",
            "description": "The calendar used to calculate the lag between predecessors and successors for all activities. Valid values are 'Predecessor Activity Calendar', 'Successor Activity Calendar', '24 Hour Calendar', and 'Project Default Calendar'. If you do not select a calendar, the successor activity calendar is used."
          },
          "ResetPlannedToRemainingFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether to reset Planned Duration and Units to Remaining Duration and Units, or to reset Remaining Duration and Units to Planned Duration and Units when the Activity Status is or becomes not started. Default = 'true'"
          },
          "ResourceCanBeAssignedToSameActivityMoreThanOnce": {
            "type": "boolean",
            "description": "The flag that indicates whether a resource can be assigned more than once to the same activity. This is useful when the resource is expected to perform more than one role on an activity, for example, documentation plus QA."
          },
          "ResourceName": {
            "type": "string"
          },
          "ResourcesCanAssignThemselvesToActivities": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet application users are allowed to assign themselves to activities in this project."
          },
          "ResourcesCanAssignThemselvesToActivitiesOutsideOBSAccess": {
            "type": "boolean"
          },
          "ResourcesCanEditAssignmentPercentComplete": {
            "type": "boolean",
            "description": "The flag that indicates whether the project's resource update the remaining units or the percent complete for their activities in the timesheet application."
          },
          "ResourcesCanMarkAssignmentAsCompleted": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet resources can mark the assignment as complete."
          },
          "ResourcesCanViewInactiveActivities": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet resources can view inactive project activities."
          },
          "ReturnOnInvestment": {
            "type": "number",
            "description": "The estimated return on investment for the project",
            "format": "double"
          },
          "ReviewType": {
            "type": "string"
          },
          "RiskExposure": {
            "type": "number",
            "description": "The calculated exposure value for the project.",
            "format": "double"
          },
          "RiskLevel": {
            "type": "string",
            "description": "The risk level assigned to the project: 'Very High', 'High', 'Medium', 'Low', and 'Very Low'."
          },
          "RiskMatrixName": {
            "type": "string",
            "description": "The name of the risk matrix."
          },
          "RiskMatrixObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Matrix.",
            "format": "int32"
          },
          "RiskScore": {
            "type": "integer",
            "description": "The calculated risk score for the project.",
            "format": "int32"
          },
          "ScheduleWBSHierarchyType": {
            "type": "string",
            "description": "The option used for specifying WBS Hierachy sync type."
          },
          "ScheduledFinishDate": {
            "type": "string",
            "description": "The early finish date of the latest activity in the project, as computed by the project scheduler.",
            "format": "date-time"
          },
          "SourceProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the project from which the reflection project was created, if the current project is a reflection project.",
            "format": "int32"
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the project. This is a summary method calculated from fields populated by the Summarizer job service.",
            "format": "date-time"
          },
          "StartToStartLagCalculationType": {
            "type": "boolean",
            "description": "The method used to calculate lag when a start-to-start relationship exists and the predecessor starts out of sequence. Actual Start sets the successor's start according to the time elapsed from the predecessor's actual start (the successor's start date is the data date plus any remaining lag). Early Start sets the successor's start according to the amount of work that the predecessor activity accomplishes (the expired lag is calculated as the number of work periods between the actual start and the data date, and the successor's start date is the predecessor's internal early start plus any remaining lag)."
          },
          "Status": {
            "type": "string",
            "description": "The project status: 'Planned', 'Active', 'Inactive', 'What-If', 'Requested', or 'Template'."
          },
          "StatusReviewerName": {
            "type": "string",
            "description": "The name of the user reviewing status updates."
          },
          "StatusReviewerObjectId": {
            "type": "string",
            "description": "The unique ID of the user reviewing status updates."
          },
          "StrategicPriority": {
            "type": "integer",
            "description": "The project's priority. The range is from 1 to 10,000.",
            "format": "int32"
          },
          "SummarizeResourcesRolesByWBS": {
            "type": "boolean"
          },
          "SummarizeToWBSLevel": {
            "type": "integer",
            "description": "The maximum level within the project's WBS to perform summarization - default to 2.",
            "format": "int32"
          },
          "SummarizedDataDate": {
            "type": "string",
            "description": "The data date of the project when it was last summarized-only updated by summarizer.",
            "format": "date-time"
          },
          "SummaryAccountingVarianceByCost": {
            "type": "number",
            "description": "The Planned Value minus the Actual Cost. A negative value indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryAccountingVarianceByLaborUnits": {
            "type": "number",
            "description": "The Planned Value Labor Units minus the Actual Units. Negative value indicates that Actual Units have exceeded the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently in progress.",
            "format": "int32"
          },
          "SummaryActualDuration": {
            "type": "number",
            "description": "The actual duration.",
            "format": "double"
          },
          "SummaryActualExpenseCost": {
            "type": "number",
            "description": "The actual costs for all project expenses associated with the project.",
            "format": "double"
          },
          "SummaryActualFinishDate": {
            "type": "string",
            "description": "The latest actual finish date of all activities in the project.",
            "format": "date-time"
          },
          "SummaryActualLaborCost": {
            "type": "number",
            "description": "The actual cost for all labor resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualLaborUnits": {
            "type": "number",
            "description": "The actual labor units.",
            "format": "double"
          },
          "SummaryActualMaterialCost": {
            "type": "number",
            "description": "The actual units for all material resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualNonLaborCost": {
            "type": "number",
            "description": "The actual units for all nonlabor resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualNonLaborUnits": {
            "type": "number",
            "description": "The actual nonlabor units.",
            "format": "double"
          },
          "SummaryActualStartDate": {
            "type": "string",
            "description": "The earliest actual start date of all activities in the project.",
            "format": "date-time"
          },
          "SummaryActualThisPeriodCost": {
            "type": "number",
            "description": "The actual this period cost (will be labor or nonlabor).",
            "format": "double"
          },
          "SummaryActualThisPeriodLaborCost": {
            "type": "number",
            "description": "The actual this period labor cost",
            "format": "double"
          },
          "SummaryActualThisPeriodLaborUnits": {
            "type": "number",
            "description": "The actual this period labor units.",
            "format": "double"
          },
          "SummaryActualThisPeriodMaterialCost": {
            "type": "number",
            "description": "The actual this period material cost.",
            "format": "double"
          },
          "SummaryActualThisPeriodNonLaborCost": {
            "type": "number",
            "description": "The actual this period nonlabor cost.",
            "format": "double"
          },
          "SummaryActualThisPeriodNonLaborUnits": {
            "type": "number",
            "description": "The actual this period nonlabor units.",
            "format": "double"
          },
          "SummaryActualTotalCost": {
            "type": "number",
            "description": "The actual labor cost + actual nonlabor cost + actual expense cost as of the project data date.",
            "format": "double"
          },
          "SummaryActualValueByCost": {
            "type": "number",
            "description": "The actual total cost incurred on the activity as of the project data date, computed as Actual Labor Cost + Actual Nonlabor Cost + Actual Material Cost + Actual Expense Cost.",
            "format": "double"
          },
          "SummaryActualValueByLaborUnits": {
            "type": "number",
            "description": "The actual total labor units for the activity as of the project data date (i.e., actual total cost by labor units).",
            "format": "double"
          },
          "SummaryAtCompletionDuration": {
            "type": "number",
            "description": "The duration at completion.",
            "format": "double"
          },
          "SummaryAtCompletionExpenseCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining cost for all project expenses associated with the cost account. Computed as Actual Expense Cost + Remaining Expense Cost.",
            "format": "double"
          },
          "SummaryAtCompletionLaborCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining costs for all labor resources assigned to the activity. Computed as actual labor cost + remaining labor cost. Same as the planned labor costs if the activity is not started and the actual labor costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionLaborUnits": {
            "type": "number",
            "description": "The sum of the actual plus remaining units for all labor resources assigned to the activity. Computed as actual labor units + remaining labor units. Same as the planned labor units if the activity is not started and the actual labor units once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionMaterialCost": {
            "type": "number",
            "description": "The material cost at completion. It is the sum of the actual plus remaining costs for all material resources assigned to the activity. Computed as actual material cost + remaining material cost. Same as the planned material costs if the activity is not started and the actual material costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionNonLaborCost": {
            "type": "number",
            "description": "The nonlabor cost at completion. It is the sum of the actual plus remaining costs for all nonlabor resources assigned to the activity. Computed as actual nonlabor cost + remaining nonlabor cost. Same as the planned nonlabor costs if the activity is not started and the actual nonlabor costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionNonLaborUnits": {
            "type": "number",
            "description": "The nonlabor units at completion. It is the sum of the actual plus remaining units for all nonlabor resources assigned to the activity. Computed as actual nonlabor units + remaining nonlabor units. Same as the planned nonlabor units if the activity is not started and the actual nonlabor units once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionTotalCost": {
            "type": "number",
            "description": "The estimated cost at completion for the activity. Computed as the actual total cost plus the estimate-to-complete cost; EAC = ACWP + ETC. Note that the method for computing ETC depends on the earned-value technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryAtCompletionTotalCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Total Cost - At Completion Total Cost.",
            "format": "double"
          },
          "SummaryBaselineCompletedActivityCount": {
            "type": "integer",
            "description": "The number of completed activities in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineDuration": {
            "type": "number",
            "description": "The planned duration for the activity in the primary baseline. Planned duration is the total working time from the activity current start date to the current finish date. Same as the actual duration plus the remaining duration. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "SummaryBaselineExpenseCost": {
            "type": "number",
            "description": "The planned cost for all project expenses associated with the activity in the primary baseline. Computed as the baseline actual expense cost plus the baseline remaining expense cost.",
            "format": "double"
          },
          "SummaryBaselineFinishDate": {
            "type": "string",
            "description": "The current latest finish date of all activities in the project for the current baseline.",
            "format": "date-time"
          },
          "SummaryBaselineInProgressActivityCount": {
            "type": "integer",
            "description": "The number of in-progress activities in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineLaborCost": {
            "type": "number",
            "description": "The planned cost for all labor resources assigned to the activity in the primary baseline. Computed from the baseline At Completion labor units. If no resources are assigned, computed as the activity Baseline Planned Labor Units * Project Default Price / Time.",
            "format": "double"
          },
          "SummaryBaselineLaborUnits": {
            "type": "number",
            "description": "The planned units for all labor resources assigned to the activity in the primary baseline. Computed as the baseline actual labor units plus the baseline remaining labor units.",
            "format": "double"
          },
          "SummaryBaselineMaterialCost": {
            "type": "number",
            "description": "The planned cost for all material resources assigned to the activity in the primary baseline. Computed from the baseline At Completion nonlabor units. If no resources are assigned.",
            "format": "double"
          },
          "SummaryBaselineNonLaborCost": {
            "type": "number",
            "description": "The planned cost for all nonlabor resources assigned to the activity in the primary baseline. Computed from the baseline At Completion nonlabor units. If no resources are assigned, computed as the activity Baseline Planned Nonlabor Units * Project Default Price / Time.",
            "format": "double"
          },
          "SummaryBaselineNonLaborUnits": {
            "type": "number",
            "description": "The planned units for all nonlabor resources assigned to the activity in the primary baseline. Computed as the baseline actual nonlabor units plus the baseline remaining nonlabor units.",
            "format": "double"
          },
          "SummaryBaselineNotStartedActivityCount": {
            "type": "integer",
            "description": "The number of activities not started in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineStartDate": {
            "type": "string",
            "description": "The current earliest start date of all activities in the Project for the current baseline.",
            "format": "date-time"
          },
          "SummaryBaselineTotalCost": {
            "type": "number",
            "description": "The Planned Total Cost for the activity in the primary baseline, including labor resources, nonlabor resources, and project expenses. Baseline Planned Total Cost = Baseline Planned Labor Cost + Baseline Planned Nonlabor Cost + Baseline Planned Expense Cost.",
            "format": "double"
          },
          "SummaryBudgetAtCompletionByCost": {
            "type": "number",
            "description": "The Planned Total Cost through activity completion. Computed as Planned Labor Cost + Planned Nonlabor Cost + Planned Expense Cost, same as the Planned Total Cost.",
            "format": "double"
          },
          "SummaryBudgetAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Baseline Labor Units",
            "format": "double"
          },
          "SummaryCompletedActivityCount": {
            "type": "integer",
            "description": "The number of activities that have an Actual Finish in the Project.",
            "format": "int32"
          },
          "SummaryCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all nonlabor resources assigned. Computed as Actual Nonlabor Cost / At Completion Nonlabor Cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryCostPercentOfPlanned": {
            "type": "number",
            "description": "The activity actual cost percent of planned. Computed as actual total cost / baseline total cost * 100, or equivalently as ACWP / BAC * 100. The value can exceed 100. The baseline total cost is the activity's at completion cost from the current baseline. This field is named SummaryCostPercentOfBudget in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "SummaryCostPerformanceIndexByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Actual Cost. A value less than 1 indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryCostPerformanceIndexByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units / Actual Labor Units.",
            "format": "double"
          },
          "SummaryCostVarianceByCost": {
            "type": "number",
            "description": "The Earned Value minus the Actual Cost. A negative value indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryCostVarianceByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Cost minus Actual Value Labor Cost.",
            "format": "double"
          },
          "SummaryCostVarianceIndex": {
            "type": "number",
            "description": "The value that is calculated as the Cost Variance divided by Earned Value.",
            "format": "double"
          },
          "SummaryCostVarianceIndexByCost": {
            "type": "number",
            "description": "The Cost Variance divided by Earned Value.",
            "format": "double"
          },
          "SummaryCostVarianceIndexByLaborUnits": {
            "type": "number",
            "description": "The Cost Variance Labor Units divided by Earned Value Labor Units.",
            "format": "double"
          },
          "SummaryDurationPercentComplete": {
            "type": "number",
            "description": "The percent complete of the activity duration. Computed as (planned duration - remaining duration) / planned duration * 100. The planned duration is taken from the current plan, not from the baseline.",
            "format": "double"
          },
          "SummaryDurationPercentOfPlanned": {
            "type": "number",
            "description": "The summary actual duration percent of planned of all activities under this project. Computed as actual duration / baseline duration * 100. The value can exceed 100. The Baseline duration is the activity's at complete duration from the current baseline.",
            "format": "double"
          },
          "SummaryDurationVariance": {
            "type": "number",
            "description": "The duration between the activity's baseline duration and the at complete duration. Computed as baseline planned duration - at completion duration.",
            "format": "double"
          },
          "SummaryEarnedValueByCost": {
            "type": "number",
            "description": "The Budget at Completion * Performance % Complete. The method for computing the Performance Percent Complete depends on the Earned Value technique selected for the activity's WBS. Budget at Completion is computed from the primary baseline.",
            "format": "double"
          },
          "SummaryEarnedValueByLaborUnits": {
            "type": "number",
            "description": "The portion of the baseline labor units that is actually completed as of the project data date. Computed as Baseline Labor Units * Performance % Complete. The planned labor units performed is essentially the labor units Earned Value for the activity. The method for computing the Performance % Complete depends on the Earned Value technique selected for the activity's WBS. The Baseline Labor Units is taken from the current baseline.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionByCost": {
            "type": "number",
            "description": "The Actual Cost plus the Estimate to Complete Cost. The method for computing Estimate to Complete depends on the Earned Value technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Actual Labor Units + Estimate To Complete Labor Units. (Estimate To Complete Labor Units is calculated based off of the Earned Value setting on the Project.)",
            "format": "double"
          },
          "SummaryEstimateAtCompletionHighPercentByLaborUnits": {
            "type": "number",
            "description": "The high forecast of Estimate At Completion (EAC) by labor units.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionLowPercentByLaborUnits": {
            "type": "number",
            "description": "The low forecast of Estimate At Completion (EAC) by labor units.",
            "format": "double"
          },
          "SummaryEstimateToCompleteByCost": {
            "type": "number",
            "description": "The Remaining Total Cost for the activity or the Performance Factor * (Budget at Completion - Earned Value), depending on the Earned Value technique selected for the activity's WBS (calculated from the primary baseline).",
            "format": "double"
          },
          "SummaryEstimateToCompleteByLaborUnits": {
            "type": "number",
            "description": "The estimated quantity to complete the activity. Computed as either the remaining total units for the activity, or as Performance Factor * (Baseline Planned Labor Units - Planned Quantity of Work Performed), depending on the Earned Value Technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryExpenseCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all expenses associated with the project. It is computed as Actual Expense Cost / At Complete Expense Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryExpenseCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Expense Cost - At Completion Expense Cost (At Completion Expense Cost = Actual Expense Cost + Remaining Expense Cost).",
            "format": "double"
          },
          "SummaryFinishDateVariance": {
            "type": "number",
            "description": "The duration between the finish date in the current project and the baseline finish date. Calculated as finish date - baseline finish date.",
            "format": "double"
          },
          "SummaryInProgressActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently in progress.",
            "format": "int32"
          },
          "SummaryLaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all labor resources assigned to the project. It is computed as Actual Labor Cost / At Complete Labor Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryLaborCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Labor Cost - At Completion Labor Cost.",
            "format": "double"
          },
          "SummaryLaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all labor resources for the Project. Computed as actual labor units / at complete labor units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryLaborUnitsVariance": {
            "type": "number",
            "description": "The difference between baseline labor units and at completion labor units. Calculated as baseline labor units - at completion labor units.",
            "format": "double"
          },
          "SummaryLevel": {
            "type": "string",
            "description": "The summary level for the project while performing project summarization."
          },
          "SummaryMaterialCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all material resources assigned to the project. It is computed as Actual Material Cost / At Complete Material Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryMaterialCostVariance": {
            "type": "number",
            "description": "The variance that is calculated as Baseline Material Cost - At Completion Material Cost.",
            "format": "double"
          },
          "SummaryNonLaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all non-labor resources assigned to the project. It is computed as Actual Nonlabor Cost / At Complete Nonlabor Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryNonLaborCostVariance": {
            "type": "number",
            "description": "Tthe Baseline Planned Nonlabor Cost - At Completion Nonlabor Cost.",
            "format": "double"
          },
          "SummaryNonLaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all nonlabor resources for the Project. Computed as Actual Nonlabor Cost / At Completion Nonlabor Cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryNonLaborUnitsVariance": {
            "type": "number",
            "description": "The difference between baseline nonlabor units and at completion non labor units. Calculated as baseline nonlabor units - at completion nonlabor units.",
            "format": "double"
          },
          "SummaryNotStartedActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently not started.",
            "format": "int32"
          },
          "SummaryPerformancePercentCompleteByCost": {
            "type": "number",
            "description": "he percent complete of performance for all labor resources, nonlabor resources, and expenses. Computed as Earned Value / Budget At Completion * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryPerformancePercentCompleteByLaborUnits": {
            "type": "number",
            "description": "The percent complete of performance for all labor resources. Computed as earned value labor units / baseline labor units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryPlannedCost": {
            "type": "number",
            "description": "The sum of all planned expense, non labor, labor, and material costs in the project.",
            "format": "double"
          },
          "SummaryPlannedDuration": {
            "type": "number",
            "description": "The total working days between planned start and finish dates in the project.",
            "format": "double"
          },
          "SummaryPlannedExpenseCost": {
            "type": "number",
            "description": "The sum of all planned expense costs in the project.",
            "format": "double"
          },
          "SummaryPlannedFinishDate": {
            "type": "string",
            "description": "The latest planned finish date of all activities in the project.",
            "format": "date-time"
          },
          "SummaryPlannedLaborCost": {
            "type": "number",
            "description": "The sum of all planned labor costs in the project.",
            "format": "double"
          },
          "SummaryPlannedLaborUnits": {
            "type": "number",
            "description": "The sum of all planned labor units in the project.",
            "format": "double"
          },
          "SummaryPlannedMaterialCost": {
            "type": "number",
            "description": "The sum of all planned material costs in the project.",
            "format": "double"
          },
          "SummaryPlannedNonLaborCost": {
            "type": "number",
            "description": "The sum of all planned non labor costs in the project.",
            "format": "double"
          },
          "SummaryPlannedNonLaborUnits": {
            "type": "number",
            "description": "The sum of all planned non labor units in the project.",
            "format": "double"
          },
          "SummaryPlannedStartDate": {
            "type": "string",
            "description": "The earliest planned start date of all activities in the project.",
            "format": "date-time"
          },
          "SummaryPlannedValueByCost": {
            "type": "number",
            "description": "The Budget at Completion * Schedule % Complete. The Schedule % Complete specifies how much of the activity's baseline duration has been completed so far. Budget at Completion is computed from the primary baseline",
            "format": "double"
          },
          "SummaryPlannedValueByLaborUnits": {
            "type": "number",
            "description": "The portion of the baseline labor units that is scheduled to be completed as of the project data date. Computed as Baseline Labor Units * Schedule % Complete. The Schedule % Complete specifies how much of the activity's baseline duration has been completed so far. The Baseline Labor Units is taken from the current baseline.",
            "format": "double"
          },
          "SummaryProgressFinishDate": {
            "type": "string",
            "description": "The date the activity is expected to be finished according to the progress made on the activity's work products. The expected finish date is entered manually by people familiar with progress of the activity's work products.",
            "format": "date-time"
          },
          "SummaryRemainingDuration": {
            "type": "number",
            "description": "The total working time from the Project remaining start date to the remaining finish date.",
            "format": "double"
          },
          "SummaryRemainingExpenseCost": {
            "type": "number",
            "description": "The remaining costs for all project expenses associated with the activities in the Project.",
            "format": "double"
          },
          "SummaryRemainingFinishDate": {
            "type": "string",
            "description": "The date the resource is scheduled to finish the remaining work for the activity. This date is computed by the project scheduler but can be updated manually by the project manager. Before the activity is started, the remaining finish date is the same as the planned finish date.",
            "format": "date-time"
          },
          "SummaryRemainingLaborCost": {
            "type": "number",
            "description": "The remaining costs for all labor resources assigned to the activities. The remaining cost reflects the cost remaining for the Project.",
            "format": "double"
          },
          "SummaryRemainingLaborUnits": {
            "type": "number",
            "description": "The remaining units for all labor resources assigned to the activities. The remaining units reflects the work remaining to be done for the Project.",
            "format": "double"
          },
          "SummaryRemainingMaterialCost": {
            "type": "number",
            "description": "The remaining material costs for all project expenses associated with the activities in the Project.",
            "format": "double"
          },
          "SummaryRemainingNonLaborCost": {
            "type": "number",
            "description": "The remaining nonlabor costs for all project expenses associated with the activities in the Project.",
            "format": "double"
          },
          "SummaryRemainingNonLaborUnits": {
            "type": "number",
            "description": "The remaining units for all nonlabor resources assigned to the activities. The remaining units reflects the work remaining to be done for the Project.",
            "format": "double"
          },
          "SummaryRemainingStartDate": {
            "type": "string",
            "description": "The earliest remaining start of all activities assigned to the Project.",
            "format": "date-time"
          },
          "SummaryRemainingTotalCost": {
            "type": "number",
            "description": "The sum of all remaining total costs in the Project.",
            "format": "double"
          },
          "SummarySchedulePercentComplete": {
            "type": "number",
            "description": "The measure that indicates how much of the Project baseline duration has been completed so far. Computed based on where the current data date falls between the activity's baseline start and finish dates. If the data date is earlier than the baseline start, the schedule % complete is 0. If the data date is later than the baseline finish, the schedule % complete is 100. The schedule % complete indicates how much of the Project duration should be currently completed, relative to the selected baseline.",
            "format": "double"
          },
          "SummarySchedulePercentCompleteByLaborUnits": {
            "type": "number",
            "description": "The percent complete of units for all labor resources. Computed as Actual Labor Units / At Completion Labor Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummarySchedulePerformanceIndexByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Planned Value. A value less than 1 indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "SummarySchedulePerformanceIndexByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units divided by Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Planned Value. A negative value indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "SummaryScheduleVarianceByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units minus the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndex": {
            "type": "number",
            "description": "The value that is calculated as the Schedule Variance Labor Units divided by Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndexByCost": {
            "type": "number",
            "description": "The Schedule Variance divided by the Planned Value.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndexByLaborUnits": {
            "type": "number",
            "description": "The Schedule Variance Labor Units divided by the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryStartDateVariance": {
            "type": "number",
            "description": "The duration between the start date in the current project and the baseline start date. Calculated as start date - baseline start date.",
            "format": "double"
          },
          "SummaryToCompletePerformanceIndexByCost": {
            "type": "number",
            "description": "The (Budget at Completion - Earned Value) divided by (Estimate at Completion - Actual Cost).",
            "format": "double"
          },
          "SummaryTotalCostVariance": {
            "type": "number",
            "description": "The value that is calculated as baseline total cost - total cost.",
            "format": "double"
          },
          "SummaryTotalFloat": {
            "type": "number",
            "description": "The amount of time the Project can be delayed before delaying the project finish date. Total float can be computed as late start - early start or as late finish - early finish; this option can be set when running the project scheduler.",
            "format": "double"
          },
          "SummaryUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for the resource assignments in the Project. Computed as Actual Units / At Complete Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryVarianceAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Baseline Planned Total Labor Units minus Estimate at Completion Labor Units.",
            "format": "double"
          },
          "SyncWbsHierarchyFlag": {
            "type": "boolean",
            "description": "The option used for enabling/disabling WBS Hierachy sync."
          },
          "TeamMemberActivityFields": {
            "type": "string",
            "description": "The list of activity fields that can be updated by a team member using the P6 Team Member interfaces."
          },
          "TeamMemberAddNewActualUnits": {
            "type": "boolean",
            "description": "The indicator that determines whether team members enter new actual units."
          },
          "TeamMemberAssignmentOption": {
            "type": "string",
            "description": "The indicator that determines whether team member can update activity fields, assignment fields, or both using the P6 Team Member interfaces."
          },
          "TeamMemberCanStatusOtherResources": {
            "type": "boolean",
            "description": "The indicator that determines whether team member can status other resource assignments on an activity."
          },
          "TeamMemberCanUpdateNotebooks": {
            "type": "boolean",
            "description": "The indicator that determines whether notebooks can be updated by the team member."
          },
          "TeamMemberDisplayBaselineDatesFlag": {
            "type": "boolean"
          },
          "TeamMemberDisplayPlannedUnits": {
            "type": "boolean",
            "description": "The indicator that determines whether or not a team member can display planned units on activities and assignments."
          },
          "TeamMemberDisplayTotalFloatFlag": {
            "type": "boolean"
          },
          "TeamMemberIncludePrimaryResources": {
            "type": "boolean",
            "description": "Primary Resource Flag determines if Team Members status their activities as Primary Resources too."
          },
          "TeamMemberReadOnlyActivityFields": {
            "type": "string"
          },
          "TeamMemberResourceAssignmentFields": {
            "type": "string"
          },
          "TeamMemberStepUDFViewableFields": {
            "type": "string"
          },
          "TeamMemberStepsAddDeletable": {
            "type": "boolean",
            "description": "The flag which determines whether steps can be added or deleted in P6 Team Member interfaces."
          },
          "TeamMemberViewableFields": {
            "type": "string",
            "description": "The list of fields that are viewable by a team member using the P6 Team Member interfaces."
          },
          "TotalBenefitPlan": {
            "type": "number",
            "description": "The sum of the monthly benefit plan.",
            "format": "double"
          },
          "TotalBenefitPlanTally": {
            "type": "number",
            "description": "The sum of the monthly benefit plan tally.",
            "format": "double"
          },
          "TotalFunding": {
            "type": "number",
            "description": "The total amount of funding contributed to the project by your funding sources.",
            "format": "double"
          },
          "TotalSpendingPlan": {
            "type": "number",
            "description": "The sum of the monthly spending plan.",
            "format": "double"
          },
          "TotalSpendingPlanTally": {
            "type": "number",
            "description": "The sum of the monthly spending plan tally.",
            "format": "double"
          },
          "UnallocatedBudget": {
            "type": "number",
            "description": "The total current budget minus the distributed current budget.",
            "format": "double"
          },
          "UndistributedCurrentVariance": {
            "type": "number",
            "description": "The total spending plan minus the total spending plan tally.",
            "format": "double"
          },
          "UnifierCBSTasksOnlyFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether P6 will only send activities with CBS codes assigned."
          },
          "UnifierDataMappingName": {
            "type": "string",
            "description": "The Unifier data mapping name."
          },
          "UnifierDeleteActivitiesFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether activities removed from the P6 Schedule are deleted in Unifier."
          },
          "UnifierEnabledFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether P6 integration with Unifier schedule sheet is enabled."
          },
          "UnifierProjectName": {
            "type": "string",
            "description": "Field to specify Unifier project number."
          },
          "UnifierProjectNumber": {
            "type": "string",
            "description": "The Unifier project number."
          },
          "UnifierScheduleSheetName": {
            "type": "string",
            "description": "The Unifier schedule sheet name."
          },
          "UseExpectedFinishDates": {
            "type": "boolean",
            "description": "The option used for setting activity finish dates as the expected finish dates when scheduling projects."
          },
          "UseProjectBaselineForEarnedValue": {
            "type": "boolean",
            "description": "The flag that indicates whether earned value should be calculated based on the project baseline or the user's primary baseline. This setting only affects Project Management, not the Integration API or Primavera's Web application."
          },
          "WBSCodeSeparator": {
            "type": "string",
            "description": "The character used to separate the concatenated code fields for the project's WBS tree."
          },
          "WBSHierarchyLevels": {
            "type": "integer",
            "description": "The option used for specifying WBS Hierachy sync level",
            "format": "int32"
          },
          "WBSMilestonePercentComplete": {
            "type": "number",
            "description": "The WBSMilestonePercentComplete field determines whether to calculate earned value by defining milestones at the WBS level and assigning a level of significance or weight to each of them. As progress occurs and you mark each milestone complete, the WBS element's performance percent complete is calculated based on the weight of the milestone.",
            "format": "double"
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The internal WBS ID of the project. This ID cannot be used to load a WBS object directly.",
            "format": "int32"
          },
          "WebSiteRootDirectory": {
            "type": "string",
            "description": "The root directory for storing project Web site files before they are published to the Web server."
          },
          "WebSiteURL": {
            "type": "string",
            "description": "The project Web site URL, which is the Web address of the project's website."
          },
          "External": {
            "type": "boolean"
          }
        },
        "description": "Project Entity"
      },
      "ReadWBSExpenseSpreadResponse": {
        "title": "ReadWBSExpenseSpreadResponse",
        "type": "object",
        "properties": {
          "WBSCode": {
            "type": "string"
          },
          "WBSObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ExpenseCategoryName": {
            "type": "string"
          },
          "ExpenseCategoryObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseSpreadPeriod"
            }
          }
        },
        "description": "ReadWBSExpenseSpreadResponse Entity"
      },
      "SummarizeEPS": {
        "title": "SummarizeProject",
        "type": "object",
        "properties": {
          "ObjectId": {
            "type": "integer",
            "description": "The unique identifier of the EPS you want to summarize.",
            "format": "int32"
          },
          "Timeout": {
            "type": "integer",
            "description": "The amount of time in seconds that the server side will wait for the job service to complete before it returns with the current job status. The Timeout parameter is optional. When this operation is used without specifying a Timeout parameter or with a Timeout of 0, the server immediately returns without waiting for the job service to complete.",
            "format": "int32"
          }
        },
        "description": "SummarizeProject Entity"
      },
      "ActivityOwner": {
        "title": "ActivityOwner",
        "required": ["ActivityObjectId", "UserObjectId"],
        "type": "object",
        "properties": {
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated activity.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this activity owner was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this activity owner."
          },
          "IsActivityFlagged": {
            "type": "boolean",
            "description": "The flag that indicates whether the owner of the activity has flagged the activity as important."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this activity owner was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this activity owner."
          },
          "ProjectFlag": {
            "type": "string",
            "description": "Indicates if this WBS node is a Project/EPS node."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ProjectProjectFlag": {
            "type": "string",
            "description": "Indicates if this Project/EPS node is a Project or EPS."
          },
          "StatusCode": {
            "type": "string",
            "description": "The project status, either 'Planned', 'Active', 'Inactive', 'What-If', 'Requested', or 'Template'."
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user.",
            "format": "int32"
          }
        },
        "description": "ActivityOwner Entity"
      },
      "ActivityCodeAssignmentExport": {
        "title": "ActivityCodeAssignment",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean"
          }
        },
        "description": "ActivityCodeAssignment Entity"
      },
      "ResourceRoleExport": {
        "title": "ResourceRole",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ResourceRole Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ResourceRole Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "PROFICIENCY",
                "RESOURCE_ID",
                "RESOURCE_NAME",
                "RESOURCE_OBJECT_ID",
                "ROLE_ID",
                "ROLE_NAME",
                "ROLE_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ResourceRole Entity"
      },
      "ResourceAssignmentPeriodActual": {
        "title": "ResourceAssignmentPeriodActual",
        "required": [
          "ActualCost",
          "ActualUnits",
          "FinancialPeriodObjectId",
          "ResourceAssignmentObjectId"
        ],
        "type": "object",
        "properties": {
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated activity.",
            "format": "int32"
          },
          "ActualCost": {
            "type": "number",
            "description": "The actual cost on this resource assignment during a financial period.",
            "format": "double"
          },
          "ActualUnits": {
            "type": "number",
            "description": "The actual units on this resource assignment during a financial period.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this resource assignment period actual was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this resource assignment period actual."
          },
          "FinancialPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated financial period.",
            "format": "int32"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this resource assignment period actual was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this resource assignment period actual."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ResourceAssignmentObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource assignment.",
            "format": "int32"
          },
          "ResourceType": {
            "type": "string",
            "description": "The resource type: \"Labor\", \"Nonlabor\", or \"Material\"."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS for the associated activity.",
            "format": "int32"
          }
        },
        "description": "ResourceAssignmentPeriodActual Entity"
      },
      "WBSExport": {
        "title": "WBS",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for WBS Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for WBS Business Object",
              "enum": [
                "ANTICIPATED_FINISH_DATE",
                "ANTICIPATED_START_DATE",
                "CODE",
                "CONTAINS_SUMMARY_DATA",
                "CREATE_DATE",
                "CREATE_USER",
                "CURRENT_BUDGET",
                "CURRENT_VARIANCE",
                "DISTRIBUTED_CURRENT_BUDGET",
                "EARNED_VALUE_COMPUTE_TYPE",
                "EARNED_VALUE_ETC_COMPUTE_TYPE",
                "EARNED_VALUE_ETC_USER_VALUE",
                "EARNED_VALUE_USER_PERCENT",
                "ESTIMATED_WEIGHT",
                "FINISH_DATE",
                "FORECAST_FINISH_DATE",
                "FORECAST_START_DATE",
                "GUID",
                "INDEPENDENT_ETC_LABOR_UNITS",
                "INDEPENDENT_ETC_TOTAL_COST",
                "INTEGRATED_TYPE",
                "INTEGRATED_WBS",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "IS_WORK_PACKAGE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBS_NAME",
                "OBS_OBJECT_ID",
                "OBJECT_ID",
                "ORIGINAL_BUDGET",
                "PARENT_OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "PROPOSED_BUDGET",
                "ROLLED_UP_FINISH_DATE",
                "ROLLED_UP_START_DATE",
                "SEQUENCE_NUMBER",
                "START_DATE",
                "STATUS",
                "STATUS_REVIEWER_NAME",
                "STATUS_REVIEWER_OBJECT_ID",
                "SUMMARY_ACCOUNTING_VARIANCE_BY_COST",
                "SUMMARY_ACCOUNTING_VARIANCE_BY_LABOR_UNITS",
                "SUMMARY_ACTIVITY_COUNT",
                "SUMMARY_ACTUAL_DURATION",
                "SUMMARY_ACTUAL_EXPENSE_COST",
                "SUMMARY_ACTUAL_FINISH_DATE",
                "SUMMARY_ACTUAL_LABOR_COST",
                "SUMMARY_ACTUAL_LABOR_UNITS",
                "SUMMARY_ACTUAL_MATERIAL_COST",
                "SUMMARY_ACTUAL_NON_LABOR_COST",
                "SUMMARY_ACTUAL_NON_LABOR_UNITS",
                "SUMMARY_ACTUAL_START_DATE",
                "SUMMARY_ACTUAL_THIS_PERIOD_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_LABOR_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_LABOR_UNITS",
                "SUMMARY_ACTUAL_THIS_PERIOD_MATERIAL_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_NON_LABOR_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_NON_LABOR_UNITS",
                "SUMMARY_ACTUAL_TOTAL_COST",
                "SUMMARY_ACTUAL_VALUE_BY_COST",
                "SUMMARY_ACTUAL_VALUE_BY_LABOR_UNITS",
                "SUMMARY_AT_COMPLETION_DURATION",
                "SUMMARY_AT_COMPLETION_EXPENSE_COST",
                "SUMMARY_AT_COMPLETION_LABOR_COST",
                "SUMMARY_AT_COMPLETION_LABOR_UNITS",
                "SUMMARY_AT_COMPLETION_MATERIAL_COST",
                "SUMMARY_AT_COMPLETION_NON_LABOR_COST",
                "SUMMARY_AT_COMPLETION_NON_LABOR_UNITS",
                "SUMMARY_AT_COMPLETION_TOTAL_COST",
                "SUMMARY_AT_COMPLETION_TOTAL_COST_VARIANCE",
                "SUMMARY_BASELINE_COMPLETED_ACTIVITY_COUNT",
                "SUMMARY_BASELINE_DURATION",
                "SUMMARY_BASELINE_EXPENSE_COST",
                "SUMMARY_BASELINE_FINISH_DATE",
                "SUMMARY_BASELINE_IN_PROGRESS_ACTIVITY_COUNT",
                "SUMMARY_BASELINE_LABOR_COST",
                "SUMMARY_BASELINE_LABOR_UNITS",
                "SUMMARY_BASELINE_MATERIAL_COST",
                "SUMMARY_BASELINE_NON_LABOR_COST",
                "SUMMARY_BASELINE_NON_LABOR_UNITS",
                "SUMMARY_BASELINE_NOT_STARTED_ACTIVITY_COUNT",
                "SUMMARY_BASELINE_START_DATE",
                "SUMMARY_BASELINE_TOTAL_COST",
                "SUMMARY_BUDGET_AT_COMPLETION_BY_COST",
                "SUMMARY_BUDGET_AT_COMPLETION_BY_LABOR_UNITS",
                "SUMMARY_COMPLETED_ACTIVITY_COUNT",
                "SUMMARY_COST_PERCENT_COMPLETE",
                "SUMMARY_COST_PERCENT_OF_PLANNED",
                "SUMMARY_COST_PERFORMANCE_INDEX_BY_COST",
                "SUMMARY_COST_PERFORMANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_COST_VARIANCE_BY_COST",
                "SUMMARY_COST_VARIANCE_BY_LABOR_UNITS",
                "SUMMARY_COST_VARIANCE_INDEX",
                "SUMMARY_COST_VARIANCE_INDEX_BY_COST",
                "SUMMARY_COST_VARIANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_DURATION_PERCENT_COMPLETE",
                "SUMMARY_DURATION_PERCENT_OF_PLANNED",
                "SUMMARY_DURATION_VARIANCE",
                "SUMMARY_EARNED_VALUE_BY_COST",
                "SUMMARY_EARNED_VALUE_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_AT_COMPLETION_BY_COST",
                "SUMMARY_ESTIMATE_AT_COMPLETION_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_AT_COMPLETION_HIGH_PERCENT_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_AT_COMPLETION_LOW_PERCENT_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_TO_COMPLETE_BY_COST",
                "SUMMARY_ESTIMATE_TO_COMPLETE_BY_LABOR_UNITS",
                "SUMMARY_EXPENSE_COST_PERCENT_COMPLETE",
                "SUMMARY_EXPENSE_COST_VARIANCE",
                "SUMMARY_FINISH_DATE_VARIANCE",
                "SUMMARY_IN_PROGRESS_ACTIVITY_COUNT",
                "SUMMARY_LABOR_COST_PERCENT_COMPLETE",
                "SUMMARY_LABOR_COST_VARIANCE",
                "SUMMARY_LABOR_UNITS_PERCENT_COMPLETE",
                "SUMMARY_LABOR_UNITS_VARIANCE",
                "SUMMARY_MATERIAL_COST_PERCENT_COMPLETE",
                "SUMMARY_MATERIAL_COST_VARIANCE",
                "SUMMARY_NON_LABOR_COST_PERCENT_COMPLETE",
                "SUMMARY_NON_LABOR_COST_VARIANCE",
                "SUMMARY_NON_LABOR_UNITS_PERCENT_COMPLETE",
                "SUMMARY_NON_LABOR_UNITS_VARIANCE",
                "SUMMARY_NOT_STARTED_ACTIVITY_COUNT",
                "SUMMARY_PERFORMANCE_PERCENT_COMPLETE_BY_COST",
                "SUMMARY_PERFORMANCE_PERCENT_COMPLETE_BY_LABOR_UNITS",
                "SUMMARY_PLANNED_COST",
                "SUMMARY_PLANNED_DURATION",
                "SUMMARY_PLANNED_EXPENSE_COST",
                "SUMMARY_PLANNED_FINISH_DATE",
                "SUMMARY_PLANNED_LABOR_COST",
                "SUMMARY_PLANNED_LABOR_UNITS",
                "SUMMARY_PLANNED_MATERIAL_COST",
                "SUMMARY_PLANNED_NON_LABOR_COST",
                "SUMMARY_PLANNED_NON_LABOR_UNITS",
                "SUMMARY_PLANNED_START_DATE",
                "SUMMARY_PLANNED_VALUE_BY_COST",
                "SUMMARY_PLANNED_VALUE_BY_LABOR_UNITS",
                "SUMMARY_PROGRESS_FINISH_DATE",
                "SUMMARY_REMAINING_DURATION",
                "SUMMARY_REMAINING_EXPENSE_COST",
                "SUMMARY_REMAINING_FINISH_DATE",
                "SUMMARY_REMAINING_LABOR_COST",
                "SUMMARY_REMAINING_LABOR_UNITS",
                "SUMMARY_REMAINING_MATERIAL_COST",
                "SUMMARY_REMAINING_NON_LABOR_COST",
                "SUMMARY_REMAINING_NON_LABOR_UNITS",
                "SUMMARY_REMAINING_START_DATE",
                "SUMMARY_REMAINING_TOTAL_COST",
                "SUMMARY_SCHEDULE_PERCENT_COMPLETE",
                "SUMMARY_SCHEDULE_PERCENT_COMPLETE_BY_LABOR_UNITS",
                "SUMMARY_SCHEDULE_PERFORMANCE_INDEX_BY_COST",
                "SUMMARY_SCHEDULE_PERFORMANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_SCHEDULE_VARIANCE_BY_COST",
                "SUMMARY_SCHEDULE_VARIANCE_BY_LABOR_UNITS",
                "SUMMARY_SCHEDULE_VARIANCE_INDEX",
                "SUMMARY_SCHEDULE_VARIANCE_INDEX_BY_COST",
                "SUMMARY_SCHEDULE_VARIANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_START_DATE_VARIANCE",
                "SUMMARY_TO_COMPLETE_PERFORMANCE_INDEX_BY_COST",
                "SUMMARY_TOTAL_COST_VARIANCE",
                "SUMMARY_TOTAL_FLOAT",
                "SUMMARY_UNITS_PERCENT_COMPLETE",
                "SUMMARY_VARIANCE_AT_COMPLETION_BY_LABOR_UNITS",
                "TOTAL_BENEFIT_PLAN",
                "TOTAL_BENEFIT_PLAN_TALLY",
                "TOTAL_SPENDING_PLAN",
                "TOTAL_SPENDING_PLAN_TALLY",
                "UNALLOCATED_BUDGET",
                "UNDISTRIBUTED_CURRENT_VARIANCE",
                "WBS_CATEGORY_OBJECT_ID",
                "WBS_MILESTONE_PERCENT_COMPLETE"
              ]
            }
          }
        },
        "description": "WBS Entity"
      },
      "ReadProjectResourceSpreadResponse": {
        "title": "ReadProjectResourceSpreadResponse",
        "type": "object",
        "properties": {
          "ProjectId": {
            "type": "string"
          },
          "ProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ResourceId": {
            "type": "string"
          },
          "ResourceObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRoleSpreadPeriod"
            }
          }
        },
        "description": "ReadProjectResourceSpreadResponse Entity"
      },
      "ProjectResourceCategory": {
        "title": "ProjectResourceCategory",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this project resource category was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project resource category."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this document status was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project resource category."
          },
          "Name": {
            "type": "string",
            "description": "The name of the project resource category."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          }
        },
        "description": "ProjectResourceCategory Entity"
      },
      "ReadActivitySpreadResponse": {
        "title": "ReadWBSSpreadResponse",
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "string"
          },
          "ActivityObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivitySpreadPeriod"
            }
          }
        },
        "description": "ReadWBSSpreadResponse Entity"
      },
      "ProjectBudgetChangeLog": {
        "title": "ProjectBudgetChangeLog",
        "required": ["ChangeNumber", "ProjectObjectId", "WBSObjectId"],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "The amount of budget change.",
            "format": "double"
          },
          "ChangeNumber": {
            "type": "string",
            "description": "The change number that is automatically incremented according to when changes are added. This can be changed to any number."
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this log of budget changes."
          },
          "Date": {
            "type": "string",
            "description": "The date of this budget change entry.",
            "format": "date-time"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this log of budget changes was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this log of budget changes."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "Reason": {
            "type": "string",
            "description": "The description of the reason for the budget change request."
          },
          "Responsible": {
            "type": "string",
            "description": "The person responsible for the change."
          },
          "Status": {
            "type": "string",
            "description": "The status of this budget change request. Possible values are 'Pending', 'Approved', and 'Not Approved'."
          },
          "WBSCode": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes."
          },
          "WBSName": {
            "type": "string",
            "description": "The name of the WBS element."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS element to which the budget change log applies.",
            "format": "int32"
          }
        },
        "description": "ProjectBudgetChangeLog Entity"
      },
      "ProjectSpendingPlan": {
        "title": "ProjectSpendingPlan",
        "required": ["Date", "ProjectObjectId", "WBSObjectId"],
        "type": "object",
        "properties": {
          "BenefitPlan": {
            "type": "number",
            "description": "The editable monthly profit portion for each month for the project.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this spending plan was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this spending plan."
          },
          "Date": {
            "type": "string",
            "description": "The start of a spending/benefit plan time period for the project.",
            "format": "date-time"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this spending plan was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this spending plan."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The Project short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project for this project spending plan.",
            "format": "int32"
          },
          "SpendingPlan": {
            "type": "number",
            "description": "The editable total monthly expenditure for the project.",
            "format": "double"
          },
          "WBSCode": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes."
          },
          "WBSName": {
            "type": "string",
            "description": "The name of the WBS element."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated WBS for this project spending plan.",
            "format": "int32"
          }
        },
        "description": "ProjectSpendingPlan Entity"
      },
      "EPSNote": {
        "title": "EPSNote",
        "required": ["EPSObjectId", "NotebookTopicObjectId"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this EPS Note was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this EPS Note."
          },
          "EPSId": {
            "type": "string",
            "description": "The short code assigned to the associated EPS."
          },
          "EPSName": {
            "type": "string",
            "description": "The name of the EPS element associated with this note."
          },
          "EPSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated EPS.",
            "format": "int32"
          },
          "Note": {
            "type": "string",
            "description": "The information that is associated with the notebook topic."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this EPS Note was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this EPS Note."
          },
          "NotebookTopicName": {
            "type": "string",
            "description": "The name of the associated notebook topic."
          },
          "NotebookTopicObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated notebook topic.",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "RawTextNote": {
            "type": "string",
            "description": "The information that is associated with the notebook topic, without any HTML."
          }
        },
        "description": "EPSNote Entity"
      },
      "ActivityExport": {
        "title": "Activity",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "ActivityFieldType: List of Fields for Activity Business Object",
            "items": {
              "type": "string",
              "description": "ActivityFieldType: List of Fields for Activity Business Object",
              "enum": [
                "ACCOUNTING_VARIANCE",
                "ACCOUNTING_VARIANCE_LABOR_UNITS",
                "ACTIVITY_OWNER_USER_ID",
                "ACTUAL_DURATION",
                "ACTUAL_EXPENSE_COST",
                "ACTUAL_FINISH_DATE",
                "ACTUAL_LABOR_COST",
                "ACTUAL_LABOR_UNITS",
                "ACTUAL_MATERIAL_COST",
                "ACTUAL_NON_LABOR_COST",
                "ACTUAL_NON_LABOR_UNITS",
                "ACTUAL_START_DATE",
                "ACTUAL_THIS_PERIOD_LABOR_COST",
                "ACTUAL_THIS_PERIOD_LABOR_UNITS",
                "ACTUAL_THIS_PERIOD_MATERIAL_COST",
                "ACTUAL_THIS_PERIOD_NON_LABOR_COST",
                "ACTUAL_THIS_PERIOD_NON_LABOR_UNITS",
                "ACTUAL_TOTAL_COST",
                "ACTUAL_TOTAL_UNITS",
                "AT_COMPLETION_DURATION",
                "AT_COMPLETION_EXPENSE_COST",
                "AT_COMPLETION_LABOR_COST",
                "AT_COMPLETION_LABOR_UNITS",
                "AT_COMPLETION_LABOR_UNITS_VARIANCE",
                "AT_COMPLETION_MATERIAL_COST",
                "AT_COMPLETION_NON_LABOR_COST",
                "AT_COMPLETION_NON_LABOR_UNITS",
                "AT_COMPLETION_TOTAL_COST",
                "AT_COMPLETION_TOTAL_UNITS",
                "AT_COMPLETION_VARIANCE",
                "AUTO_COMPUTE_ACTUALS",
                "BASELINE_1_DURATION",
                "BASELINE_1_FINISH_DATE",
                "BASELINE_1_PLANNED_DURATION",
                "BASELINE_1_PLANNED_EXPENSE_COST",
                "BASELINE_1_PLANNED_LABOR_COST",
                "BASELINE_1_PLANNED_LABOR_UNITS",
                "BASELINE_1_PLANNED_MATERIAL_COST",
                "BASELINE_1_PLANNED_NON_LABOR_COST",
                "BASELINE_1_PLANNED_NON_LABOR_UNITS",
                "BASELINE_1_PLANNED_TOTAL_COST",
                "BASELINE_1_START_DATE",
                "BASELINE_2_DURATION",
                "BASELINE_2_FINISH_DATE",
                "BASELINE_2_PLANNED_DURATION",
                "BASELINE_2_PLANNED_EXPENSE_COST",
                "BASELINE_2_PLANNED_LABOR_COST",
                "BASELINE_2_PLANNED_LABOR_UNITS",
                "BASELINE_2_PLANNED_MATERIAL_COST",
                "BASELINE_2_PLANNED_NON_LABOR_COST",
                "BASELINE_2_PLANNED_NON_LABOR_UNITS",
                "BASELINE_2_PLANNED_TOTAL_COST",
                "BASELINE_2_START_DATE",
                "BASELINE_3_DURATION",
                "BASELINE_3_FINISH_DATE",
                "BASELINE_3_PLANNED_DURATION",
                "BASELINE_3_PLANNED_EXPENSE_COST",
                "BASELINE_3_PLANNED_LABOR_COST",
                "BASELINE_3_PLANNED_LABOR_UNITS",
                "BASELINE_3_PLANNED_MATERIAL_COST",
                "BASELINE_3_PLANNED_NON_LABOR_COST",
                "BASELINE_3_PLANNED_NON_LABOR_UNITS",
                "BASELINE_3_PLANNED_TOTAL_COST",
                "BASELINE_3_START_DATE",
                "BASELINE_DURATION",
                "BASELINE_FINISH_DATE",
                "BASELINE_PLANNED_DURATION",
                "BASELINE_PLANNED_EXPENSE_COST",
                "BASELINE_PLANNED_LABOR_COST",
                "BASELINE_PLANNED_LABOR_UNITS",
                "BASELINE_PLANNED_MATERIAL_COST",
                "BASELINE_PLANNED_NON_LABOR_COST",
                "BASELINE_PLANNED_NON_LABOR_UNITS",
                "BASELINE_PLANNED_TOTAL_COST",
                "BASELINE_START_DATE",
                "BUDGET_AT_COMPLETION",
                "CBS_CODE",
                "CBS_ID",
                "CBS_OBJECT_ID",
                "CALENDAR_NAME",
                "CALENDAR_OBJECT_ID",
                "COST_PERCENT_COMPLETE",
                "COST_PERCENT_OF_PLANNED",
                "COST_PERFORMANCE_INDEX",
                "COST_PERFORMANCE_INDEX_LABOR_UNITS",
                "COST_VARIANCE",
                "COST_VARIANCE_INDEX",
                "COST_VARIANCE_INDEX_LABOR_UNITS",
                "COST_VARIANCE_LABOR_UNITS",
                "CREATE_DATE",
                "CREATE_USER",
                "DATA_DATE",
                "DURATION_1_VARIANCE",
                "DURATION_2_VARIANCE",
                "DURATION_3_VARIANCE",
                "DURATION_PERCENT_COMPLETE",
                "DURATION_PERCENT_OF_PLANNED",
                "DURATION_TYPE",
                "DURATION_VARIANCE",
                "EARLY_FINISH_DATE",
                "EARLY_START_DATE",
                "EARNED_VALUE_COST",
                "EARNED_VALUE_LABOR_UNITS",
                "ESTIMATE_AT_COMPLETION_COST",
                "ESTIMATE_AT_COMPLETION_LABOR_UNITS",
                "ESTIMATE_TO_COMPLETE",
                "ESTIMATE_TO_COMPLETE_LABOR_UNITS",
                "ESTIMATED_WEIGHT",
                "EXPECTED_FINISH_DATE",
                "EXPENSE_COST_1_VARIANCE",
                "EXPENSE_COST_2_VARIANCE",
                "EXPENSE_COST_3_VARIANCE",
                "EXPENSE_COST_PERCENT_COMPLETE",
                "EXPENSE_COST_VARIANCE",
                "EXTERNAL_EARLY_START_DATE",
                "EXTERNAL_LATE_FINISH_DATE",
                "FEEDBACK",
                "FINANCIAL_PERIOD_TMPL_ID",
                "FINISH_DATE",
                "FINISH_DATE_1_VARIANCE",
                "FINISH_DATE_2_VARIANCE",
                "FINISH_DATE_3_VARIANCE",
                "FINISH_DATE_VARIANCE",
                "FLOAT_PATH",
                "FLOAT_PATH_ORDER",
                "FREE_FLOAT",
                "GUID",
                "HAS_FUTURE_BUCKET_DATA",
                "ID",
                "IS_BASELINE",
                "IS_CRITICAL",
                "IS_LONGEST_PATH",
                "IS_NEW_FEEDBACK",
                "IS_STARRED",
                "IS_TEMPLATE",
                "IS_WORK_PACKAGE",
                "LABOR_COST_1_VARIANCE",
                "LABOR_COST_2_VARIANCE",
                "LABOR_COST_3_VARIANCE",
                "LABOR_COST_PERCENT_COMPLETE",
                "LABOR_COST_VARIANCE",
                "LABOR_UNITS_1_VARIANCE",
                "LABOR_UNITS_2_VARIANCE",
                "LABOR_UNITS_3_VARIANCE",
                "LABOR_UNITS_PERCENT_COMPLETE",
                "LABOR_UNITS_VARIANCE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LATE_FINISH_DATE",
                "LATE_START_DATE",
                "LEVELING_PRIORITY",
                "LOCATION_NAME",
                "LOCATION_OBJECT_ID",
                "MATERIAL_COST_1_VARIANCE",
                "MATERIAL_COST_2_VARIANCE",
                "MATERIAL_COST_3_VARIANCE",
                "MATERIAL_COST_PERCENT_COMPLETE",
                "MATERIAL_COST_VARIANCE",
                "MAXIMUM_DURATION",
                "MINIMUM_DURATION",
                "MOST_LIKELY_DURATION",
                "NAME",
                "NON_LABOR_COST_1_VARIANCE",
                "NON_LABOR_COST_2_VARIANCE",
                "NON_LABOR_COST_3_VARIANCE",
                "NON_LABOR_COST_PERCENT_COMPLETE",
                "NON_LABOR_COST_VARIANCE",
                "NON_LABOR_UNITS_1_VARIANCE",
                "NON_LABOR_UNITS_2_VARIANCE",
                "NON_LABOR_UNITS_3_VARIANCE",
                "NON_LABOR_UNITS_PERCENT_COMPLETE",
                "NON_LABOR_UNITS_VARIANCE",
                "NOTES_TO_RESOURCES",
                "OBJECT_ID",
                "OWNER_ID_ARRAY",
                "OWNER_NAMES_ARRAY",
                "PERCENT_COMPLETE",
                "PERCENT_COMPLETE_TYPE",
                "PERFORMANCE_PERCENT_COMPLETE",
                "PERFORMANCE_PERCENT_COMPLETE_BY_LABOR_UNITS",
                "PHYSICAL_PERCENT_COMPLETE",
                "PLANNED_DURATION",
                "PLANNED_EXPENSE_COST",
                "PLANNED_FINISH_DATE",
                "PLANNED_LABOR_COST",
                "PLANNED_LABOR_UNITS",
                "PLANNED_MATERIAL_COST",
                "PLANNED_NON_LABOR_COST",
                "PLANNED_NON_LABOR_UNITS",
                "PLANNED_START_DATE",
                "PLANNED_TOTAL_COST",
                "PLANNED_TOTAL_UNITS",
                "PLANNED_VALUE_COST",
                "PLANNED_VALUE_LABOR_UNITS",
                "POST_RESP_CRITICALITY_INDEX",
                "POST_RESPONSE_PESSIMISTIC_FINISH",
                "POST_RESPONSE_PESSIMISTIC_START",
                "PRE_RESP_CRITICALITY_INDEX",
                "PRE_RESPONSE_PESSIMISTIC_FINISH",
                "PRE_RESPONSE_PESSIMISTIC_START",
                "PRIMARY_CONSTRAINT_DATE",
                "PRIMARY_CONSTRAINT_TYPE",
                "PRIMARY_RESOURCE_ID",
                "PRIMARY_RESOURCE_NAME",
                "PRIMARY_RESOURCE_OBJECT_ID",
                "PROJECT_FLAG",
                "PROJECT_ID",
                "PROJECT_NAME",
                "PROJECT_OBJECT_ID",
                "PROJECT_PROJECT_FLAG",
                "REMAINING_DURATION",
                "REMAINING_EARLY_FINISH_DATE",
                "REMAINING_EARLY_START_DATE",
                "REMAINING_EXPENSE_COST",
                "REMAINING_FLOAT",
                "REMAINING_LABOR_COST",
                "REMAINING_LABOR_UNITS",
                "REMAINING_LATE_FINISH_DATE",
                "REMAINING_LATE_START_DATE",
                "REMAINING_MATERIAL_COST",
                "REMAINING_NON_LABOR_COST",
                "REMAINING_NON_LABOR_UNITS",
                "REMAINING_TOTAL_COST",
                "REMAINING_TOTAL_UNITS",
                "RESUME_DATE",
                "REVIEW_FINISH_DATE",
                "REVIEW_REQUIRED",
                "REVIEW_STATUS",
                "SCHEDULE_PERCENT_COMPLETE",
                "SCHEDULE_PERFORMANCE_INDEX",
                "SCHEDULE_PERFORMANCE_INDEX_LABOR_UNITS",
                "SCHEDULE_VARIANCE",
                "SCHEDULE_VARIANCE_INDEX",
                "SCHEDULE_VARIANCE_INDEX_LABOR_UNITS",
                "SCHEDULE_VARIANCE_LABOR_UNITS",
                "SCOPE_PERCENT_COMPLETE",
                "SECONDARY_CONSTRAINT_DATE",
                "SECONDARY_CONSTRAINT_TYPE",
                "START_DATE",
                "START_DATE_1_VARIANCE",
                "START_DATE_2_VARIANCE",
                "START_DATE_3_VARIANCE",
                "START_DATE_VARIANCE",
                "STATUS",
                "STATUS_CODE",
                "SUSPEND_DATE",
                "TASK_STATUS_COMPLETION",
                "TASK_STATUS_DATES",
                "TASK_STATUS_INDICATOR",
                "TO_COMPLETE_PERFORMANCE_INDEX",
                "TOTAL_COST_1_VARIANCE",
                "TOTAL_COST_2_VARIANCE",
                "TOTAL_COST_3_VARIANCE",
                "TOTAL_COST_VARIANCE",
                "TOTAL_FLOAT",
                "TOTAL_PAST_PERIOD_EARNED_VALUE_COST_BCWP",
                "TOTAL_PAST_PERIOD_EARNED_VALUE_LABOR_UNITS",
                "TOTAL_PAST_PERIOD_EXPENSE_COST",
                "TOTAL_PAST_PERIOD_LABOR_COST",
                "TOTAL_PAST_PERIOD_LABOR_UNITS",
                "TOTAL_PAST_PERIOD_MATERIAL_COST",
                "TOTAL_PAST_PERIOD_NON_LABOR_COST",
                "TOTAL_PAST_PERIOD_NON_LABOR_UNITS",
                "TOTAL_PAST_PERIOD_PLANNED_VALUE_COST",
                "TOTAL_PAST_PERIOD_PLANNED_VALUE_LABOR_UNITS",
                "TYPE",
                "UNITS_PERCENT_COMPLETE",
                "UNREAD_COMMENT_COUNT",
                "WBS_CODE",
                "WBS_NAME",
                "WBS_NAME_PATH",
                "WBS_OBJECT_ID",
                "WBS_PATH",
                "WORK_PACKAGE_ID",
                "WORK_PACKAGE_NAME"
              ]
            }
          }
        },
        "description": "Activity Export Entity"
      },
      "RiskMatrixThresholdExport": {
        "title": "RiskMatrixThreshold",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskMatrixThreshold Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskMatrixThreshold Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "RISK_MATRIX_NAME",
                "RISK_MATRIX_OBJECT_ID",
                "RISK_THRESHOLD_NAME",
                "RISK_THRESHOLD_OBJECT_ID"
              ]
            }
          }
        },
        "description": "RiskMatrixThreshold Entity"
      },
      "RiskResponseActionImpact": {
        "title": "RiskResponseActionImpact",
        "required": [
          "RiskResponseActionObjectId",
          "RiskThresholdLevelObjectId"
        ],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this risk response action was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the risk response action."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk response action was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the risk response action."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short name of the associated project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RiskId": {
            "type": "string",
            "description": "The unique identifier of the risk or risks assigned to this activity."
          },
          "RiskObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "RiskResponseActionId": {
            "type": "string",
            "description": "The ID of the RiskResponseAction."
          },
          "RiskResponseActionName": {
            "type": "string",
            "description": "The name of the RiskResponseAction."
          },
          "RiskResponseActionObjectId": {
            "type": "integer",
            "description": "The unique ID of the RiskResponseAction.",
            "format": "int32"
          },
          "RiskThresholdLevelCode": {
            "type": "string",
            "description": "The 10 character short name for the threshold level. Must be unique."
          },
          "RiskThresholdLevelName": {
            "type": "string",
            "description": "The 40 character name for the threshold level. Does not need to be unique."
          },
          "RiskThresholdLevelObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Threshold Level.",
            "format": "int32"
          },
          "RiskThresholdName": {
            "type": "string",
            "description": "The name of the associated risk score type."
          },
          "RiskThresholdObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Threshold.",
            "format": "int32"
          }
        },
        "description": "RiskResponseActionImpact Entity"
      },
      "RiskMatrixScoreExport": {
        "title": "RiskMatrixScore",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskMatrixScore Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskMatrixScore Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PROBABILITY_THRESHOLD_LEVEL",
                "RISK_MATRIX_NAME",
                "RISK_MATRIX_OBJECT_ID",
                "SEVERITY_1",
                "SEVERITY_1_LABEL",
                "SEVERITY_2",
                "SEVERITY_2_LABEL",
                "SEVERITY_3",
                "SEVERITY_3_LABEL",
                "SEVERITY_4",
                "SEVERITY_4_LABEL",
                "SEVERITY_5",
                "SEVERITY_5_LABEL",
                "SEVERITY_6",
                "SEVERITY_6_LABEL",
                "SEVERITY_7",
                "SEVERITY_7_LABEL",
                "SEVERITY_8",
                "SEVERITY_8_LABEL",
                "SEVERITY_9",
                "SEVERITY_9_LABEL"
              ]
            }
          }
        },
        "description": "RiskMatrixScore Entity"
      },
      "RiskResponseActionExport": {
        "title": "RiskResponseAction",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskResponseAction Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskResponseAction Business Object",
              "enum": [
                "ACTIVITY_ID",
                "ACTIVITY_NAME",
                "ACTIVITY_OBJECT_ID",
                "ACTUAL_COST",
                "CREATE_DATE",
                "CREATE_USER",
                "FINISH_DATE",
                "ID",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PLANNED_COST",
                "PLANNED_FINISH_DATE",
                "PLANNED_START_DATE",
                "PROJECT_ID",
                "PROJECT_NAME",
                "PROJECT_OBJECT_ID",
                "REMAINING_COST",
                "RESOURCE_ID",
                "RESOURCE_NAME",
                "RESOURCE_OBJECT_ID",
                "RISK_ID",
                "RISK_OBJECT_ID",
                "RISK_RESPONSE_PLAN_ID",
                "RISK_RESPONSE_PLAN_NAME",
                "RISK_RESPONSE_PLAN_OBJECT_ID",
                "SCORE",
                "SCORE_COLOR",
                "SCORE_TEXT",
                "START_DATE",
                "STATUS"
              ]
            }
          }
        },
        "description": "RiskResponseAction Entity"
      },
      "SendToUnifier": {
        "title": "SendToUnifier",
        "type": "object",
        "properties": {
          "ProjectObjectId": {
            "type": "array",
            "description": "The unique identifier of the project that you want to send to Primavera Unifier.",
            "items": {
              "type": "integer",
              "description": "The unique identifier of the project that you want to send to Primavera Unifier.",
              "format": "int32"
            }
          },
          "Timeout": {
            "type": "integer",
            "description": "The amount of time in seconds that the server side will wait for the job service to complete before it returns with the current job status. The Timeout parameter is optional. When this operation is used without specifying a Timeout parameter or with a Timeout of 0, the server immediately returns without waiting for the job service to complete.",
            "format": "int32"
          }
        },
        "description": "SendToUnifier Entity"
      },
      "Calendar": {
        "title": "Calendar",
        "required": ["Name", "Type"],
        "type": "object",
        "properties": {
          "BaseCalendarObjectId": {
            "type": "integer",
            "description": "The unique ID of the global calendar to which this calendar is linked. Any changes to the global calendar are automatically propagated to this calendar.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this calendar was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this calendar."
          },
          "HoursPerDay": {
            "type": "number",
            "description": "The number of work hours per day. This conversion factor is used for displaying time units and durations in the user's selected display formats.",
            "format": "double"
          },
          "HoursPerMonth": {
            "type": "number",
            "description": "The number of work hours per month. This conversion factor is used for displaying time units and durations in the user's selected display formats.",
            "format": "double"
          },
          "HoursPerWeek": {
            "type": "number",
            "description": "The number of work hours per week. This conversion factor is used for displaying time units and durations in the user's selected display formats.",
            "format": "double"
          },
          "HoursPerYear": {
            "type": "number",
            "description": "The number of work hours per year. This conversion factor is used for displaying time units and durations in the user's selected display formats.",
            "format": "double"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsDefault": {
            "type": "boolean",
            "description": "The flag that identifies the default global calendar (applies to global calendars only)."
          },
          "IsPersonal": {
            "type": "boolean",
            "description": "The flag indicating if this calendar is a personal calendar (applies to resource calendars only)."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this calendar was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this calendar."
          },
          "Name": {
            "type": "string",
            "description": "The name of the calendar."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The ID for the project for which this change request is associated."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "Type": {
            "type": "string",
            "description": "The calendar type - either 'Global', 'Resource', or 'Project'. 'Global' calendars can be assigned to projects and resources. 'Resource' calendars can be assigned only to resources. 'Project' calendars are specific to projects."
          },
          "StandardWorkWeek": {
            "$ref": "#/components/schemas/StandardWorkWeek"
          },
          "HolidayOrExceptions": {
            "$ref": "#/components/schemas/HolidayOrExceptions"
          }
        },
        "description": "Calendar Entity"
      },
      "ProjectCodeTypeExport": {
        "title": "ProjectCodeType",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectCodeType Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectCodeType Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "IS_SECURE_CODE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LENGTH",
                "MAX_CODE_VALUE_WEIGHT",
                "NAME",
                "OBJECT_ID",
                "SEQUENCE_NUMBER",
                "WEIGHT"
              ]
            }
          }
        },
        "description": "ProjectCodeType Entity"
      },
      "ActivityPeriodActual": {
        "title": "ActivityPeriodActual",
        "required": ["ActivityObjectId", "FinancialPeriodObjectId"],
        "type": "object",
        "properties": {
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated activity.",
            "format": "int32"
          },
          "ActualExpenseCost": {
            "type": "number",
            "description": "The actual expense cost on this activity during a financial period.",
            "format": "double"
          },
          "ActualLaborCost": {
            "type": "number",
            "description": "The actual labor cost on this activity during a financial period.",
            "format": "double"
          },
          "ActualLaborUnits": {
            "type": "number",
            "description": "The actual labor units on this activity during a financial period.",
            "format": "double"
          },
          "ActualMaterialCost": {
            "type": "number",
            "description": "The actual material cost on this activity during a financial period.",
            "format": "double"
          },
          "ActualNonLaborCost": {
            "type": "number",
            "description": "The actual nonlabor cost on this activity during a financial period.",
            "format": "double"
          },
          "ActualNonLaborUnits": {
            "type": "number",
            "description": "The actual nonlabor units on this activity during a financial period.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this activity period actual was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this activity period actual."
          },
          "EarnedValueCost": {
            "type": "number",
            "description": "The earned value cost on this activity during a financial period.",
            "format": "double"
          },
          "EarnedValueLaborUnits": {
            "type": "number",
            "description": "The earned value labor units on this activity during a financial period.",
            "format": "double"
          },
          "FinancialPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated financial period.",
            "format": "int32"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this activity period actual was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this activity period actual."
          },
          "PlannedValueCost": {
            "type": "number",
            "description": "The planned value cost on this activity during a financial period.",
            "format": "double"
          },
          "PlannedValueLaborUnits": {
            "type": "number",
            "description": "The planned value labor units on this activity during a financial period.",
            "format": "double"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS for the activity.",
            "format": "int32"
          }
        },
        "description": "ActivityPeriodActual Entity"
      },
      "ResourceRateExport": {
        "title": "ResourceRate",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ResourceRate Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ResourceRate Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "EFFECTIVE_DATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "MAX_UNITS_PER_TIME",
                "OBJECT_ID",
                "PRICE_PER_UNIT",
                "PRICE_PER_UNIT_2",
                "PRICE_PER_UNIT_3",
                "PRICE_PER_UNIT_4",
                "PRICE_PER_UNIT_5",
                "RESOURCE_ID",
                "RESOURCE_NAME",
                "RESOURCE_OBJECT_ID",
                "SHIFT_PERIOD_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ResourceRate Entity"
      },
      "WorkTime": {
        "type": "object",
        "properties": {
          "Finish": {
            "type": "string",
            "format": "date-time"
          },
          "Start": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateUserOBSResponse": {
        "title": "CreateUserOBSResponse",
        "type": "object",
        "properties": {
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user.",
            "format": "int32"
          },
          "OBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated OBS.",
            "format": "int32"
          }
        },
        "description": "CreateUserOBSResponse Entity"
      },
      "DocumentStatusCodeExport": {
        "title": "DocumentStatusCode",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for DocumentStatusCode Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for DocumentStatusCode Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "DocumentStatusCode Entity"
      },
      "RoleCodeExport": {
        "title": "RoleCode",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RoleCode Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RoleCode Business Object",
              "enum": [
                "CODE_TYPE_NAME",
                "CODE_TYPE_OBJECT_ID",
                "CODE_VALUE",
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "RoleCode Entity"
      },
      "ScheduleOptions": {
        "title": "ScheduleOptions",
        "type": "object",
        "properties": {
          "CalculateFloatBasedOnFinishDate": {
            "type": "boolean",
            "description": "The flag that indicates how each activity's float will be calculated with respect to other projects in the scheduling batch. This setting only has an effect when scheduling multiple projects at the same time. If true, each activity's float is calculated based on its project's ScheduledFinishDate. If false, then each activity's float is calculated based on the latest ScheduledFinishDate of all of the projects in the scheduling batch."
          },
          "ComputeTotalFloatType": {
            "type": "string",
            "description": "The method for calculating total float for all activities. Start Float is the difference between the early and late start dates (Start Float = Late Start - Early Start); Finish Float is the difference between the early and late finish dates (Finish Float = Late Finish - Early Finish); and Smallest of Start Float and Finish Float is the most critical float value."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this schedule option was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this schedule option."
          },
          "CriticalActivityFloatThreshold": {
            "type": "number",
            "description": "The maximum float time for activities before they are marked critical.",
            "format": "double"
          },
          "CriticalActivityPathType": {
            "type": "string",
            "description": "The critical path type, which indicates how critical path activities are identified for the project, based on either 'Critical Float' or 'Longest Path'."
          },
          "ExternalProjectPriorityLimit": {
            "type": "integer",
            "format": "int32"
          },
          "IgnoreOtherProjectRelationships": {
            "type": "boolean",
            "description": "The option used by the scheduler for treating activity relationships between projects when scheduling."
          },
          "IncludeExternalResAss": {
            "type": "boolean"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this schedule option was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this schedule option."
          },
          "LevelAllResources": {
            "type": "boolean"
          },
          "LevelWithinFloat": {
            "type": "boolean"
          },
          "MakeOpenEndedActivitiesCritical": {
            "type": "boolean",
            "description": "The option used by the scheduler for automatically leveling resources when scheduling projects."
          },
          "MaximumMultipleFloatPaths": {
            "type": "integer",
            "description": "The number of critical float paths to calculate. For example, if you set the field to five, the module calculates the five most critical float paths ending with the activity you selected. The module ranks each float path from most critical to least critical, and stores the value for each activity in the Float Path field. For example, if you calculate five float paths, the module will store a value of one in the Float Path field for each activity in the most critical float path; the module will store a value of five for each activity in the least critical float path. Note: To view the critical float paths after you schedule the project, group activities in the Activity Table by Float Path and sort by Float Path Order. A Float Path value of one indicates that those activities are part of the most critical float path. The Float Path Order value indicates the order in which the activities were processed.",
            "format": "int32"
          },
          "MinFloatToPreserve": {
            "type": "integer",
            "format": "int32"
          },
          "MultipleFloatPathsEnabled": {
            "type": "boolean",
            "description": "The Boolean value that indicates whether multiple critical float paths (sequences of activities) should be calculated in the project schedule."
          },
          "MultipleFloatPathsEndingActivityObjectId": {
            "type": "integer",
            "description": "The activity in the WBS that you want to represent the end of the float paths. Typically, this will be a milestone activity or some other significant activity that has a start date or end date that cannot change. Note: if a value is not assigned, the module will choose an activity based on MultipleFloatPathsUseTotalFloat. If you are calculating multiple paths using Free Float, the module will choose the open-ended activity with the most critical Free Float. If you are calculating multiple paths using Total Float, the module will calculate the Total Float for all activity relationships, then choose the activity with the most critical Relationship Total Float.",
            "format": "int32"
          },
          "MultipleFloatPathsEndingActivityShortName": {
            "type": "string"
          },
          "MultipleFloatPathsUseTotalFloat": {
            "type": "boolean",
            "description": "The Boolean value that decides whether or not to use total float in multiple float path calculations.If True, then based on the activity you want the paths to end on, the module determines which predecessor activity has the most critical Relationship Total Float on the backward pass. The module repeats this process until an activity is reached that has no relationship. The module begins the forward pass from this activity and determines which successor activity has the most critical Relationship Successor Total Float. The module repeats this process until an activity is reached that has no relationship. These activities represent the most critical float path. The process begins again until the remaining sub-critical paths are calculated.If False, then critical float paths are defined based on longest path. The most critical path will be identical to the critical path that is derived when you choose to define critical activities as Longest Path in the General tab. In a multicalendar project, the longest path is calculated by identifying the activities that have an early finish equal to the latest calculated early finish for the project and tracing all driving relationships for those activities back to the project start date. After the most critical path is identified, the module will calculate the remaining sub-critical paths."
          },
          "OutOfSequenceScheduleType": {
            "type": "string",
            "description": "The type of logic used to schedule the progressed activities: 'Retained Logic', 'Progress Override', or 'Actual Dates'."
          },
          "OverAllocationPercentage": {
            "type": "number",
            "format": "double"
          },
          "PreserveScheduledEarlyAndLateDates": {
            "type": "boolean"
          },
          "PriorityList": {
            "type": "string"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RelationshipLagCalendar": {
            "type": "string",
            "description": "The calendar used to calculate the lag between predecessors and successors for all activities. Valid values are 'Predecessor Activity Calendar', 'Successor Activity Calendar', '24 Hour Calendar', and 'Project Default Calendar'. If you do not select a calendar, the successor activity calendar is used."
          },
          "ResourceList": {
            "type": "string"
          },
          "StartToStartLagCalculationType": {
            "type": "boolean",
            "description": "he method used to calculate lag when a start-to-start relationship exists and the predecessor starts out of sequence. Actual Start sets the successor's start according to the time elapsed from the predecessor's actual start (the successor's start date is the data date plus any remaining lag). Early Start sets the successor's start according to the amount of work that the predecessor activity accomplishes (the expired lag is calculated as the number of work periods between the actual start and the data date, and the successor's start date is the predecessor's internal early start plus any remaining lag)."
          },
          "UseExpectedFinishDates": {
            "type": "boolean",
            "description": "The option used for setting activity finish dates as the expected finish dates when scheduling projects."
          },
          "UserName": {
            "type": "string",
            "description": "The user's login name."
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user.",
            "format": "int32"
          }
        },
        "description": "ScheduleOptions Entity"
      },
      "BaselineType": {
        "title": "BaselineType",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this baseline type was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this baseline type."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this baseline type was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this baseline type."
          },
          "Name": {
            "type": "string",
            "description": "The name of this baseline type."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          }
        },
        "description": "BaselineType Entity"
      },
      "ResourceAssignmentExport": {
        "title": "ResourceAssignment",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ResourceAssignment Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ResourceAssignment Business Object",
              "enum": [
                "ACTIVITY_ACTUAL_FINISH",
                "ACTIVITY_ID",
                "ACTIVITY_NAME",
                "ACTIVITY_OBJECT_ID",
                "ACTIVITY_TYPE",
                "ACTUAL_COST",
                "ACTUAL_CURVE",
                "ACTUAL_DURATION",
                "ACTUAL_FINISH_DATE",
                "ACTUAL_OVERTIME_COST",
                "ACTUAL_OVERTIME_UNITS",
                "ACTUAL_REGULAR_COST",
                "ACTUAL_REGULAR_UNITS",
                "ACTUAL_START_DATE",
                "ACTUAL_THIS_PERIOD_COST",
                "ACTUAL_THIS_PERIOD_UNITS",
                "ACTUAL_UNITS",
                "ASSIGNMENT_PERCENT_COMPLETE",
                "AT_COMPLETION_COST",
                "AT_COMPLETION_DURATION",
                "AT_COMPLETION_UNITS",
                "AUTO_COMPUTE_ACTUALS",
                "BUDGET_AT_COMPLETION_COSTS",
                "BUDGET_AT_COMPLETION_UNITS",
                "CBS_CODE",
                "CBS_ID",
                "CALENDAR_NAME",
                "CALENDAR_OBJECT_ID",
                "COST_ACCOUNT_ID",
                "COST_ACCOUNT_NAME",
                "COST_ACCOUNT_OBJECT_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "DRIVING_ACTIVITY_DATES_FLAG",
                "DURATION_PERCENT_COMPLETE",
                "ESTIMATE_TO_COMPLETION_COSTS",
                "ESTIMATE_TO_COMPLETION_UNITS",
                "FINANCIAL_PERIOD_TMPL_ID",
                "FINISH_DATE",
                "GUID",
                "HAS_FUTURE_BUCKET_DATA",
                "IS_ACTIVE",
                "IS_ACTIVITY_FLAGGED",
                "IS_BASELINE",
                "IS_COST_UNITS_LINKED",
                "IS_OVERTIME_ALLOWED",
                "IS_PRIMARY_RESOURCE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "OVERTIME_FACTOR",
                "PENDING_ACTUAL_OVERTIME_UNITS",
                "PENDING_ACTUAL_REGULAR_UNITS",
                "PENDING_PERCENT_COMPLETE",
                "PENDING_REMAINING_UNITS",
                "PERCENT_COMPLETE",
                "PERCENT_COMPLETE_TYPE",
                "PLANNED_COST",
                "PLANNED_CURVE",
                "PLANNED_DURATION",
                "PLANNED_FINISH_DATE",
                "PLANNED_LAG",
                "PLANNED_START_DATE",
                "PLANNED_UNITS",
                "PLANNED_UNITS_PER_TIME",
                "PRICE_PER_UNIT",
                "PRIOR_ACTUAL_OVERTIME_UNITS",
                "PRIOR_ACTUAL_REGULAR_UNITS",
                "PROFICIENCY",
                "PROJECT_FLAG",
                "PROJECT_ID",
                "PROJECT_NAME",
                "PROJECT_OBJECT_ID",
                "PROJECT_PROJECT_FLAG",
                "RATE_SOURCE",
                "RATE_TYPE",
                "REMAINING_COST",
                "REMAINING_CURVE",
                "REMAINING_DURATION",
                "REMAINING_FINISH_DATE",
                "REMAINING_LAG",
                "REMAINING_LATE_FINISH_DATE",
                "REMAINING_LATE_START_DATE",
                "REMAINING_START_DATE",
                "REMAINING_UNITS",
                "REMAINING_UNITS_PER_TIME",
                "RESOURCE_CALENDAR_NAME",
                "RESOURCE_CURVE_NAME",
                "RESOURCE_CURVE_OBJECT_ID",
                "RESOURCE_ID",
                "RESOURCE_NAME",
                "RESOURCE_OBJECT_ID",
                "RESOURCE_REQUEST",
                "RESOURCE_TYPE",
                "REVIEW_REQUIRED",
                "ROLE_ID",
                "ROLE_NAME",
                "ROLE_OBJECT_ID",
                "ROLE_SHORT_NAME",
                "STAFFED_REMAINING_COST",
                "STAFFED_REMAINING_UNITS",
                "START_DATE",
                "STATUS_CODE",
                "TOTAL_PAST_PERIOD_COST",
                "TOTAL_PAST_PERIOD_UNITS",
                "UNITS_PERCENT_COMPLETE",
                "UNREAD_COMMENT_COUNT",
                "UNSTAFFED_REMAINING_COST",
                "UNSTAFFED_REMAINING_UNITS",
                "WBS_NAME_PATH",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ResourceAssignment Entity"
      },
      "ResourceAssignmentUpdate": {
        "title": "ResourceAssignmentUpdate",
        "required": ["ChangeSetObjectId", "ResourceAssignmentObjectId"],
        "type": "object",
        "properties": {
          "ActivityObjectId": {
            "type": "integer",
            "description": "The name of the Contract Management Group.",
            "format": "int32"
          },
          "AllData": {
            "type": "string",
            "description": "The unique ID of the activity to which the activity code is assigned."
          },
          "ApprovalDate": {
            "type": "string",
            "description": "The date that the activity was approved.",
            "format": "date-time"
          },
          "ApprovalUserName": {
            "type": "string",
            "description": "The username of the approved user."
          },
          "ApprovalUserObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system for the approved user.",
            "format": "int32"
          },
          "CalendarId": {
            "type": "integer",
            "format": "int32"
          },
          "ChangeSetObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system for the change set object.",
            "format": "int32"
          },
          "CreateUser": {
            "type": "string"
          },
          "Date": {
            "type": "string",
            "description": "The date of the resource assignment update.",
            "format": "date-time"
          },
          "HeldDate": {
            "type": "string",
            "description": "The date of the held resource assignment.",
            "format": "date-time"
          },
          "OverrideActualFinishDate": {
            "type": "string",
            "description": "The actual finish date for an override activity.",
            "format": "date-time"
          },
          "OverrideActualStartDate": {
            "type": "string",
            "description": "The actual start date for an override activity.",
            "format": "date-time"
          },
          "OverrideActualUnits": {
            "type": "number",
            "description": "The number of units for an override activity.",
            "format": "double"
          },
          "OverrideRemainingDuration": {
            "type": "number",
            "description": "The remaining duration for an override activity.",
            "format": "double"
          },
          "OverrideRemainingFinishDate": {
            "type": "string",
            "description": "The date that the override activity finishes.",
            "format": "date-time"
          },
          "OverrideRemainingUnits": {
            "type": "number",
            "description": "The overridden new remaining units of work to be performed by this resource on this activity.",
            "format": "double"
          },
          "PendingActualFinishDate": {
            "type": "string",
            "description": "The date on which the pending activity actually finishes if approval is required.",
            "format": "date-time"
          },
          "PendingActualStartDate": {
            "type": "string",
            "description": "The date on which the pending activity actually starts if approval is required.",
            "format": "date-time"
          },
          "PendingActualUnits": {
            "type": "number",
            "description": "The actual number of units associated with the the pending activity if approval is required.",
            "format": "double"
          },
          "PendingRemainingDuration": {
            "type": "number",
            "description": "The remaining duration that is required to finish a pending activity if approval is required.",
            "format": "double"
          },
          "PendingRemainingFinishDate": {
            "type": "string",
            "description": "The remaining finish date of a pending activity if approval is required.",
            "format": "date-time"
          },
          "PendingRemainingUnits": {
            "type": "number",
            "description": "The remaining number of units associated with a pending activity if approval is required.",
            "format": "double"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RejectedBy": {
            "type": "string"
          },
          "RejectedDate": {
            "type": "string",
            "format": "date-time"
          },
          "RequestUserObjectId": {
            "type": "integer",
            "description": "The unique ID of the user modifying the task, assignment, or step.",
            "format": "int32"
          },
          "ResourceAssignmentObjectId": {
            "type": "integer",
            "description": "The unique identifier for the ResourceAssignment. You can specify one or more ResourceAssignmentObjectID.",
            "format": "int32"
          },
          "ResubmittedBy": {
            "type": "string"
          },
          "ResubmittedDate": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "type": "string",
            "description": "The status of this budget change request. Possible values are 'Pending', 'Held', and 'Approved'."
          }
        },
        "description": "ResourceAssignmentUpdate Entity"
      },
      "Relationship": {
        "title": "Relationship",
        "required": [
          "PredecessorActivityObjectId",
          "SuccessorActivityObjectId"
        ],
        "type": "object",
        "properties": {
          "Aref": {
            "type": "string",
            "description": "The Adjusted Relationship Early Finish where one of the activities of the relationship is in a project which is not present in this database.",
            "format": "date-time"
          },
          "Arls": {
            "type": "string",
            "description": "The Adjusted Relationship Late Start where one of the activities of the relationship is in a project which is not present in this database.",
            "format": "date-time"
          },
          "Comments": {
            "type": "string"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this dependency was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this dependency."
          },
          "Driving": {
            "type": "boolean"
          },
          "IsPredecessorBaseline": {
            "type": "boolean",
            "description": "The YesNo value indicating if the predecessor activity is related to a Project or Baseline"
          },
          "IsPredecessorTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "IsSuccessorBaseline": {
            "type": "boolean",
            "description": "The YesNo value indicating if the successor activity is related to a Project or Baseline"
          },
          "IsSuccessorTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "Lag": {
            "type": "number",
            "description": "The time lag of the relationship. This is the time lag between the predecessor activity's start or finish date and the successor activity's start or finish date, depending on the relationship type. The time lag is based on the successor activity's calendar. This value is specified by the project manager and is used by the project scheduler when scheduling activities.",
            "format": "double"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this dependency was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this dependency."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "PredecessorActivityId": {
            "type": "string",
            "description": "The activity ID of the predecessor activity."
          },
          "PredecessorActivityName": {
            "type": "string",
            "description": "The name of the predecessor activity."
          },
          "PredecessorActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the predecessor activity.",
            "format": "int32"
          },
          "PredecessorActivityType": {
            "type": "string",
            "description": "The type of the predecessor activity, either 'Task Dependent', 'Resource Dependent', 'Level of Effort', or 'Milestone'."
          },
          "PredecessorFinishDate": {
            "type": "string",
            "description": "The finish date of the predecessor activity.",
            "format": "date-time"
          },
          "PredecessorProjectId": {
            "type": "string",
            "description": "The project ID of the project that owns the predecessor activity."
          },
          "PredecessorProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the project that owns the predecessor activity.",
            "format": "int32"
          },
          "PredecessorStartDate": {
            "type": "string",
            "description": "The start date of the predecessor activity.",
            "format": "date-time"
          },
          "PredecessorWbsName": {
            "type": "string",
            "description": "The name of each WBS element in the predecessor activity."
          },
          "SuccessorActivityId": {
            "type": "string",
            "description": "The activity ID of the successor activity."
          },
          "SuccessorActivityName": {
            "type": "string",
            "description": "The name of the successor activity."
          },
          "SuccessorActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the successor activity.",
            "format": "int32"
          },
          "SuccessorActivityType": {
            "type": "string",
            "description": "The type of the successor activity, either 'Task Dependent', 'Resource Dependent', 'Level of Effort', or 'Milestone'."
          },
          "SuccessorFinishDate": {
            "type": "string",
            "description": "The finish date of the successor activity.",
            "format": "date-time"
          },
          "SuccessorProjectId": {
            "type": "string",
            "description": "The project ID of the project that owns the successor activity."
          },
          "SuccessorProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the project that owns the successor activity.",
            "format": "int32"
          },
          "SuccessorStartDate": {
            "type": "string",
            "description": "The start date of the successor activity.",
            "format": "date-time"
          },
          "SuccessorWbsName": {
            "type": "string",
            "description": "The name of each WBS element in the successor activity."
          },
          "Type": {
            "type": "string",
            "description": "The type of relationship: 'Finish to Start', 'Finish to Finish', 'Start to Start', or 'Start to Finish'."
          }
        },
        "description": "Relationship Entity"
      },
      "MemberResource": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ObjectId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ActivityStep": {
        "title": "ActivityStep",
        "required": ["ActivityName", "ActivityObjectId"],
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "string",
            "description": "The short ID that uniquely identifies the activity within the project."
          },
          "ActivityName": {
            "type": "string",
            "description": "The name of the activity. The activity name does not have to be unique."
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the steps are assigned.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this activity step was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this activity step."
          },
          "Description": {
            "type": "string",
            "description": "The description of the activity step."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsCompleted": {
            "type": "boolean",
            "description": "The flag that indicates whether the step has been completed."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this activity step was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this activity step."
          },
          "Name": {
            "type": "string",
            "description": "The name of the activity step."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "PercentComplete": {
            "type": "number",
            "description": "The percent complete for the step.",
            "format": "double"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS for the activity.",
            "format": "int32"
          },
          "Weight": {
            "type": "number",
            "description": "The weight that is assigned to the step. This is a user defined field that is used to calculate the physical percent complete when the project option is set.",
            "format": "double"
          },
          "WeightPercent": {
            "type": "number",
            "description": "The non-editable field that displays the percentage amount that corresponds to the step. It is calculated by taking the weight of the step and dividing it by the total of all weights for the activity.",
            "format": "double"
          }
        },
        "description": "ActivityStep Entity"
      },
      "RiskMatrixThreshold": {
        "title": "RiskMatrixThreshold",
        "required": ["RiskMatrixObjectId", "RiskThresholdObjectId"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this risk matrix score type was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the risk matrix score type."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk matrix score type was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the risk matrix score type."
          },
          "RiskMatrixName": {
            "type": "string",
            "description": "The name of the associated Risk Matrix."
          },
          "RiskMatrixObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Matrix.",
            "format": "int32"
          },
          "RiskThresholdName": {
            "type": "string",
            "description": "The name of the associated Risk Threshold."
          },
          "RiskThresholdObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Threshold.",
            "format": "int32"
          }
        },
        "description": "RiskMatrixThreshold Entity"
      },
      "ActivityStepExport": {
        "title": "ActivityStep",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ActivityStep Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ActivityStep Business Object",
              "enum": [
                "ACTIVITY_ID",
                "ACTIVITY_NAME",
                "ACTIVITY_OBJECT_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "IS_BASELINE",
                "IS_COMPLETED",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PERCENT_COMPLETE",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "SEQUENCE_NUMBER",
                "WBS_OBJECT_ID",
                "WEIGHT",
                "WEIGHT_PERCENT"
              ]
            }
          }
        },
        "description": "ActivityStep Entity"
      },
      "ActivityRisk": {
        "title": "ActivityRisk",
        "required": ["ActivityObjectId", "RiskObjectId"],
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "string",
            "description": "The id of an activity impacted by the Risk."
          },
          "ActivityName": {
            "type": "string",
            "description": "The name of an activity impacted by the Risk. The activity name does not have to be unique."
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the risk is assigned.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this activity was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this activity risk."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this activity was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this activity risk."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code of the associated project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RiskId": {
            "type": "string",
            "description": "The ID of the Risk. Must be unique within a project."
          },
          "RiskName": {
            "type": "string",
            "description": "The name of the Risk. Does not need to be unique."
          },
          "RiskObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated risk.",
            "format": "int32"
          }
        },
        "description": "ActivityRisk Entity"
      },
      "RoleExport": {
        "title": "Role",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for Role Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for Role Business Object",
              "enum": [
                "CALCULATE_COST_FROM_UNITS",
                "CREATE_DATE",
                "CREATE_USER",
                "ID",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "RESPONSIBILITIES",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "Role Entity"
      },
      "GlobalReplace": {
        "title": "GlobalReplace",
        "type": "object",
        "properties": {
          "AllProjects": {
            "type": "boolean",
            "description": "The option used to set all of projects to which a user has access."
          },
          "GlobalReplaceData": {
            "type": "string",
            "description": "The Global Replace template."
          },
          "GlobalReplaceName": {
            "type": "string",
            "description": "The Global Replace template name."
          },
          "GreplaceObjectId": {
            "type": "integer",
            "description": "The unique id of the Global Replace template.",
            "format": "int32"
          },
          "ProjectIdName": {
            "type": "string",
            "description": "Project ids and names that are separated by commas."
          },
          "ProjectIds": {
            "type": "string",
            "description": "TProject ids that are separated by commas."
          },
          "ReplaceFieldNameOne": {
            "type": "string",
            "description": "First field name the user has selected to replace."
          },
          "SearchCriteria": {
            "type": "string",
            "description": "The criteria that is used to search and load business objects."
          },
          "SubjectAreaType": {
            "type": "string",
            "description": "The name of the object to be updated."
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique id of the associated user.",
            "format": "int32"
          }
        },
        "description": "GlobalReplace Entity"
      },
      "FinancialPeriod": {
        "title": "FinancialPeriod",
        "required": ["EndDate", "Name", "StartDate"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this financial period was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this financial period."
          },
          "EndDate": {
            "type": "string",
            "description": "The end date of the period.",
            "format": "date-time"
          },
          "FinancialPeriodTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this financial period was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this financial period."
          },
          "Name": {
            "type": "string",
            "description": "The name of the financial period."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the period.",
            "format": "date-time"
          }
        },
        "description": "FinancialPeriod Entity"
      },
      "ScheduleCheck": {
        "title": "ScheduleCheck",
        "type": "object",
        "properties": {
          "ProjectObjectId": {
            "type": "array",
            "description": "The unique identifier of the project in P6.",
            "items": {
              "type": "integer",
              "description": "The unique identifier of the project in P6.",
              "format": "int32"
            }
          },
          "Timeout": {
            "type": "integer",
            "description": "The amount of time in seconds that the server side will wait for the job service to complete before it returns with the current job status. The Timeout parameter is optional. When this operation is used without specifying a Timeout parameter or with a Timeout of 0, the server immediately returns without waiting for the job service to complete.",
            "format": "int32"
          }
        },
        "description": "ScheduleCheck Entity"
      },
      "BusinessObjectOptions": {
        "type": "object",
        "properties": {
          "Activity": {
            "$ref": "#/components/schemas/ActivityExport"
          },
          "ActivityCode": {
            "$ref": "#/components/schemas/ActivityCodeExport"
          },
          "ActivityCodeAssignment": {
            "$ref": "#/components/schemas/ActivityCodeAssignmentExport"
          },
          "ActivityCodeType": {
            "$ref": "#/components/schemas/ActivityCodeTypeExport"
          },
          "ActivityExpense": {
            "$ref": "#/components/schemas/ActivityExpenseExport"
          },
          "ActivityNote": {
            "$ref": "#/components/schemas/ActivityNoteExport"
          },
          "ActivityPeriodActual": {
            "$ref": "#/components/schemas/ActivityPeriodActualExport"
          },
          "ActivityRisk": {
            "$ref": "#/components/schemas/ActivityRiskExport"
          },
          "ActivityStep": {
            "$ref": "#/components/schemas/ActivityStepExport"
          },
          "Calendar": {
            "$ref": "#/components/schemas/CalendarExport"
          },
          "CostAccount": {
            "$ref": "#/components/schemas/CostAccountExport"
          },
          "Currency": {
            "$ref": "#/components/schemas/CurrencyExport"
          },
          "Document": {
            "$ref": "#/components/schemas/DocumentExport"
          },
          "DocumentCategory": {
            "$ref": "#/components/schemas/DocumentCategoryExport"
          },
          "DocumentStatusCode": {
            "$ref": "#/components/schemas/DocumentStatusCodeExport"
          },
          "EPS": {
            "$ref": "#/components/schemas/EPSExport"
          },
          "ExpenseCategory": {
            "$ref": "#/components/schemas/ExpenseCategoryExport"
          },
          "FinancialPeriod": {
            "$ref": "#/components/schemas/FinancialPeriodExport"
          },
          "FundingSource": {
            "$ref": "#/components/schemas/FundingSourceExport"
          },
          "NotebookTopic": {
            "$ref": "#/components/schemas/NotebookTopicExport"
          },
          "OBS": {
            "$ref": "#/components/schemas/OBSExport"
          },
          "Project": {
            "$ref": "#/components/schemas/ProjectExport"
          },
          "ProjectBudgetChangeLog": {
            "$ref": "#/components/schemas/ProjectBudgetChangeLogExport"
          },
          "ProjectCode": {
            "$ref": "#/components/schemas/ProjectCodeExport"
          },
          "ProjectCodeAssignment": {
            "$ref": "#/components/schemas/ProjectCodeAssignmentExport"
          },
          "ProjectCodeType": {
            "$ref": "#/components/schemas/ProjectCodeTypeExport"
          },
          "ProjectDocument": {
            "$ref": "#/components/schemas/ProjectDocumentExport"
          },
          "ProjectFunding": {
            "$ref": "#/components/schemas/ProjectFundingExport"
          },
          "ProjectIssue": {
            "$ref": "#/components/schemas/ProjectIssueExport"
          },
          "ProjectNote": {
            "$ref": "#/components/schemas/ProjectNoteExport"
          },
          "ProjectResource": {
            "$ref": "#/components/schemas/ProjectResourceExport"
          },
          "ProjectResourceCategory": {
            "$ref": "#/components/schemas/ProjectResourceCategoryExport"
          },
          "ProjectResourceQuantity": {
            "$ref": "#/components/schemas/ProjectResourceQuantityExport"
          },
          "ProjectSpendingPlan": {
            "$ref": "#/components/schemas/ProjectSpendingPlanExport"
          },
          "ProjectThreshold": {
            "$ref": "#/components/schemas/ProjectThresholdExport"
          },
          "Relationship": {
            "$ref": "#/components/schemas/RelationshipExport"
          },
          "Resource": {
            "$ref": "#/components/schemas/ResourceExport"
          },
          "ResourceAssignment": {
            "$ref": "#/components/schemas/ResourceAssignmentExport"
          },
          "ResourceAssignmentPeriodActual": {
            "$ref": "#/components/schemas/ResourceAssignmentPeriodActualExport"
          },
          "ResourceCode": {
            "$ref": "#/components/schemas/ResourceCodeExport"
          },
          "ResourceCodeAssignment": {
            "$ref": "#/components/schemas/ResourceCodeAssignmentExport"
          },
          "ResourceCodeType": {
            "$ref": "#/components/schemas/ResourceCodeTypeExport"
          },
          "RoleCode": {
            "$ref": "#/components/schemas/RoleCodeExport"
          },
          "RoleCodeAssignment": {
            "$ref": "#/components/schemas/RoleCodeAssignmentExport"
          },
          "RoleCodeType": {
            "$ref": "#/components/schemas/RoleCodeTypeExport"
          },
          "ResourceCurve": {
            "$ref": "#/components/schemas/ResourceCurveExport"
          },
          "ResourceRate": {
            "$ref": "#/components/schemas/ResourceRateExport"
          },
          "ResourceRole": {
            "$ref": "#/components/schemas/ResourceRoleExport"
          },
          "Risk": {
            "$ref": "#/components/schemas/RiskExport"
          },
          "RiskCategory": {
            "$ref": "#/components/schemas/RiskCategoryExport"
          },
          "RiskImpact": {
            "$ref": "#/components/schemas/RiskImpactExport"
          },
          "RiskMatrixScore": {
            "$ref": "#/components/schemas/RiskMatrixScoreExport"
          },
          "RiskMatrixThreshold": {
            "$ref": "#/components/schemas/RiskMatrixThresholdExport"
          },
          "RiskResponseAction": {
            "$ref": "#/components/schemas/RiskResponseActionExport"
          },
          "RiskResponseActionImpact": {
            "$ref": "#/components/schemas/RiskResponseActionImpactExport"
          },
          "RiskResponsePlan": {
            "$ref": "#/components/schemas/RiskResponsePlanExport"
          },
          "RiskMatrix": {
            "$ref": "#/components/schemas/RiskMatrixExport"
          },
          "RiskThresholdLevel": {
            "$ref": "#/components/schemas/RiskThresholdLevelExport"
          },
          "RiskThreshold": {
            "$ref": "#/components/schemas/RiskThresholdExport"
          },
          "Role": {
            "$ref": "#/components/schemas/RoleExport"
          },
          "RoleRate": {
            "$ref": "#/components/schemas/RoleRateExport"
          },
          "RoleLimit": {
            "$ref": "#/components/schemas/RoleLimitExport"
          },
          "Shift": {
            "$ref": "#/components/schemas/ShiftExport"
          },
          "ThresholdParameter": {
            "$ref": "#/components/schemas/ThresholdParameterExport"
          },
          "UDFCode": {
            "$ref": "#/components/schemas/UDFCodeExport"
          },
          "UDFType": {
            "$ref": "#/components/schemas/UDFTypeExport"
          },
          "UDFValue": {
            "$ref": "#/components/schemas/UDFValueExport"
          },
          "UnitOfMeasure": {
            "$ref": "#/components/schemas/UnitOfMeasureExport"
          },
          "WBS": {
            "$ref": "#/components/schemas/WBSExport"
          },
          "WBSCategory": {
            "$ref": "#/components/schemas/WBSCategoryExport"
          },
          "WBSMilestone": {
            "$ref": "#/components/schemas/WBSMilestoneExport"
          }
        },
        "description": "Specifies which business objects to export according to the following rules: If no BusinessObjectOptions are specified, then all of the business objects in the project are exported. If any BusinessObjectOptions are specified, then only those business objects specified by the BusinessObjectOptions element are exported."
      },
      "UserLicense": {
        "title": "UserLicense",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this user license was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this user license."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this user license was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this user license."
          },
          "LicenseType": {
            "type": "string",
            "description": "The property that permits you to configure access to different functional areas of the application suite."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "description": "The user's login name."
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user.",
            "format": "int32"
          }
        },
        "description": "UserLicense Entity"
      },
      "DocumentCategory": {
        "title": "DocumentCategory",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this document category was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this document category."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this document category was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this document category."
          },
          "Name": {
            "type": "string",
            "description": "The name of the document category."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          }
        },
        "description": "DocumentCategory Entity"
      },
      "DownloadFiles": {
        "title": "DownloadFiles",
        "type": "object",
        "properties": {
          "JobType": {
            "type": "string",
            "description": "Specifies the job type."
          },
          "JobName": {
            "type": "array",
            "description": "Specifies the job name.",
            "items": {
              "type": "string",
              "description": "Specifies the job name."
            }
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the file download.",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "The end date of the file download.",
            "format": "date-time"
          }
        },
        "description": "DownloadFiles Entity"
      },
      "ReadEPSSpreadResponse": {
        "title": "ReadEPSSpreadResponse",
        "type": "object",
        "properties": {
          "EPSId": {
            "type": "string"
          },
          "EPSObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummarizedSpreadPeriod"
            }
          }
        },
        "description": "ReadEPSSpreadResponse Entity"
      },
      "ResourceAssignment": {
        "title": "ResourceAssignment",
        "required": ["ActivityObjectId", "ResourceObjectId", "RoleObjectId"],
        "type": "object",
        "properties": {
          "ActivityActualFinish": {
            "type": "string",
            "description": "The date on which the activity was completed.",
            "format": "date-time"
          },
          "ActivityId": {
            "type": "string",
            "description": "The short ID that uniquely identifies the activity within the project."
          },
          "ActivityName": {
            "type": "string",
            "description": "The name of the activity. The activity name does not have to be unique."
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the resource is assigned.",
            "format": "int32"
          },
          "ActivityType": {
            "type": "string",
            "description": "Determines how duration and schedule dates are calculated for an activity."
          },
          "ActualCost": {
            "type": "number",
            "description": "The actual non-overtime plus overtime cost for the resource assignment on the activity. Computed as actual cost = actual regular cost + actual overtime cost.",
            "format": "double"
          },
          "ActualCurve": {
            "type": "string"
          },
          "ActualDuration": {
            "type": "number",
            "description": "The actual duration for the resource assignment on the activity.",
            "format": "double"
          },
          "ActualFinishDate": {
            "type": "string",
            "description": "The date the resource actually finished working on the activity.",
            "format": "date-time"
          },
          "ActualOvertimeCost": {
            "type": "number",
            "description": "The actual overtime cost for the resource assignment on the activity. Computed as actual overtime cost = actual overtime units * cost per time * overtime factor.",
            "format": "double"
          },
          "ActualOvertimeUnits": {
            "type": "number",
            "description": "The actual overtime units worked by the resource on this activity. This value is computed from timesheets when project actuals are applied or may be entered directly by the project manager.",
            "format": "double"
          },
          "ActualRegularCost": {
            "type": "number",
            "description": "The actual non-overtime cost for the resource assignment on the activity. Computed as actual regular cost = actual regular units * cost per time.",
            "format": "double"
          },
          "ActualRegularUnits": {
            "type": "number",
            "description": "The actual non-overtime units worked by the resource on this activity. This value is computed from timesheets when project actuals are applied or may be entered directly by the project manager.",
            "format": "double"
          },
          "ActualStartDate": {
            "type": "string",
            "description": "The date the resource actually started working on the activity.",
            "format": "date-time"
          },
          "ActualThisPeriodCost": {
            "type": "number",
            "description": "The actual this period cost (will be labor or nonlabor).",
            "format": "double"
          },
          "ActualThisPeriodUnits": {
            "type": "number",
            "description": "The actual this period units (hours) (will be labor or nonlabor).",
            "format": "double"
          },
          "ActualUnits": {
            "type": "number",
            "description": "The actual non-overtime plus overtime units worked by the resource on this activity. This value is computed from timesheets when project actuals are applied or may be entered directly by the project manager. Computed as actual units = actual regular units + actual overtime units.",
            "format": "double"
          },
          "AtCompletionCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining costs for the resource assignment on the activity.",
            "format": "double"
          },
          "AtCompletionDuration": {
            "type": "number",
            "description": "The total working time from the activity's current start date to the current finish date. The current start date is the planned start date until the activity is started, then it is the actual start date. The current finish date is the activity planned finish date while the activity is not started, the remaining finish date while the activity is in progress, and the actual finish date once the activity is completed. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "AtCompletionUnits": {
            "type": "number",
            "description": "The sum of the actual plus remaining units for the resource assignment on the activity.",
            "format": "double"
          },
          "AutoComputeActuals": {
            "type": "boolean",
            "description": "The option that determines whether the activity's actual and remaining units, start date, finish date, and percent complete are computed automatically using the planned dates, planned units and the schedule percent complete. If this option is selected, the actual/remaining units and actual dates are automatically updated when project actuals are applied. Use this option to assume that all work for the activity proceeds according to plan."
          },
          "BudgetAtCompletionCosts": {
            "type": "number",
            "format": "double"
          },
          "BudgetAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "CalendarName": {
            "type": "string",
            "description": "The name of the calendar."
          },
          "CalendarObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system for the calendar associated with the resource assignment.",
            "format": "int32"
          },
          "CostAccountId": {
            "type": "string",
            "description": "The id of associated cost account."
          },
          "CostAccountName": {
            "type": "string",
            "description": "The name of the associated cost account."
          },
          "CostAccountObjectId": {
            "type": "integer",
            "description": "The unique ID of the cost account associated with this resource assignment.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this assignment was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this assignment."
          },
          "DrivingActivityDatesFlag": {
            "type": "boolean",
            "description": "The flag indicating whether new resource/role assignments drive activity dates, by default."
          },
          "DurationPercentComplete": {
            "type": "number",
            "format": "double"
          },
          "EstimateToCompletionCosts": {
            "type": "number",
            "format": "double"
          },
          "EstimateToCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "FinancialPeriodTmplId": {
            "type": "integer",
            "format": "int32"
          },
          "FinishDate": {
            "type": "string",
            "description": "The finish date of the resource assignment on the activity. Set to the remaining finish date until the activity is completed, then set to the actual finish date.",
            "format": "date-time"
          },
          "GUID": {
            "type": "string",
            "description": "The globally unique ID generated by the system."
          },
          "HasFutureBucketData": {
            "type": "boolean",
            "description": "The flag that indicates whether the assignment has future bucket data."
          },
          "IsActive": {
            "type": "boolean",
            "description": "The flag that indicates whether this resource assignment is active."
          },
          "IsActivityFlagged": {
            "type": "boolean",
            "description": "The flag that indicates whether the resource who is assigned to the activity assignment has flagged the activity as important to the resource."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline."
          },
          "IsCostUnitsLinked": {
            "type": "boolean",
            "description": "The flag that determines whether or not cost should be calculated based on units."
          },
          "IsOvertimeAllowed": {
            "type": "boolean",
            "description": "The flag that indicates whether the resource is allowed to log overtime hours."
          },
          "IsPrimaryResource": {
            "type": "boolean",
            "description": "The flag that indicates whether this resource is the activity's primary resource."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this assignment was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this assignment."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OvertimeFactor": {
            "type": "number",
            "description": "The overtime factor used to compute the overtime price for the resource assignment on this activity. Overtime price = standard price * overtime factor. When the resource is assigned to the activity, the resource's overtime factor is copied to the assignment. The assignment overtime factor is refreshed from the resource value when resource prices are synchronized for the project.",
            "format": "double"
          },
          "PendingActualOvertimeUnits": {
            "type": "number",
            "description": "The actual overtime units worked by the resource on this activity. This value is computed from values entered by a user in the Progress Reporter application and is applied to the resource assignment when the Apply Actuals service is invoked.",
            "format": "double"
          },
          "PendingActualRegularUnits": {
            "type": "number",
            "description": "The actual nonovertime units worked by the resource on this activity. This value is computed from values entered by a user in the Progress Reporter application and is applied to the resource assignment when the Apply Actuals service is invoked.",
            "format": "double"
          },
          "PendingPercentComplete": {
            "type": "number",
            "description": "The estimate of the percentage of the resource's units of work completed on this activity. The pending percent complete is entered by each resource using Timesheets. This value is used to compute the resource's remaining units for the activity when project actuals are applied. The project manager specifies whether resources update their percent complete or remaining units for each project.",
            "format": "double"
          },
          "PendingRemainingUnits": {
            "type": "number",
            "description": "The estimate of the resource's remaining units on this activity. The pending remaining units is entered by each resource using Timesheets. This value is copied to the resource's remaining units for the activity when project actuals are applied. The project manager specifies whether resources update their percent complete or remaining units for each project.",
            "format": "double"
          },
          "PercentComplete": {
            "type": "number",
            "format": "double"
          },
          "PercentCompleteType": {
            "type": "string"
          },
          "PlannedCost": {
            "type": "number",
            "description": "The planned cost for the resource assignment on the activity. Computed as planned cost = planned units * price per time. This field is named BudgetedCost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedCurve": {
            "type": "string"
          },
          "PlannedDuration": {
            "type": "number",
            "description": "The planned working time for the resource assignment on the activity, from the resource's planned start date to the planned finish date. This field is named BudgetedDuration in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedFinishDate": {
            "type": "string",
            "description": "The date the resource is scheduled to finish working on the activity. This date is computed by the project scheduler but can be updated manually by the project manager. This date is not changed by the project scheduler after the activity has been started. This is the finish date that Timesheets users follow and schedule variance is measured against.",
            "format": "date-time"
          },
          "PlannedLag": {
            "type": "number",
            "description": "The planned time lag between the activity's planned start date and the resource's planned start date on the activity. If the resource is planned to start work when the activity is planned to start, the planned lag is zero. This field is named BudgetedLag in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedStartDate": {
            "type": "string",
            "description": "The date the resource is scheduled to begin working on the activity. This date is computed by the project scheduler but can be updated manually by the project manager. This date is not changed by the project scheduler after the activity has been started. This is the start date that Timesheets users follow and schedule variance is measured against.",
            "format": "date-time"
          },
          "PlannedUnits": {
            "type": "number",
            "description": "The planned units of work for the resource assignment on the activity. This field is named BudgetedUnits in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedUnitsPerTime": {
            "type": "number",
            "description": "The planned units per time at which the resource is to perform work on this activity. For example, a person assigned full time would perform 8 hours of work per day. A department of five people may perform at 5 days per day. This field is named BudgetedUnitsPerTime in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PricePerUnit": {
            "type": "number",
            "description": "The price per time for the resource on this activity. This price is used to compute the resource's cost for the activity. When the resource is assigned to the activity, the resource's price is copied to the assignment based on the effective date of the price and the activity start date. The assignment price is refreshed whenever resource prices are synchronized for the project.",
            "format": "double"
          },
          "PriorActualOvertimeUnits": {
            "type": "number",
            "description": "The difference between the pending quantity value and the actual quantity value for overtime before applying the new actual value.",
            "format": "double"
          },
          "PriorActualRegularUnits": {
            "type": "number",
            "description": "The difference between the pending quantity value and the actual quantity value before applying the new actual value.",
            "format": "double"
          },
          "Proficiency": {
            "type": "string",
            "description": "The skill level that is associated with the role. The values are 'Master', 'Expert', 'Skilled', 'Proficient', and 'Inexperienced'. If the current user does not have the ViewResourceRoleProficiency global security privilege, this field may not be accessed."
          },
          "ProjectFlag": {
            "type": "string",
            "description": "Indicates if this WBS node is a Project/EPS node."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ProjectProjectFlag": {
            "type": "string",
            "description": "Indicates if this Project/EPS nose is a Project or EPS."
          },
          "RateSource": {
            "type": "string",
            "description": "The value that indicates which price/unit will be used to calculate costs for the assignment, such as 'Resource', 'Role', and 'Override'. When a resource and only a resource is assigned to an activity, the rate source will automatically equal 'Resource'. When a role and only a role is assigned to an activity, the rate source will automatically equal 'Role'. When both a resource and role are assigned to the activity, the rate source can be either 'Resource' or 'Role' determined by the RateSourcePreference. In any case, the 'Override' value allows you to specify any other price/unit."
          },
          "RateType": {
            "type": "string",
            "description": "The rate type that determines which of the five prices specified for the resource will be used to calculate the cost for the resource assignment. Valid values are 'Price / Unit', 'Price / Unit2', 'Price / Unit3', 'Price / Unit4', 'Price / Unit5', and 'None'."
          },
          "RemainingCost": {
            "type": "number",
            "description": "The remaining cost for the resource assignment on the activity. Computed as remaining cost = remaining units * cost per time.",
            "format": "double"
          },
          "RemainingCurve": {
            "type": "string"
          },
          "RemainingDuration": {
            "type": "number",
            "description": "The remaining duration of the resource assignment. The remaining duration is the remaining working time for the resource assignment on the activity, from the resource's remaining start date to the remaining finish date. The remaining working time is computed using the calendar determined by the activity Type. Resource Dependent activities use the resource's calendar, other activity types use the activity's calendar. Before the activity is started, the remaining duration is the same as the Original duration. After the activity is completed, the remaining duration is zero.",
            "format": "double"
          },
          "RemainingFinishDate": {
            "type": "string",
            "description": "The date the resource is scheduled to finish the remaining work for the activity. This date is computed by the project scheduler but can be updated manually by the project manager. Before the activity is started, the remaining finish date is the same as the planned finish date.",
            "format": "date-time"
          },
          "RemainingLag": {
            "type": "number",
            "description": "The time lag between the activity's remaining start date and the resource's remaining start date on the activity. If the resource's remaining work starts on the activity's remaining start date, the lag is zero. Before the activity is started, the remaining lag is the same as the planned lag.",
            "format": "double"
          },
          "RemainingLateFinishDate": {
            "type": "string",
            "description": "The remaining late finish date calculated by the scheduler.",
            "format": "date-time"
          },
          "RemainingLateStartDate": {
            "type": "string",
            "description": "The remaining late start date calculated by the scheduler.",
            "format": "date-time"
          },
          "RemainingStartDate": {
            "type": "string",
            "description": "The date the resource is scheduled to begin the remaining work for the activity. This date is computed by the project scheduler but can be updated manually by the project manager. Before the activity is started, the remaining start date is the same as the planned start date.",
            "format": "date-time"
          },
          "RemainingUnits": {
            "type": "number",
            "description": "The remaining units of work to be performed by this resource on this activity. Before the activity is started, the remaining units are the same as the planned units. After the activity is completed, the remaining units are zero.",
            "format": "double"
          },
          "RemainingUnitsPerTime": {
            "type": "number",
            "description": "The units per time at which the resource will be performing work on the remaining portion of this activity. For example, a person assigned full time would perform 8 hours of work per day. A department of five people may perform at 5 days per day.",
            "format": "double"
          },
          "ResourceCalendarName": {
            "type": "string",
            "description": "The name of the calendar for the resource."
          },
          "ResourceCurveName": {
            "type": "string",
            "description": "The name of the resource curve that determines how resources and costs are distributed over time for this activity."
          },
          "ResourceCurveObjectId": {
            "type": "integer",
            "description": "The unique ID of the resource curve.",
            "format": "int32"
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the resource."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "ResourceType": {
            "type": "string",
            "description": "The resource type: \"Labor\", \"Nonlabor\", or \"Material\"."
          },
          "ReviewRequired": {
            "type": "boolean",
            "description": "Determines if all new activities added to the project require approval."
          },
          "RoleId": {
            "type": "string",
            "description": "The short code that uniquely identifies the role."
          },
          "RoleName": {
            "type": "string",
            "description": "The name of the role. The role name uniquely identifies the role."
          },
          "RoleObjectId": {
            "type": "integer",
            "description": "The unique ID of the role the resource is performing on this activity. A resource may be assigned to the same activity more than once, performing different roles. The project manager controls whether the same resource can be assigned to an activity more than once.",
            "format": "int32"
          },
          "RoleShortName": {
            "type": "string",
            "description": "The short code that uniquely identifies a role."
          },
          "StaffedRemainingCost": {
            "type": "number",
            "description": "The time distribution of the resource's remaining cost for resource assignments that have filled a role.",
            "format": "double"
          },
          "StaffedRemainingUnits": {
            "type": "number",
            "description": "The time distribution of the resource's remaining units for resource assignments that have filled a role.",
            "format": "double"
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the resource assignment on the activity. Set to the remaining start date until the activity is started, then set to the actual start date.",
            "format": "date-time"
          },
          "StatusCode": {
            "type": "string",
            "description": "The project status, either 'Planned', 'Active', 'Inactive', 'What-If', 'Requested', or 'Template'."
          },
          "UnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for the resource assignment on the activity. Computed as actual units / at completion units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "UnreadCommentCount": {
            "type": "integer",
            "description": "The total number of unread comments on this activity for a user.",
            "format": "int32"
          },
          "UnstaffedRemainingCost": {
            "type": "number",
            "description": "The time distribution of the resource's remaining cost for resource assignments that have not filled a role.",
            "format": "double"
          },
          "UnstaffedRemainingUnits": {
            "type": "number",
            "description": "The time distribution of the resource's remaining units for resource assignments that have not filled a role.",
            "format": "double"
          },
          "ResourceRequest": {
            "$ref": "#/components/schemas/ResourceRequest"
          },
          "WBSNamePath": {
            "type": "string"
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS for the activity.",
            "format": "int32"
          },
          "CBSCode": {
            "type": "string",
            "description": "CBS Code."
          },
          "CBSId": {
            "type": "integer",
            "description": "The unique Id of CBS.",
            "format": "int32"
          }
        },
        "description": "ResourceAssignment Entity"
      },
      "ActivityCodeType": {
        "title": "ActivityCodeType",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this Activity Code Type was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this ActivityCodeType."
          },
          "EPSCodeTypeHierarchy": {
            "type": "string",
            "description": "The field that maintains the EPS Activity Code Type Hierarchy."
          },
          "EPSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated EPS.",
            "format": "int32"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsSecureCode": {
            "type": "boolean",
            "description": "The flag indicating whether this is a secure Activity Code Type."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this Activity Code Type was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this ActivityCodeType."
          },
          "Length": {
            "type": "integer",
            "description": "The maximum number of characters allowed for values of this activity code.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the activity code type."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RefProjectObjectIds": {
            "type": "string",
            "description": "The unique ID associated with a project whose activities have this code assigned. This data is only exported if more than one project is included in the export and if more than one project contains activities to which the EPS scoped activity code is assigned."
          },
          "Scope": {
            "type": "string",
            "description": "The scope of the code type: Global, EPS, or Project. An activity code with Global scope can be assigned to any activity. An activity code with EPS scope can be assigned only to an activity within a project under that particular EPS. Similarly, an activity code with Project scope can be assigned only to an activity within that particular project."
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          }
        },
        "description": "ActivityCodeType Entity"
      },
      "WBSCategoryExport": {
        "title": "WBSCategory",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for WBSCategory Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for WBSCategory Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "WBSCategory Entity"
      },
      "ProjectCodeExport": {
        "title": "ProjectCode",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectCode Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectCode Business Object",
              "enum": [
                "CODE_TYPE_NAME",
                "CODE_TYPE_OBJECT_ID",
                "CODE_VALUE",
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "SEQUENCE_NUMBER",
                "WEIGHT"
              ]
            }
          }
        },
        "description": "ProjectCode Entity"
      },
      "ProjectNoteExport": {
        "title": "ProjectNote",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectNote Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectNote Business Object",
              "enum": [
                "AVAILABLE_FOR_ACTIVITY",
                "AVAILABLE_FOR_EPS",
                "AVAILABLE_FOR_PROJECT",
                "AVAILABLE_FOR_WBS",
                "CREATE_DATE",
                "CREATE_USER",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NOTE",
                "NOTEBOOK_TOPIC_NAME",
                "NOTEBOOK_TOPIC_OBJECT_ID",
                "OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "RAW_TEXT_NOTE",
                "WBS_CODE",
                "WBS_NAME",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ProjectNote Entity"
      },
      "Shift": {
        "title": "Shift",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this shift was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this shift."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this shift was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The date this shift was last updated."
          },
          "Name": {
            "type": "string",
            "description": "The name of the shift."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ShiftPeriod": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShiftPeriod"
            }
          }
        },
        "description": "Shift Entity"
      },
      "ProjectCodeAssignmentExport": {
        "title": "ProjectCodeAssignment",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          }
        },
        "description": "ProjectCodeAssignment Entity"
      },
      "ShiftPeriod": {
        "type": "object",
        "properties": {
          "ObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartHour": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RiskThreshold": {
        "title": "RiskThreshold",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this risk score type was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the risk score type."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk score type was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the risk score type."
          },
          "Level": {
            "type": "integer",
            "description": "The number of Risk Threshold Levels. There are between two and nine.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the risk score type."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ThresholdType": {
            "type": "string",
            "description": "The type of Risk Threshold. Valid types are 'Probability', 'Tolerance', 'Schedule', 'Cost', 'Relative Schedule', 'Relative Cost' and 'User Defined'"
          }
        },
        "description": "RiskThreshold Entity"
      },
      "RiskResponseAction": {
        "title": "RiskResponseAction",
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "string",
            "description": "The id of an activity impacted by the Risk."
          },
          "ActivityName": {
            "type": "string",
            "description": "The name of an activity impacted by the Risk. The activity name does not have to be unique."
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated activity.",
            "format": "int32"
          },
          "ActualCost": {
            "type": "number",
            "description": "The actual cost.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this risk response action impact was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the risk response action impact."
          },
          "FinishDate": {
            "type": "string",
            "description": "The finish date of the risk response action. If an activity is assigned, the risk response action uses the activity finish date.",
            "format": "date-time"
          },
          "Id": {
            "type": "string",
            "description": "The unique Id of the risk response action."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk response action impact was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the risk response action impact."
          },
          "Name": {
            "type": "string",
            "description": "The name of the risk response action."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated risk.",
            "format": "int32"
          },
          "PlannedCost": {
            "type": "number",
            "description": "The planned cost.",
            "format": "double"
          },
          "PlannedFinishDate": {
            "type": "string",
            "description": "The planned finish date.",
            "format": "date-time"
          },
          "PlannedStartDate": {
            "type": "string",
            "description": "The planned start date.",
            "format": "date-time"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short name of the associated project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RemainingCost": {
            "type": "number",
            "description": "The remaining cost associated with the risk response action.",
            "format": "double"
          },
          "ResourceId": {
            "type": "string",
            "description": "The ID of the resource who owns the risk response action. The owner of the risk response action is responsible for resolving the risk response action."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource who owns the risk response action. The owner of the risk response action is responsible for resolving the risk response action."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "RiskId": {
            "type": "string",
            "description": "The ID of the Risk. Must be unique within a project."
          },
          "RiskObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated risk.",
            "format": "int32"
          },
          "RiskResponsePlanId": {
            "type": "string",
            "description": "The ID of the risk response plan. This must be unique within the project."
          },
          "RiskResponsePlanName": {
            "type": "string",
            "description": "The name of the risk response plan. This does not need to be unique within the project."
          },
          "RiskResponsePlanObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated risk response plan.",
            "format": "int32"
          },
          "Score": {
            "type": "integer",
            "description": "The risk score from the numeric PID after the response action has been completed.",
            "format": "int32"
          },
          "ScoreColor": {
            "type": "string",
            "description": "The color of the tolerance threshold for the score value."
          },
          "ScoreText": {
            "type": "string",
            "description": "The risk score from the alphanumeric PID after the response action has been completed."
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the risk response action. If an activity is assigned, the risk response action uses the activity start date.",
            "format": "date-time"
          },
          "Status": {
            "type": "string",
            "description": "The status of the risk response action. Valid values are 'Proposed', 'Sanctioned', 'Rejected', 'InProgress', and 'Complete'."
          }
        },
        "description": "RiskResponseAction Entity"
      },
      "FundingSourceExport": {
        "title": "FundingSource",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for FundingSource Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for FundingSource Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "FundingSource Entity"
      },
      "RiskMatrixExport": {
        "title": "RiskMatrix",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskMatrix Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskMatrix Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "IMPACT_THRESHOLD_LEVEL",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PROBABILITY_THRESHOLD_LEVEL",
                "RISK_SCORING_METHOD"
              ]
            }
          }
        },
        "description": "RiskMatrix Entity"
      },
      "Role": {
        "title": "Role",
        "type": "object",
        "properties": {
          "CalculateCostFromUnits": {
            "type": "boolean",
            "description": "The option that indicates whether costs and quantities are linked, and whether quantities should be updated when costs are updated."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this role was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this role."
          },
          "Id": {
            "type": "string",
            "description": "The short code that uniquely identifies the role."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this role was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this role."
          },
          "Name": {
            "type": "string",
            "description": "The name of the role. The role name uniquely identifies the role."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ParentObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent role of this role in the hierarchy.",
            "format": "int32"
          },
          "Responsibilities": {
            "type": "string",
            "description": "The responsibilities for the role."
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          }
        },
        "description": "Role Entity"
      },
      "ScheduleCheckOption": {
        "title": "ScheduleCheckOption",
        "type": "object",
        "properties": {
          "CheckBEITripwire": {
            "type": "boolean",
            "description": "The baseline execution index."
          },
          "CheckHardConstraints": {
            "type": "boolean",
            "description": "Checks for the constraints that prevent activities from being moved."
          },
          "CheckInvalidProgress": {
            "type": "boolean",
            "description": "Checks for activities that have invalid progress dates."
          },
          "CheckLags": {
            "type": "boolean",
            "description": "Checks for relationships that have a positive lag duration."
          },
          "CheckLargeDurations": {
            "type": "boolean",
            "description": "Checks for activities that have a remaining duration that is greater than the specified LargeDurationCriteria value.."
          },
          "CheckLargeFloat": {
            "type": "boolean",
            "description": "Checks for activities that have a float value greater than the specified LargeFloatCriteria value."
          },
          "CheckLateActivities": {
            "type": "boolean",
            "description": "Checks for activities that are scheduled to finish later than the project baseline."
          },
          "CheckLogic": {
            "type": "boolean",
            "description": "Checks for activities with missing predecessors or successors."
          },
          "CheckLongLags": {
            "type": "boolean",
            "description": "Checks for relationships that have a lag duration that is greater than the specified LongLagsCriteria value."
          },
          "CheckNegativeFloat": {
            "type": "boolean",
            "description": "Checks for activities that have a total float less than 0."
          },
          "CheckNegativeLags": {
            "type": "boolean",
            "description": "Checks for relationships that have a lag duration less than 0."
          },
          "CheckRelationShips": {
            "type": "boolean",
            "description": "Checks for the relationships that are set"
          },
          "CheckResources": {
            "type": "boolean",
            "description": "Checks for activities that do not have an expense or an assigned resource."
          },
          "CheckSoftConstraints": {
            "type": "boolean",
            "description": "Checks for constraints that do not prevent activities from being moved."
          },
          "HardConstraintTarget": {
            "type": "integer",
            "description": "Checks for constraints that prevent activities from being moved.",
            "format": "int32"
          },
          "LagsTarget": {
            "type": "integer",
            "description": "Relationships that have a positive lag duration.",
            "format": "int32"
          },
          "LargeDurationCriteria": {
            "type": "integer",
            "description": "The value of the Large Duration Criteria.",
            "format": "int32"
          },
          "LargeDurationTarget": {
            "type": "integer",
            "description": "Activities that have a remaining duration greater than the Large Duration Criteria.",
            "format": "int32"
          },
          "LargeFloatCriteria": {
            "type": "integer",
            "description": "The value of the Large Float Criteria.",
            "format": "int32"
          },
          "LargeFloatTarget": {
            "type": "integer",
            "description": "Activities that have a total float greater than the Large Float Criteria.",
            "format": "int32"
          },
          "LateActivitiesTarget": {
            "type": "integer",
            "description": "Activities that are scheduled to finish later than the project baseline.",
            "format": "int32"
          },
          "LogicTarget": {
            "type": "integer",
            "description": "Activities that are missing predecessors or successors.",
            "format": "int32"
          },
          "LongLagsCriteria": {
            "type": "integer",
            "description": "The value of the Long Lags Criteria.",
            "format": "int32"
          },
          "LongLagsTarget": {
            "type": "integer",
            "description": "Relationships that have a lag duration greater than the Long Lags Criteria.",
            "format": "int32"
          },
          "NegativeFloatTarget": {
            "type": "integer",
            "description": "Activities that have a total float less than 0.",
            "format": "int32"
          },
          "NegativeLagsTarget": {
            "type": "integer",
            "description": "Relationships that have a lag duration less than 0.",
            "format": "int32"
          },
          "ProgressDateTarget": {
            "type": "integer",
            "description": "Activities that have invalid progress dates.",
            "format": "int32"
          },
          "ProjPropTypeInt": {
            "type": "integer",
            "description": "The enum values that are associated with the Project Property Type.",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique identifier of the project which has a schedule you want to check.",
            "format": "int32"
          },
          "PropValue": {
            "type": "string",
            "description": "The Project Property Type value."
          },
          "RelationshipTarget": {
            "type": "integer",
            "description": "The relationships that are finish to start.",
            "format": "int32"
          },
          "ResourcesTarget": {
            "type": "integer",
            "description": "Activities that do not have an expense or an assigned resource.",
            "format": "int32"
          },
          "ScheduleCheckData": {
            "type": "string",
            "description": "The ScheduleCheck data."
          },
          "ScheduleCheckOptionsId": {
            "type": "integer",
            "description": "The unique id for ScheduleCheckOptions.",
            "format": "int32"
          },
          "SoftConstraintTarget": {
            "type": "integer",
            "description": "Constraints that do not prevent activities from being moved.",
            "format": "int32"
          },
          "BEITripwireTarget": {
            "type": "number",
            "description": "The baseline execution index.",
            "format": "double"
          }
        },
        "description": "ScheduleCheckOption Entity"
      },
      "UDFValueExport": {
        "title": "UDFValue",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          }
        },
        "description": "UDFValue Entity"
      },
      "ActivityCodeTypeExport": {
        "title": "Activity",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ActivityCodeType Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ActivityCodeType Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "EPS_CODE_TYPE_HIERARCHY",
                "EPS_OBJECT_ID",
                "IS_BASELINE",
                "IS_SECURE_CODE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LENGTH",
                "NAME",
                "OBJECT_ID",
                "PROJECT_OBJECT_ID",
                "REF_PROJECT_OBJECT_IDS",
                "SCOPE",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "Activity Entity"
      },
      "ActivityComment": {
        "title": "ActivityComment",
        "required": ["ActivityObjectId", "CommentText", "UserObjectId"],
        "type": "object",
        "properties": {
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which this comment is added.",
            "format": "int32"
          },
          "AssignmentObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "CommentDate": {
            "type": "string",
            "description": "The date on which this comment was added.",
            "format": "date-time"
          },
          "CommentText": {
            "type": "string",
            "description": "The comment."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this comment was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this comment."
          },
          "DeleteDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeleteUser": {
            "type": "string"
          },
          "IsRejected": {
            "type": "boolean"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this comment was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this comment."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "PersonalName": {
            "type": "string",
            "description": "The commented user's personal or actual name."
          },
          "ReadFlag": {
            "type": "boolean",
            "description": "The flag that identifies whether a comment is read by a particular user."
          },
          "RejectionComments": {
            "type": "string"
          },
          "TimeDiff": {
            "type": "string",
            "description": "This field gives the time difference between current and createdate."
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the user who added this comment.",
            "format": "int32"
          }
        },
        "description": "ActivityComment Entity"
      },
      "CBSDurationSummary": {
        "title": "CBSDurationSummary",
        "required": ["CBSObjectId", "ProjectId"],
        "type": "object",
        "properties": {
          "CBSObjectId": {
            "type": "integer",
            "description": "The internal CBS ID of the project. This ID cannot be used to load the CBS object directly.",
            "format": "int32"
          },
          "OriginalProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the project from which the project baseline was created, if the current project is a project baseline",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code of the associated project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "SummaryActualDuration": {
            "type": "number",
            "description": "The actual duration.",
            "format": "double"
          },
          "SummaryActualFinishDate": {
            "type": "string",
            "description": "The latest actual finish date of all activities in the CBS.",
            "format": "date-time"
          },
          "SummaryActualStartDate": {
            "type": "string",
            "description": "The earliest actual start date of all activities in the CBS.",
            "format": "date-time"
          },
          "SummaryPercentComplete": {
            "type": "number",
            "description": "The measure that indicates how much of the CBS baseline duration has been completed so far. Computed based on where the current data date falls between the activity's baseline start and finish dates. If the data date is earlier than the baseline start, the schedule % complete is 0. If the data date is later than the baseline finish, the schedule % complete is 100. The schedule % complete indicates how much of the CBS duration should be currently completed, relative to the selected baseline.",
            "format": "double"
          },
          "SummaryPlannedDuration": {
            "type": "number",
            "description": "The total working days between planned start and finish dates in the CBS.",
            "format": "double"
          },
          "SummaryPlannedFinishDate": {
            "type": "string",
            "description": "The latest planned finish date of all activities in the CBS.",
            "format": "date-time"
          },
          "SummaryPlannedStartDate": {
            "type": "string",
            "description": "The earliest planned start date of all activities in the CBS.",
            "format": "date-time"
          },
          "SummaryRemainingDuration": {
            "type": "number",
            "description": "The total working time from the CBS remaining start date to the remaining finish date.",
            "format": "double"
          },
          "SummaryRemainingFinishDate": {
            "type": "string",
            "description": "The date the resource is scheduled to finish the remaining work for the activity.",
            "format": "date-time"
          },
          "SummaryRemainingStartDate": {
            "type": "string",
            "description": "The earliest remaining start of all activities assigned to the CBS.",
            "format": "date-time"
          }
        },
        "description": "CBSDurationSummary Entity"
      },
      "ExportIpmdarProject": {
        "title": "ExportIpmdarProject",
        "type": "object",
        "properties": {
          "TemplateId": {
            "type": "string"
          },
          "ProjectId": {
            "type": "string"
          }
        },
        "description": "ExportIpmdarProject Entity"
      },
      "DownloadFilesResponse": {
        "title": "DownloadFilesResponse",
        "type": "object",
        "properties": {
          "NumberOfFiles": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "DownloadFilesResponse Entity"
      },
      "OverheadCode": {
        "title": "OverheadCode",
        "required": ["Description", "Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this nonworktype was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this nonworktype."
          },
          "Description": {
            "type": "string",
            "description": "The description of the overhead code."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this nonworktype was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this nonworktype."
          },
          "Name": {
            "type": "string",
            "description": "The name of the overhead code."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          }
        },
        "description": "OverheadCode Entity"
      },
      "ExpenseSpreadPeriod": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "FinancialPeriodObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ActualCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Risk": {
        "title": "Risk",
        "required": ["Id", "ProjectObjectId"],
        "type": "object",
        "properties": {
          "Cause": {
            "type": "string",
            "description": "The description of the cause of the Risk."
          },
          "CostThresholdId": {
            "type": "integer",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this risk was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the risk."
          },
          "Description": {
            "type": "string",
            "description": "The description of the Risk."
          },
          "Effect": {
            "type": "string",
            "description": "The description of the risks effect on the project."
          },
          "Exposure": {
            "type": "number",
            "description": "The calculated exposure value for the risk.",
            "format": "double"
          },
          "ExposureFinishDate": {
            "type": "string",
            "description": "The calculated date the exposure finishes for the risk.",
            "format": "date-time"
          },
          "ExposureStartDate": {
            "type": "string",
            "description": "The calculated date the exposure starts for the risk.",
            "format": "date-time"
          },
          "Id": {
            "type": "string",
            "description": "The ID of the Risk. Must be unique within a project."
          },
          "IdentifiedByResourceId": {
            "type": "string",
            "description": "The short code of the resource that identified the risk."
          },
          "IdentifiedByResourceName": {
            "type": "string",
            "description": "The name of the resource that identified the risk."
          },
          "IdentifiedByResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the resource that identified the risk.",
            "format": "int32"
          },
          "IdentifiedDate": {
            "type": "string",
            "description": "The date this risk was identified.",
            "format": "date-time"
          },
          "ImpactThresholdValues": {
            "type": "integer",
            "format": "int32"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the risk."
          },
          "Name": {
            "type": "string",
            "description": "The name of the Risk. Does not need to be unique."
          },
          "Note": {
            "type": "string",
            "description": "The comments associated with the Risk."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProbabilityThresholdId": {
            "type": "integer",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short name of the associated project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ResourceId": {
            "type": "string",
            "description": "The ID of the resource who owns the Risk. The owner of the Risk is responsible for resolving the Risk."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource who owns the Risk. The owner of the Risk is responsible for resolving the Risk."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "ResponseTotalCost": {
            "type": "number",
            "description": "The total estimated cost for the risk. If the risk has an associated response plan, the cost is calculated from the risk response actions for the response plan. Not available if user does not have View Project Costs-Financial privilege.",
            "format": "double"
          },
          "RiskCategoryName": {
            "type": "string",
            "description": "The name of the category to which the Risk is assigned. e.g. Weather, Health, Legal etc. A Risk can only be associated with a single category."
          },
          "RiskCategoryObjectId": {
            "type": "integer",
            "description": "The unique ID of the category to which the Risk is assigned. e.g. Weather, Health, Legal etc. A Risk can only be associated with a single category.",
            "format": "int32"
          },
          "ScheduleThresholdId": {
            "type": "integer",
            "format": "int32"
          },
          "Score": {
            "type": "integer",
            "description": "The calculated score value of the impact values assigned to the risk.",
            "format": "int32"
          },
          "ScoreColor": {
            "type": "string",
            "description": "The color of the tolerance threshold for the score value."
          },
          "ScoreText": {
            "type": "string",
            "description": "The calculated score text value of the impact values assigned to the risk."
          },
          "Status": {
            "type": "string",
            "description": "The current status of the Risk. Valid values are 'Proposed', 'Open', 'Rejected', 'Managed', and 'Impacted'."
          },
          "Type": {
            "type": "string",
            "description": "The type of the risk. Valid values are 'Threat' and 'Opportunity'."
          }
        },
        "description": "Risk Entity"
      },
      "RiskCategoryExport": {
        "title": "RiskCategory",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskCategory Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskCategory Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "RiskCategory Entity"
      },
      "ReadJobLog": {
        "title": "ReadJobLog",
        "type": "object",
        "properties": {
          "JobId": {
            "type": "string",
            "description": "The unique identifier for the job."
          }
        },
        "description": "ReadJobLog Entity"
      },
      "JobService": {
        "title": "JobService",
        "type": "object",
        "properties": {
          "AddProjectInfo": {
            "type": "string"
          },
          "CopyOptions": {
            "type": "string"
          },
          "ExportFilePath": {
            "type": "string",
            "description": "Exported file path."
          },
          "ExportPlfFileNames": {
            "type": "string",
            "description": "File names of exported PLF files."
          },
          "ExportXMLByte": {
            "type": "string",
            "description": "Export byte array."
          },
          "FileName": {
            "type": "string",
            "description": "Exported File Name."
          },
          "ImportXMLByte": {
            "type": "string",
            "description": "Import byte array."
          },
          "JobData": {
            "type": "string",
            "description": "The job data for the job service."
          },
          "JobDataX": {
            "type": "string",
            "description": "The job data X for the job service."
          },
          "JobRecurringType": {
            "type": "string",
            "description": "JobRecurringType for job service"
          },
          "JobStatus": {
            "type": "string",
            "description": "The status of the job."
          },
          "JobType": {
            "type": "string",
            "description": "The type of the job service."
          },
          "JobTypeKey": {
            "type": "string",
            "description": "Project ObjectId to be used by job."
          },
          "LastRunDate": {
            "type": "string",
            "description": "LastRunDate for job service.",
            "format": "date-time"
          },
          "Name": {
            "type": "string",
            "description": "The name of the job service."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "PlfDirName": {
            "type": "string",
            "description": "PlfDirName"
          },
          "ProjectInfo": {
            "type": "string"
          },
          "TargetWbsId": {
            "type": "integer",
            "format": "int32"
          },
          "UserId": {
            "type": "integer",
            "description": "The ID of the user that ran a job service.",
            "format": "int32"
          }
        },
        "description": "JobService Entity"
      },
      "ResourceRate": {
        "title": "ResourceRate",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this resource rate was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this resource rate."
          },
          "EffectiveDate": {
            "type": "string",
            "description": "The effective date for the resource price and maximum units per time.",
            "format": "date-time"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this resource rate was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this resource rate."
          },
          "MaxUnitsPerTime": {
            "type": "number",
            "description": "The maximum work units per time this resource can perform on all their assigned activities. For example, a person working full time could perform 8 hours of work per day. A department of five people may perform at 5 days per day.",
            "format": "double"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "PricePerUnit": {
            "type": "number",
            "description": "The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "PricePerUnit2": {
            "type": "number",
            "description": "The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "PricePerUnit3": {
            "type": "number",
            "description": "The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "PricePerUnit4": {
            "type": "number",
            "description": "The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "PricePerUnit5": {
            "type": "number",
            "description": "The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the resource."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "ShiftPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated shift.",
            "format": "int32"
          }
        },
        "description": "ResourceRate Entity"
      },
      "ProjectDocumentExport": {
        "title": "ProjectDocument",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectDocument Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectDocument Business Object",
              "enum": [
                "ACTIVITY_ID",
                "ACTIVITY_NAME",
                "ACTIVITY_OBJECT_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "DOCUMENT_CATEGORY_NAME",
                "DOCUMENT_OBJECT_ID",
                "DOCUMENT_STATUS_NAME",
                "DOCUMENT_TITLE",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "IS_WORK_PRODUCT",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PARENT_WBS_OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "WBS_CODE",
                "WBS_NAME",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ProjectDocument Entity"
      },
      "ProjectProfile": {
        "title": "ProjectProfile",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this project profile was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project profile."
          },
          "IsDefault": {
            "type": "boolean",
            "description": "The flag that indicates this security profile is the default profile assigned to UserOBS objects. When a ProjectProfile object is deleted from the database, all UserOBS objects assigned to that profile are reassigned to the default profile. You cannot not delete the default profile."
          },
          "IsSuperUser": {
            "type": "boolean",
            "description": "The flag that indicates this is the project superuser profile, which gives a user read/write privileges for all project and OBS specific information and features"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project profile was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project profile."
          },
          "Name": {
            "type": "string",
            "description": "The unique name of this project profile"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "Privilege": {
            "type": "array",
            "description": "Privilege",
            "items": {
              "$ref": "#/components/schemas/Privilege"
            }
          }
        },
        "description": "ProjectProfile Entity"
      },
      "CreateResourceAssignmentUpdateResponse": {
        "title": "CreateResourceAssignmentUpdateResponse",
        "type": "object",
        "properties": {
          "ResourceAssignmentObjectId": {
            "type": "integer",
            "description": "The unique identifier for the ResourceAssignment. You can specify one or more ResourceAssignmentObjectID.",
            "format": "int32"
          },
          "ChangeSetObjectId": {
            "type": "string",
            "description": "The unique ID generated by the system for the change set object."
          }
        },
        "description": "CreateResourceAssignmentUpdateResponse Entity"
      },
      "EPSSpendingPlan": {
        "title": "EPSSpendingPlan",
        "required": ["Date", "EPSObjectId"],
        "type": "object",
        "properties": {
          "BenefitPlan": {
            "type": "number",
            "description": "The editable monthly profit portion for each month for the EPS.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this EPS Spending plan was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this EPS Spending plan."
          },
          "Date": {
            "type": "string",
            "description": "The start of a spending/benefit plan time period for the EPS.",
            "format": "date-time"
          },
          "EPSId": {
            "type": "string",
            "description": "The short code assigned to the associated EPS."
          },
          "EPSName": {
            "type": "string",
            "description": "The name of the EPS element associated with this spending plan."
          },
          "EPSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated EPS for this EPS spending plan.",
            "format": "int32"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this EPS Spending plan was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this EPS Spending plan."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "SpendingPlan": {
            "type": "number",
            "description": "The editable total monthly expenditure for the EPS.",
            "format": "double"
          }
        },
        "description": "EPSSpendingPlan Entity"
      },
      "FinancialPeriodExport": {
        "title": "FinancialPeriod",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for FinancialPeriod Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for FinancialPeriod Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "END_DATE",
                "FINANCIAL_PERIOD_TEMPLATE_ID",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "START_DATE"
              ]
            }
          }
        },
        "description": "FinancialPeriod Entity"
      },
      "RiskMatrixScore": {
        "title": "RiskMatrixScore",
        "required": ["ProbabilityThresholdLevel", "RiskMatrixObjectId"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this risk matrix score was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the risk matrix score."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk matrix score was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the risk matrix score."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProbabilityThresholdLevel": {
            "type": "integer",
            "description": "The level number of the probability threshold. Valid numbers are 1-9.",
            "format": "int32"
          },
          "RiskMatrixName": {
            "type": "string",
            "description": "The name of the Risk Matrix."
          },
          "RiskMatrixObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Matrix.",
            "format": "int32"
          },
          "Severity1": {
            "type": "integer",
            "description": "The first severity level of the Risk Matrix Score.",
            "format": "int32"
          },
          "Severity1Label": {
            "type": "string",
            "description": "The label for the first severity level."
          },
          "Severity2": {
            "type": "integer",
            "description": "The second severity level of the Risk Matrix Score.",
            "format": "int32"
          },
          "Severity2Label": {
            "type": "string",
            "description": "The label for the second severity level."
          },
          "Severity3": {
            "type": "integer",
            "description": "The third severity level of the Risk Matrix Score.",
            "format": "int32"
          },
          "Severity3Label": {
            "type": "string",
            "description": "The label for the third severity level."
          },
          "Severity4": {
            "type": "integer",
            "description": "The fourth severity level of the Risk Matrix Score.",
            "format": "int32"
          },
          "Severity4Label": {
            "type": "string",
            "description": "The label for the forth severity level."
          },
          "Severity5": {
            "type": "integer",
            "description": "The fifth severity level of the Risk Matrix Score.",
            "format": "int32"
          },
          "Severity5Label": {
            "type": "string",
            "description": "The label for the fith severity level."
          },
          "Severity6": {
            "type": "integer",
            "description": "The sixth severity level of the Risk Matrix Score.",
            "format": "int32"
          },
          "Severity6Label": {
            "type": "string",
            "description": "The sixth for the first severity level."
          },
          "Severity7": {
            "type": "integer",
            "description": "The seventh severity level of the Risk Matrix Score.",
            "format": "int32"
          },
          "Severity7Label": {
            "type": "string",
            "description": "The label for the seventh severity level."
          },
          "Severity8": {
            "type": "integer",
            "description": "The eighth severity level of the Risk Matrix Score.",
            "format": "int32"
          },
          "Severity8Label": {
            "type": "string",
            "description": "The label for the eighth severity level."
          },
          "Severity9": {
            "type": "integer",
            "description": "The ninth severity level of the Risk Matrix Score.",
            "format": "int32"
          },
          "Severity9Label": {
            "type": "string",
            "description": "The label for the ninth severity level."
          }
        },
        "description": "RiskMatrixScore Entity"
      },
      "StandardWorkWeek": {
        "type": "object",
        "properties": {
          "StandardWorkHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardWorkHours"
            }
          }
        }
      },
      "BaselineProject": {
        "title": "BaselineProject",
        "required": ["Id", "Name", "ParentEPSObjectId"],
        "type": "object",
        "properties": {
          "ActivityDefaultActivityType": {
            "type": "string",
            "description": "The default type for activities. Possible values are 'Task Dependent', 'Resource Dependent', 'Level of Effort', or 'Milestone'. A 'Task Dependent' activity is scheduled using the activity's calendar rather than the calendars of the assigned resources. A 'Resource Dependent' activity is scheduled using the calendars of the assigned resources. This type is used when several resources are assigned to the activity, but they may work separately. A 'Milestone' is a zero-duration activity without resources, marking a significant project event. A 'Level of Effort' activity has a duration that is determined by its dependent activities. Administration-type activities are typically 'Level of Effort'."
          },
          "ActivityDefaultCalendarObjectId": {
            "type": "integer",
            "description": "The unique ID of the calendar assigned to new activities by default. Can be null for EPS and baselines.",
            "format": "int32"
          },
          "ActivityDefaultCostAccountObjectId": {
            "type": "integer",
            "description": "The unique ID of the cost account assigned to new activities and project expenses by default.",
            "format": "int32"
          },
          "ActivityDefaultDurationType": {
            "type": "string",
            "description": "The duration type assigned to new activities by default. Valid values are 'Fixed Units/Time', 'Fixed Duration and Units/Time', 'Fixed Units', or 'Fixed Duration and Units'."
          },
          "ActivityDefaultPercentCompleteType": {
            "type": "string",
            "description": "The percent complete type assigned to new activities by default. Valid values are 'Physical', 'Duration', and 'Units'."
          },
          "ActivityDefaultPricePerUnit": {
            "type": "number",
            "description": "The price used to estimate resource costs for activities that have planned, actual, or remaining units, but no resource assignments. This price is also used to compute costs for activities in cases where resources are assigned but the resources have no prices. Resource cost is computed as the resource units multiplied by the price per time.",
            "format": "double"
          },
          "ActivityDefaultReviewRequired": {
            "type": "boolean",
            "description": "The indicator that determines whether status changes for new activities must be approved by default."
          },
          "ActivityIdBasedOnSelectedActivity": {
            "type": "boolean",
            "description": "The flag that indicates how to auto-number activity IDs for new activities-Y/N - Y means use the selected activity's activity ID as prefix, N means use standard auto-numbering based on the prefix, suffix. Default = 'N'"
          },
          "ActivityIdIncrement": {
            "type": "integer",
            "description": "The increment used for auto-numbering of activity IDs. When a new activity is created, the activity ID is automatically generated using auto-numbering. Activity ID auto-numbering concatenates the prefix and the suffix, with the suffix incremented to make the code unique. Example: 'A', '1000', '10' yields activity IDs of 'A1010', 'A1020', 'A1030', etc.",
            "format": "int32"
          },
          "ActivityIdPrefix": {
            "type": "string",
            "description": "The prefix used for auto-numbering of activity IDs. When a new activity is created, the activity ID is automatically generated using auto-numbering. Activity ID auto-numbering concatenates the prefix and the suffix, with the suffix incremented to make the code unique. Example: 'A', '1000', '10' yields activity IDs of 'A1010', 'A1020', 'A1030', etc."
          },
          "ActivityIdSuffix": {
            "type": "integer",
            "description": "The suffix used for auto-numbering of activity IDs. When a new activity is created, the activity ID is automatically generated using auto-numbering. Activity ID auto-numbering concatenates the prefix and the suffix, with the suffix incremented to make the code unique. Example: 'A', '1000', '10' yields activity IDs of 'A1010', 'A1020', 'A1030', etc.",
            "format": "int32"
          },
          "ActivityPercentCompleteBasedOnActivitySteps": {
            "type": "boolean",
            "description": "The flag that indicates whether activity physical percent complete is automatically computed from the activity steps completed."
          },
          "AddActualToRemaining": {
            "type": "boolean",
            "description": "The flag that indicates whether to add actual to remaining or to subtract actual from at complete when actual units and costs are updated. Default = 'Y'"
          },
          "AddedBy": {
            "type": "string",
            "description": "The name of the user who added the project to the database."
          },
          "AllowStatusReview": {
            "type": "boolean",
            "description": "The indicator that determines whether status updates to activities in a project are eligible for manual approval before commiting changes."
          },
          "AnnualDiscountRate": {
            "type": "number",
            "description": "The user-defined number field that identifies the discount rate for the project.",
            "format": "double"
          },
          "AnticipatedFinishDate": {
            "type": "string",
            "description": "The anticipated finish date of WBS, project and EPS elements. User-entered - not dependent upon any other fields. If there are no children, the anticipated finish date will be the finish date displayed in the columns.",
            "format": "date-time"
          },
          "AnticipatedStartDate": {
            "type": "string",
            "description": "The anticipated start date of WBS, project and EPS elements. User-entered - not dependent upon any other fields. If there are no children, the anticipated start date will be the start date displayed in the columns.",
            "format": "date-time"
          },
          "AssignmentDefaultDrivingFlag": {
            "type": "boolean",
            "description": "The default flag assigned to new assignments, to indicate whether assignments will drive activity dates."
          },
          "AssignmentDefaultRateType": {
            "type": "string",
            "description": "The default rate type when adding resource assignments to a project. Valid values are 'Price / Unit', 'Price / Unit2', 'Price / Unit3', 'Price / Unit4', and 'Price / Unit5'."
          },
          "BaselineTypeName": {
            "type": "string",
            "description": "The name of the baseline type for this project baseline. Baseline types are used to categorize project baselines."
          },
          "BaselineTypeObjectId": {
            "type": "integer",
            "description": "The unique ID of the baseline type.",
            "format": "int32"
          },
          "CheckOutDate": {
            "type": "string",
            "description": "The date on which the baseline project was checked out of the Project Management database.",
            "format": "date-time"
          },
          "CheckOutStatus": {
            "type": "boolean",
            "description": "The flag that indicates that the baseline project is currently checked out to an external file or database and is being managed remotely."
          },
          "CheckOutUserObjectId": {
            "type": "integer",
            "description": "The unique ID of the User that checked out this baseline project.",
            "format": "int32"
          },
          "ContainsSummaryData": {
            "type": "boolean",
            "description": "The flag that indicates that the WBS has been summarized."
          },
          "CostQuantityRecalculateFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether quantities should be updated when costs are updated, if costs and quantities are linked."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this project baseline was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project baseline."
          },
          "CriticalActivityFloatLimit": {
            "type": "number",
            "description": "The duration used to determine if an activity is critical. When an activity has total float that is less than or equal to this duration, the activity is marked as critical.",
            "format": "double"
          },
          "CriticalActivityPathType": {
            "type": "string",
            "description": "The critical path type, which indicates how critical path activities are identified for the project, based on either 'Critical Float' or 'Longest Path'."
          },
          "CurrentBudget": {
            "type": "number",
            "description": "The sum of the original budget plus the approved and pending budgets from the budget change log.",
            "format": "double"
          },
          "CurrentVariance": {
            "type": "number",
            "description": "The current budget minus the total spending plan.",
            "format": "double"
          },
          "DataDate": {
            "type": "string",
            "description": "The current data date for the project. The project status is up to date as of the data date. The data date is modified when project actuals are applied.",
            "format": "date-time"
          },
          "DateAdded": {
            "type": "string",
            "description": "The date on which the project was added to the Project Management database.",
            "format": "date-time"
          },
          "DefaultPriceTimeUnits": {
            "type": "string",
            "description": "The time units associated with the project's default price per time. Valid values are 'Hour', 'Day', 'Week', 'Month', and 'Year'."
          },
          "Description": {
            "type": "string",
            "description": "The description of the Project."
          },
          "DiscountApplicationPeriod": {
            "type": "string",
            "description": "The timescale for entering ROI spending and benefit plan. Valid values are 'Month', 'Quarter', or 'Year'."
          },
          "DistributedCurrentBudget": {
            "type": "number",
            "description": "The sum of the current budget values from one level lower.",
            "format": "double"
          },
          "EnablePublication": {
            "type": "boolean",
            "description": "Enables the project to be processed by the Project Arbiter service."
          },
          "EnableSummarization": {
            "type": "boolean",
            "description": "The flag which, when true, causes the Summarizer service to automatically summarize the project. If this is false, the project will be skipped during the summary run."
          },
          "FinancialPeriodTmplId": {
            "type": "integer",
            "format": "int32"
          },
          "FinishDate": {
            "type": "string",
            "description": "The finish date of the baseline project. This field depends on summary data that was created when the original project was last summarized before this baseline was created.",
            "format": "date-time"
          },
          "FiscalYearStartMonth": {
            "type": "integer",
            "description": "The month that marks the beginning of the fiscal year for the project.",
            "format": "int32"
          },
          "ForecastFinishDate": {
            "type": "string",
            "description": "The alternate end date to be optionally used by the scheduler.",
            "format": "date-time"
          },
          "ForecastStartDate": {
            "type": "string",
            "description": "The alternate start date to be optionally used by the scheduler.",
            "format": "date-time"
          },
          "GUID": {
            "type": "string",
            "description": "The globally unique ID generated by the system."
          },
          "HasFutureBucketData": {
            "type": "boolean",
            "description": "The flag that indicates whether a resource assignment in the baseline has future bucket data."
          },
          "HistoryInterval": {
            "type": "string",
            "description": "The time interval for how historical project data is stored for use in P6 Analytics, could be 'Month', 'Week', 'Quarter', 'Year' and 'Financial Period'."
          },
          "HistoryLevel": {
            "type": "string",
            "description": "The level of historical project data that is stored for use in P6 Analytics, can be 'None', 'Project', 'WBS' and 'Activity'."
          },
          "Id": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes."
          },
          "IndependentETCLaborUnits": {
            "type": "number",
            "description": "The user-entered ETC total labor.",
            "format": "double"
          },
          "IndependentETCTotalCost": {
            "type": "number",
            "description": "The user-entered ETC total cost.",
            "format": "double"
          },
          "LastBaselineUpdateDate": {
            "type": "string",
            "description": "The date this project baseline was last changed by Baseline Update in Project Management.",
            "format": "date-time"
          },
          "LastFinancialPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the last closed financial period for the baseline project.",
            "format": "int32"
          },
          "LastLevelDate": {
            "type": "string",
            "description": "The date the project was last leveled.",
            "format": "date-time"
          },
          "LastPublishedOn": {
            "type": "string",
            "description": "The date the project was last published.",
            "format": "date-time"
          },
          "LastScheduleDate": {
            "type": "string",
            "description": "The date the project was last scheduled.",
            "format": "date-time"
          },
          "LastSummarizedDate": {
            "type": "string",
            "description": "The date the project was last summarized.",
            "format": "date-time"
          },
          "LastUpdateBaselineOptions": {
            "type": "string",
            "description": "The last options used when the baseline project was updated by the Update Baseline module."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project baseline was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project baseline."
          },
          "LevelingPriority": {
            "type": "integer",
            "description": "The priority for scheduling.",
            "format": "int32"
          },
          "LinkActualToActualThisPeriod": {
            "type": "boolean",
            "description": "The flag that determines whether actual units and costs are linked to actual-this-period units and costs. Default = 'Y'"
          },
          "LinkPercentCompleteWithActual": {
            "type": "boolean",
            "description": "The flag that determines whether actual units and cost should be recalculated when percent complete changes. Default = 'N'"
          },
          "LinkPlannedAndAtCompletionFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether the At Completion Cost/Units should be linked to Planned Cost/Units for not-started activities. Default = 'Y'"
          },
          "LocationName": {
            "type": "string",
            "description": "The name of the location assigned to the project."
          },
          "LocationObjectId": {
            "type": "integer",
            "description": "The unique ID of the location assigned to the project.",
            "format": "int32"
          },
          "MustFinishByDate": {
            "type": "string",
            "description": "The date by which all project activities must finish. If entered, it is used as the project late finish date by the project scheduler.",
            "format": "date-time"
          },
          "Name": {
            "type": "string",
            "description": "The name of the baseline project."
          },
          "OBSName": {
            "type": "string",
            "description": "The name of the person/role in the organization, sometimes referred to as the \"responsible manager\"."
          },
          "OBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the project manager from the project's OBS tree who is responsible for the WBS.",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OriginalBudget": {
            "type": "number",
            "description": "The original budget for the baseline project.",
            "format": "double"
          },
          "OriginalProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the project from which the project baseline was created, if the current project is a project baseline.",
            "format": "int32"
          },
          "OwnerResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the Owner Resource of this baseline project.",
            "format": "int32"
          },
          "ParentEPSId": {
            "type": "string"
          },
          "ParentEPSName": {
            "type": "string"
          },
          "ParentEPSObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent EPS of this baseline project.",
            "format": "int32"
          },
          "PlannedStartDate": {
            "type": "string",
            "description": "The planned start date of the project. Used by the project scheduler.",
            "format": "date-time"
          },
          "PrimaryResourcesCanMarkActivitiesAsCompleted": {
            "type": "boolean",
            "description": "The flag that indicates whether primary resources can mark the project activities as completed. If not selected, a primary resource can only mark an activity as For Review. In this case the project manager reviews the activity and marks it as either Rejected or completed."
          },
          "ProjectForecastStartDate": {
            "type": "string",
            "description": "The alternate start date to be optionally used by the scheduler. The user sets the alternate start date by dragging the project bar in the Gantt Chart while manually leveling the resource profile in a resource analysis layout.",
            "format": "date-time"
          },
          "ProjectScheduleType": {
            "type": "string",
            "description": "The type of schedule data to send to Primavera Unifier."
          },
          "ProposedBudget": {
            "type": "number",
            "description": "The sum of the original budget plus the approved and pending budgets from the budget change log.",
            "format": "double"
          },
          "PublicationPriority": {
            "type": "integer",
            "description": "A priority value the Project Arbiter service uses to determine the order in which projects are submitted to the service queue, where 1 is highest priority and 100 is lowest priority.",
            "format": "int32"
          },
          "ResetPlannedToRemainingFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether to reset Planned Duration and Units to Remaining Duration and Units, or to reset Remaining Duration and Units to Planned Duration and Units when the Activity Status is or becomes not started. Default = 'Y'"
          },
          "ResourceCanBeAssignedToSameActivityMoreThanOnce": {
            "type": "boolean",
            "description": "The flag that indicates whether a resource can be assigned more than once to the same activity. This is useful when the resource is expected to perform more than one role on an activity, for example, documentation plus QA."
          },
          "ResourceName": {
            "type": "string"
          },
          "ResourcesCanAssignThemselvesToActivities": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet application users are allowed to assign themselves to activities in this project."
          },
          "ResourcesCanAssignThemselvesToActivitiesOutsideOBSAccess": {
            "type": "boolean"
          },
          "ResourcesCanEditAssignmentPercentComplete": {
            "type": "boolean",
            "description": "The flag that indicates whether the project's resource can use the timesheet application to update remaining units or percent complete for their activities."
          },
          "RiskExposure": {
            "type": "number",
            "description": "The calculated exposure value for the project.",
            "format": "double"
          },
          "RiskLevel": {
            "type": "string",
            "description": "The risk level assigned to the project: 'Very High', 'High', 'Medium', 'Low', and 'Very Low'."
          },
          "RiskMatrixObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Matrix.",
            "format": "int32"
          },
          "RiskScore": {
            "type": "integer",
            "description": "The calculated risk score for the project.",
            "format": "int32"
          },
          "ScheduledFinishDate": {
            "type": "string",
            "description": "The early finish date of the latest activity in the project, as computed by the project scheduler.",
            "format": "date-time"
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the baseline project. This field depends on summary data that was created when the original project was last summarized before this baseline was created.",
            "format": "date-time"
          },
          "Status": {
            "type": "string",
            "description": "The project status: 'Planned', 'Active', 'Inactive', 'What-If', or 'Requested'."
          },
          "StatusReviewerName": {
            "type": "string",
            "description": "The the name of the user reviewing status updates."
          },
          "StatusReviewerObjectId": {
            "type": "string",
            "description": "The unique ID of the user reviewing status updates."
          },
          "StrategicPriority": {
            "type": "integer",
            "description": "The baseline project's priority. The range is from 1 to 10,000.",
            "format": "int32"
          },
          "SummarizeToWBSLevel": {
            "type": "integer",
            "description": "The maximum level within the project's WBS to perform summarization - default to 2.",
            "format": "int32"
          },
          "SummarizedDataDate": {
            "type": "string",
            "description": "The data date of the project when it was last summarized-only updated by summarizer.",
            "format": "date-time"
          },
          "SummaryAccountingVarianceByCost": {
            "type": "number",
            "description": "The Planned Value minus the Actual Cost. A negative value indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryAccountingVarianceByLaborUnits": {
            "type": "number",
            "description": "The Planned Value Labor Units minus the Actual Units. Negative value indicates that Actual Units have exceeded the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently in progress.",
            "format": "int32"
          },
          "SummaryActualDuration": {
            "type": "number",
            "description": "The actual duration.",
            "format": "double"
          },
          "SummaryActualExpenseCost": {
            "type": "number",
            "description": "The actual costs for all project expenses associated with the project.",
            "format": "double"
          },
          "SummaryActualFinishDate": {
            "type": "string",
            "description": "The latest actual finish date of all activities in the project.",
            "format": "date-time"
          },
          "SummaryActualLaborCost": {
            "type": "number",
            "description": "The actual cost for all labor resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualLaborUnits": {
            "type": "number",
            "description": "The actual labor units.",
            "format": "double"
          },
          "SummaryActualMaterialCost": {
            "type": "number",
            "description": "The actual units for all material resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualNonLaborCost": {
            "type": "number",
            "description": "The actual units for all nonlabor resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualNonLaborUnits": {
            "type": "number",
            "description": "The actual nonlabor units.",
            "format": "double"
          },
          "SummaryActualStartDate": {
            "type": "string",
            "description": "The earliest actual start date of all activities in the project.",
            "format": "date-time"
          },
          "SummaryActualThisPeriodCost": {
            "type": "number",
            "description": "The actual this period cost (will be labor or nonlabor).",
            "format": "double"
          },
          "SummaryActualThisPeriodLaborCost": {
            "type": "number",
            "description": "The actual this period labor cost",
            "format": "double"
          },
          "SummaryActualThisPeriodLaborUnits": {
            "type": "number",
            "description": "The actual this period labor units.",
            "format": "double"
          },
          "SummaryActualThisPeriodMaterialCost": {
            "type": "number",
            "description": "The actual this period material cost.",
            "format": "double"
          },
          "SummaryActualThisPeriodNonLaborCost": {
            "type": "number",
            "description": "The actual this period nonlabor cost.",
            "format": "double"
          },
          "SummaryActualThisPeriodNonLaborUnits": {
            "type": "number",
            "description": "The actual this period nonlabor units.",
            "format": "double"
          },
          "SummaryActualTotalCost": {
            "type": "number",
            "description": "The actual labor cost + actual nonlabor cost + actual expense cost as of the project data date.",
            "format": "double"
          },
          "SummaryActualValueByCost": {
            "type": "number",
            "description": "The actual total cost incurred on the activity as of the project data date, computed as Actual Labor Cost + Actual Nonlabor Cost + Actual Material Cost + Actual Expense Cost.",
            "format": "double"
          },
          "SummaryActualValueByLaborUnits": {
            "type": "number",
            "description": "The actual total labor units for the activity as of the project data date (i.e., actual total cost by labor units).",
            "format": "double"
          },
          "SummaryAtCompletionDuration": {
            "type": "number",
            "description": "The duration at completion.",
            "format": "double"
          },
          "SummaryAtCompletionExpenseCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining cost for all project expenses associated with the cost account. Computed as Actual Expense Cost + Remaining Expense Cost.",
            "format": "double"
          },
          "SummaryAtCompletionLaborCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining costs for all labor resources assigned to the activity. Computed as actual labor cost + remaining labor cost. Same as the planned labor costs if the activity is not started and the actual labor costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionLaborUnits": {
            "type": "number",
            "description": "The sum of the actual plus remaining units for all labor resources assigned to the activity. Computed as actual labor units + remaining labor units. Same as the planned labor units if the activity is not started and the actual labor units once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionMaterialCost": {
            "type": "number",
            "description": "The material cost at completion. It is the sum of the actual plus remaining costs for all material resources assigned to the activity. Computed as actual material cost + remaining material cost. Same as the planned material costs if the activity is not started and the actual material costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionNonLaborCost": {
            "type": "number",
            "description": "The nonlabor cost at completion. It is the sum of the actual plus remaining costs for all nonlabor resources assigned to the activity. Computed as actual nonlabor cost + remaining nonlabor cost. Same as the planned nonlabor costs if the activity is not started and the actual nonlabor costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionNonLaborUnits": {
            "type": "number",
            "description": "The nonlabor units at completion. It is the sum of the actual plus remaining units for all nonlabor resources assigned to the activity. Computed as actual nonlabor units + remaining nonlabor units. Same as the planned nonlabor units if the activity is not started and the actual nonlabor units once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionTotalCost": {
            "type": "number",
            "description": "The estimated cost at completion for the activity. Computed as the actual total cost plus the estimate-to-complete cost; EAC = ACWP + ETC. Note that the method for computing ETC depends on the earned-value technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryAtCompletionTotalCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Total Cost - At Completion Total Cost.",
            "format": "double"
          },
          "SummaryBaselineCompletedActivityCount": {
            "type": "integer",
            "description": "The number of completed activities in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineDuration": {
            "type": "number",
            "description": "The planned duration for the activity in the primary baseline. Planned duration is the total working time from the activity current start date to the current finish date. Same as the actual duration plus the remaining duration. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "SummaryBaselineExpenseCost": {
            "type": "number",
            "description": "The planned cost for all project expenses associated with the activity in the primary baseline. Computed as the baseline actual expense cost plus the baseline remaining expense cost.",
            "format": "double"
          },
          "SummaryBaselineFinishDate": {
            "type": "string",
            "description": "The current latest finish date of all activities in the project for the current baseline.",
            "format": "date-time"
          },
          "SummaryBaselineInProgressActivityCount": {
            "type": "integer",
            "description": "The number of in-progress activities in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineLaborCost": {
            "type": "number",
            "description": "The planned cost for all labor resources assigned to the activity in the primary baseline. Computed from the baseline At Completion labor units. If no resources are assigned, computed as the activity Baseline Planned Labor Units * Project Default Price / Time.",
            "format": "double"
          },
          "SummaryBaselineLaborUnits": {
            "type": "number",
            "description": "The planned units for all labor resources assigned to the activity in the primary baseline. Computed as the baseline actual labor units plus the baseline remaining labor units.",
            "format": "double"
          },
          "SummaryBaselineMaterialCost": {
            "type": "number",
            "description": "The planned cost for all material resources assigned to the activity in the primary baseline. Computed from the baseline At Completion nonlabor units. If no resources are assigned.",
            "format": "double"
          },
          "SummaryBaselineNonLaborCost": {
            "type": "number",
            "description": "The planned cost for all nonlabor resources assigned to the activity in the primary baseline. Computed from the baseline At Completion nonlabor units. If no resources are assigned, computed as the activity Baseline Planned Nonlabor Units * Project Default Price / Time.",
            "format": "double"
          },
          "SummaryBaselineNonLaborUnits": {
            "type": "number",
            "description": "The planned units for all nonlabor resources assigned to the activity in the primary baseline. Computed as the baseline actual nonlabor units plus the baseline remaining nonlabor units.",
            "format": "double"
          },
          "SummaryBaselineNotStartedActivityCount": {
            "type": "integer",
            "description": "The number of activities not started in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineStartDate": {
            "type": "string",
            "description": "The current earliest start date of all activities in the WBS for the current baseline.",
            "format": "date-time"
          },
          "SummaryBaselineTotalCost": {
            "type": "number",
            "description": "The Planned Total Cost for the activity in the primary baseline, including labor resources, nonlabor resources, and project expenses. Baseline Planned Total Cost = Baseline Planned Labor Cost + Baseline Planned Nonlabor Cost + Baseline Planned Expense Cost.",
            "format": "double"
          },
          "SummaryBudgetAtCompletionByCost": {
            "type": "number",
            "description": "The Planned Total Cost through activity completion. Computed as Planned Labor Cost + Planned Nonlabor Cost + Planned Expense Cost, same as the Planned Total Cost.",
            "format": "double"
          },
          "SummaryBudgetAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Baseline Planned Labor Cost + Baseline Planned Nonlabor Cost + Baseline Planned Expense Cost. Same as the Baseline Planned Total Cost.",
            "format": "double"
          },
          "SummaryCompletedActivityCount": {
            "type": "integer",
            "description": "The number of activities that have an Actual Finish in the WBS.",
            "format": "int32"
          },
          "SummaryCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all nonlabor resources assigned. Computed as Actual Nonlabor Cost / At Completion Nonlabor Cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryCostPercentOfPlanned": {
            "type": "number",
            "description": "The activity actual cost percent of planned. Computed as actual total cost / baseline total cost * 100, or equivalently as ACWP / BAC * 100. The value can exceed 100. The baseline total cost is the activity's at completion cost from the current baseline. This field is named SummaryCostPercentOfBudget in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "SummaryCostPerformanceIndexByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Actual Cost. A value less than 1 indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryCostPerformanceIndexByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units / Actual Labor Units.",
            "format": "double"
          },
          "SummaryCostVarianceByCost": {
            "type": "number",
            "description": "The Earned Value minus the Actual Cost. A negative value indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryCostVarianceByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Cost minus Actual Value Labor Cost.",
            "format": "double"
          },
          "SummaryCostVarianceIndex": {
            "type": "number",
            "description": "The value that is calculated as the Cost Variance divided by Earned Value.",
            "format": "double"
          },
          "SummaryCostVarianceIndexByCost": {
            "type": "number",
            "description": "The Cost Variance divided by Earned Value.",
            "format": "double"
          },
          "SummaryCostVarianceIndexByLaborUnits": {
            "type": "number",
            "description": "The Cost Variance Labor Units divided by Earned Value Labor Units.",
            "format": "double"
          },
          "SummaryDurationPercentComplete": {
            "type": "number",
            "description": "The activity actual duration percent of planned. Computed as (baseline planned duration - remaining duration) / baseline planned duration * 100. The baseline planned duration is the activity's at complete duration from the primary baseline.",
            "format": "double"
          },
          "SummaryDurationPercentOfPlanned": {
            "type": "number",
            "description": "The summary actual duration percent of planned of all activities under this project. Computed as actual duration / baseline duration * 100. The value can exceed 100. The Baseline duration is the activity's at complete duration from the current baseline.",
            "format": "double"
          },
          "SummaryDurationVariance": {
            "type": "number",
            "description": "The duration between the activity's baseline duration and the at complete duration. Computed as baseline planned duration - at completion duration.",
            "format": "double"
          },
          "SummaryEarnedValueByCost": {
            "type": "number",
            "description": "The Budget at Completion * Performance % Complete. The method for computing the Performance Percent Complete depends on the Earned Value technique selected for the activity's WBS. Budget at Completion is computed from the primary baseline.",
            "format": "double"
          },
          "SummaryEarnedValueByLaborUnits": {
            "type": "number",
            "description": "The portion of the baseline labor units that is actually completed as of the project data date. Computed as Baseline Labor Units * Performance % Complete. The planned labor units performed is essentially the labor units Earned Value for the activity. The method for computing the Performance % Complete depends on the Earned Value technique selected for the activity's WBS. The Baseline Labor Units is taken from the current baseline.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionByCost": {
            "type": "number",
            "description": "The Actual Cost plus the Estimate to Complete Cost. The method for computing Estimate to Complete depends on the Earned Value technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Actual Labor Units + Estimate To Complete Labor Units. (Estimate To Complete Labor Units is calculated based off of the Earned Value setting on the WBS.)",
            "format": "double"
          },
          "SummaryEstimateAtCompletionHighPercentByLaborUnits": {
            "type": "number",
            "description": "The high forecast of Estimate At Completion (EAC) by labor units.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionLowPercentByLaborUnits": {
            "type": "number",
            "description": "The low forecast of Estimate At Completion (EAC) by labor units.",
            "format": "double"
          },
          "SummaryEstimateToCompleteByCost": {
            "type": "number",
            "description": "The Remaining Total Cost for the activity or the Performance Factor * (Budget at Completion - Earned Value), depending on the Earned Value technique selected for the activity's WBS (calculated from the primary baseline).",
            "format": "double"
          },
          "SummaryEstimateToCompleteByLaborUnits": {
            "type": "number",
            "description": "The estimated quantity to complete the activity. Computed as either the remaining total units for the activity, or as Performance Factor * (Baseline Planned Labor Units - Planned Quantity of Work Performed), depending on the Earned Value Technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryExpenseCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all expenses associated with the project. It is computed as Actual Expense Cost / At Complete Expense Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryExpenseCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Expense Cost - At Completion Expense Cost (At Completion Expense Cost = Actual Expense Cost + Remaining Expense Cost).",
            "format": "double"
          },
          "SummaryFinishDateVariance": {
            "type": "number",
            "description": "The duration between the finish date in the current project and the baseline finish date. Calculated as finish date - baseline finish date.",
            "format": "double"
          },
          "SummaryInProgressActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently in progress.",
            "format": "int32"
          },
          "SummaryLaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all labor resources assigned to the project. It is computed as Actual Labor Cost / At Complete Labor Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryLaborCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Labor Cost - At Completion Labor Cost.",
            "format": "double"
          },
          "SummaryLaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all labor resources for the WBS. Computed as actual labor units / at complete labor units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryLaborUnitsVariance": {
            "type": "number",
            "description": "The difference between baseline labor units and at completion labor units. Calculated as baseline labor units - at completion labor units.",
            "format": "double"
          },
          "SummaryMaterialCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all material resources assigned to the project. It is computed as Actual Material Cost / At Complete Material Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryMaterialCostVariance": {
            "type": "number",
            "description": "The variance that is calculated as Baseline Material Cost - At Completion Material Cost.",
            "format": "double"
          },
          "SummaryNonLaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all non-labor resources assigned to the project. It is computed as Actual Nonlabor Cost / At Complete Nonlabor Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryNonLaborCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Nonlabor Cost - At Completion Nonlabor Cost.",
            "format": "double"
          },
          "SummaryNonLaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all nonlabor resources for the Project. Computed as Actual Nonlabor Cost / At Completion Nonlabor Cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryNonLaborUnitsVariance": {
            "type": "number",
            "description": "The difference between baseline nonlabor units and at completion non labor units. Calculated as baseline nonlabor units - at completion nonlabor units.",
            "format": "double"
          },
          "SummaryNotStartedActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently not started.",
            "format": "int32"
          },
          "SummaryPerformancePercentCompleteByLaborUnits": {
            "type": "number",
            "description": "The percent complete of units for the resource assignments in the WBS Computed as Actual Units / At Complete Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryPlannedCost": {
            "type": "number",
            "description": "The sum of all planned expense, non labor, labor, and material costs in the baseline project.",
            "format": "double"
          },
          "SummaryPlannedDuration": {
            "type": "number",
            "description": "The total working days between planned start and finish dates in the baseline project.",
            "format": "double"
          },
          "SummaryPlannedExpenseCost": {
            "type": "number",
            "description": "The sum of all planned expense costs in the baseline project.",
            "format": "double"
          },
          "SummaryPlannedFinishDate": {
            "type": "string",
            "description": "The latest planned finish date of all activities in the baseline project.",
            "format": "date-time"
          },
          "SummaryPlannedLaborCost": {
            "type": "number",
            "description": "The sum of all planned labor costs in the baseline project.",
            "format": "double"
          },
          "SummaryPlannedLaborUnits": {
            "type": "number",
            "description": "The sum of all planned labor units in the baseline project.",
            "format": "double"
          },
          "SummaryPlannedMaterialCost": {
            "type": "number",
            "description": "The sum of all planned material costs in the baseline project.",
            "format": "double"
          },
          "SummaryPlannedNonLaborCost": {
            "type": "number",
            "description": "The sum of all planned non labor costs in the baseline project.",
            "format": "double"
          },
          "SummaryPlannedNonLaborUnits": {
            "type": "number",
            "description": "The sum of all planned non labor units in the baseline project.",
            "format": "double"
          },
          "SummaryPlannedStartDate": {
            "type": "string",
            "description": "The earliest planned start date of all activities in the baseline project.",
            "format": "date-time"
          },
          "SummaryPlannedValueByCost": {
            "type": "number",
            "description": "The Budget at Completion * Schedule % Complete. The Schedule % Complete specifies how much of the activity's baseline duration has been completed so far. Budget at Completion is computed from the primary baseline",
            "format": "double"
          },
          "SummaryPlannedValueByLaborUnits": {
            "type": "number",
            "description": "The portion of the baseline labor units that is scheduled to be completed as of the project data date. Computed as Baseline Labor Units * Schedule % Complete. The Schedule % Complete specifies how much of the activity's baseline duration has been completed so far. The Baseline Labor Units is taken from the current baseline.",
            "format": "double"
          },
          "SummaryProgressFinishDate": {
            "type": "string",
            "description": "The date the activity is expected to be finished according to the progress made on the activity's work products. The expected finish date is entered manually by people familiar with progress of the activity's work products.",
            "format": "date-time"
          },
          "SummaryRemainingDuration": {
            "type": "number",
            "description": "The total working time from the WBS remaining start date to the remaining finish date.",
            "format": "double"
          },
          "SummaryRemainingExpenseCost": {
            "type": "number",
            "description": "The remaining costs for all project expenses associated with the activities in the WBS.",
            "format": "double"
          },
          "SummaryRemainingFinishDate": {
            "type": "string",
            "description": "The date the resource is scheduled to finish the remaining work for the activity. This date is computed by the project scheduler but can be updated manually by the project manager. Before the activity is started, the remaining finish date is the same as the planned finish date.",
            "format": "date-time"
          },
          "SummaryRemainingLaborCost": {
            "type": "number",
            "description": "The remaining costs for all labor resources assigned to the activities. The remaining cost reflects the cost remaining for the WBS.",
            "format": "double"
          },
          "SummaryRemainingLaborUnits": {
            "type": "number",
            "description": "The remaining units for all labor resources assigned to the activities. The remaining units reflects the work remaining to be done for the WBS.",
            "format": "double"
          },
          "SummaryRemainingMaterialCost": {
            "type": "number",
            "description": "The remaining material costs for all project expenses associated with the activities in the WBS.",
            "format": "double"
          },
          "SummaryRemainingNonLaborCost": {
            "type": "number",
            "description": "The remaining nonlabor costs for all project expenses associated with the activities in the WBS.",
            "format": "double"
          },
          "SummaryRemainingNonLaborUnits": {
            "type": "number",
            "description": "The remaining units for all nonlabor resources assigned to the activities. The remaining units reflects the work remaining to be done for the WBS.",
            "format": "double"
          },
          "SummaryRemainingStartDate": {
            "type": "string",
            "description": "The earliest remaining start of all activities assigned to the WBS.",
            "format": "date-time"
          },
          "SummaryRemainingTotalCost": {
            "type": "number",
            "description": "The sum of all remaining total costs in the WBS.",
            "format": "double"
          },
          "SummarySchedulePercentComplete": {
            "type": "number",
            "description": "The measure that indicates how much of the WBS baseline duration has been completed so far. Computed based on where the current data date falls between the activity's baseline start and finish dates. If the data date is earlier than the baseline start, the schedule % complete is 0. If the data date is later than the baseline finish, the schedule % complete is 100. The schedule % complete indicates how much of the WBS duration should be currently completed, relative to the selected baseline.",
            "format": "double"
          },
          "SummarySchedulePercentCompleteByLaborUnits": {
            "type": "number",
            "description": "The percent complete of units for all labor resources. Computed as Actual Labor Units / At Completion Labor Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummarySchedulePerformanceIndexByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Planned Value. A value less than 1 indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "SummarySchedulePerformanceIndexByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units divided by Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Planned Value. A negative value indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "SummaryScheduleVarianceByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units minus the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndex": {
            "type": "number",
            "description": "The value that is calculated as the Schedule Variance Labor Units divided by Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndexByCost": {
            "type": "number",
            "description": "The Schedule Variance divided by the Planned Value.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndexByLaborUnits": {
            "type": "number",
            "description": "The Schedule Variance Labor Units divided by the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryStartDateVariance": {
            "type": "number",
            "description": "The duration between the start date in the current project and the baseline start date. Calculated as start date - baseline start date.",
            "format": "double"
          },
          "SummaryToCompletePerformanceIndexByCost": {
            "type": "number",
            "description": "The (Budget at Completion - Earned Value) divided by (Estimate at Completion - Actual Cost).",
            "format": "double"
          },
          "SummaryTotalCostVariance": {
            "type": "number",
            "description": "The value that is calculated as baseline total cost - total cost.",
            "format": "double"
          },
          "SummaryTotalFloat": {
            "type": "number",
            "description": "The amount of time the WBS can be delayed before delaying the project finish date. Total float can be computed as late start - early start or as late finish - early finish; this option can be set when running the project scheduler.",
            "format": "double"
          },
          "SummaryUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for the resource assignments in the WBS. Computed as Actual Units / At Complete Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryVarianceAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Baseline Planned Total Labor Units minus Estimate at Completion Labor Units.",
            "format": "double"
          },
          "TeamMemberActivityFields": {
            "type": "string",
            "description": "The list of activity fields that can be updated by a team member using the P6 Team Member interfaces."
          },
          "TeamMemberAssignmentOption": {
            "type": "string",
            "description": "The indicator that determines whether team member can update activity fields, assignment fields, or both using the P6 Team Member interfaces."
          },
          "TeamMemberResourceAssignmentFields": {
            "type": "string",
            "description": "The list of assignment fields that can be updated by a team member using the P6 Team Member interfaces."
          },
          "TeamMemberStepUDFViewableFields": {
            "type": "string"
          },
          "TeamMemberViewableFields": {
            "type": "string",
            "description": "The list of fields that are viewable by a team member using the P6 Team Member interfaces."
          },
          "TotalBenefitPlan": {
            "type": "number",
            "description": "The sum of the monthly benefit plan.",
            "format": "double"
          },
          "TotalBenefitPlanTally": {
            "type": "number",
            "description": "The sum of the monthly benefit plan tally.",
            "format": "double"
          },
          "TotalSpendingPlan": {
            "type": "number",
            "description": "The sum of the monthly spending plan.",
            "format": "double"
          },
          "TotalSpendingPlanTally": {
            "type": "number",
            "description": "The sum of the monthly spending plan tally.",
            "format": "double"
          },
          "UnallocatedBudget": {
            "type": "number",
            "description": "The total current budget minus the distributed current budget.",
            "format": "double"
          },
          "UndistributedCurrentVariance": {
            "type": "number",
            "description": "The total spending plan minus the total spending plan tally.",
            "format": "double"
          },
          "WBSCodeSeparator": {
            "type": "string",
            "description": "The character used to separate the concatenated code fields for the project's WBS tree."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The internal WBS ID of the project. This ID cannot be used to load a WBS object directly.",
            "format": "int32"
          },
          "WebSiteRootDirectory": {
            "type": "string",
            "description": "The root directory for storing project Web site files before they are published to the Web server."
          },
          "WebSiteURL": {
            "type": "string",
            "description": "The project Web site URL, which is the Web address of the project's website."
          }
        },
        "description": "BaselineProject Entity"
      },
      "ReadWBSResourceSpreadResponse": {
        "title": "ReadWBSResourceSpreadResponse",
        "type": "object",
        "properties": {
          "WBSCode": {
            "type": "string"
          },
          "WBSObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ResourceId": {
            "type": "string"
          },
          "ResourceObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRoleSpreadPeriod"
            }
          }
        },
        "description": "ReadWBSResourceSpreadResponse Entity"
      },
      "CBSExpenseSpread": {
        "type": "object",
        "properties": {
          "cbsobjectId": {
            "type": "integer",
            "format": "int32"
          },
          "BaselineProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string"
          },
          "ProjectName": {
            "type": "string"
          },
          "OriginalProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "CBSObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ExpenseCategoryObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ExpenseCategoryName": {
            "type": "string"
          },
          "BaselineType": {
            "type": "string"
          },
          "DataDate": {
            "type": "string",
            "format": "date-time"
          },
          "SummaryActualCost": {
            "type": "number",
            "format": "double"
          },
          "SummaryActualUnits": {
            "type": "number",
            "format": "double"
          },
          "SummaryAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "SummaryAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "SummaryPlannedCost": {
            "type": "number",
            "format": "double"
          },
          "SummaryPlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "SummaryRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "SummaryRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CBSRsrcExpenseSpreadPeriod"
            }
          }
        }
      },
      "EPSFunding": {
        "title": "EPSFunding",
        "required": ["EPSObjectId", "FundingSourceObjectId"],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "The amount of a funding source that is allocated to the EPS.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this epsfunding was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this epsfunding."
          },
          "EPSId": {
            "type": "string",
            "description": "The short code assigned to the associated EPS."
          },
          "EPSName": {
            "type": "string",
            "description": "The name of the EPS element associated with this funding."
          },
          "EPSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated EPS for this EPS funding.",
            "format": "int32"
          },
          "FundShare": {
            "type": "number",
            "description": "The percentage of the total fund that is allocated to the EPS.",
            "format": "double"
          },
          "FundingSourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated funding source for this EPS funding.",
            "format": "int32"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this epsfunding was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this epsfunding."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          }
        },
        "description": "EPSFunding Entity"
      },
      "RoleCodeTypeExport": {
        "title": "RoleCodeType",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RoleCodeType Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RoleCodeType Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "IS_SECURE_CODE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LENGTH",
                "NAME",
                "OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "RoleCodeType Entity"
      },
      "EPSExport": {
        "title": "EPS",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for EPS Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for EPS Business Object",
              "enum": [
                "ANTICIPATED_FINISH_DATE",
                "ANTICIPATED_START_DATE",
                "CREATE_DATE",
                "CREATE_USER",
                "CURRENT_BUDGET",
                "CURRENT_VARIANCE",
                "DISTRIBUTED_CURRENT_BUDGET",
                "FINISH_DATE",
                "GUID",
                "ID",
                "INDEPENDENT_ETC_LABOR_UNITS",
                "INDEPENDENT_ETC_TOTAL_COST",
                "LAST_SUMMARIZED_DATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBS_NAME",
                "OBS_OBJECT_ID",
                "OBJECT_ID",
                "ORIGINAL_BUDGET",
                "PARENT_EPS_ID",
                "PARENT_EPS_NAME",
                "PARENT_OBJECT_ID",
                "PLANNED_START_DATE",
                "PROJECT_OBJECT_ID",
                "PROPOSED_BUDGET",
                "SEQUENCE_NUMBER",
                "START_DATE",
                "SUMMARY_ACCOUNTING_VARIANCE_BY_COST",
                "SUMMARY_ACCOUNTING_VARIANCE_BY_LABOR_UNITS",
                "SUMMARY_ACTIVITY_COUNT",
                "SUMMARY_ACTUAL_DURATION",
                "SUMMARY_ACTUAL_EXPENSE_COST",
                "SUMMARY_ACTUAL_FINISH_DATE",
                "SUMMARY_ACTUAL_LABOR_COST",
                "SUMMARY_ACTUAL_LABOR_UNITS",
                "SUMMARY_ACTUAL_MATERIAL_COST",
                "SUMMARY_ACTUAL_NON_LABOR_COST",
                "SUMMARY_ACTUAL_NON_LABOR_UNITS",
                "SUMMARY_ACTUAL_START_DATE",
                "SUMMARY_ACTUAL_THIS_PERIOD_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_LABOR_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_LABOR_UNITS",
                "SUMMARY_ACTUAL_THIS_PERIOD_MATERIAL_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_NON_LABOR_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_NON_LABOR_UNITS",
                "SUMMARY_ACTUAL_TOTAL_COST",
                "SUMMARY_ACTUAL_VALUE_BY_COST",
                "SUMMARY_ACTUAL_VALUE_BY_LABOR_UNITS",
                "SUMMARY_AT_COMPLETION_DURATION",
                "SUMMARY_AT_COMPLETION_EXPENSE_COST",
                "SUMMARY_AT_COMPLETION_LABOR_COST",
                "SUMMARY_AT_COMPLETION_LABOR_UNITS",
                "SUMMARY_AT_COMPLETION_MATERIAL_COST",
                "SUMMARY_AT_COMPLETION_NON_LABOR_COST",
                "SUMMARY_AT_COMPLETION_NON_LABOR_UNITS",
                "SUMMARY_AT_COMPLETION_TOTAL_COST",
                "SUMMARY_AT_COMPLETION_TOTAL_COST_VARIANCE",
                "SUMMARY_BASELINE_COMPLETED_ACTIVITY_COUNT",
                "SUMMARY_BASELINE_DURATION",
                "SUMMARY_BASELINE_EXPENSE_COST",
                "SUMMARY_BASELINE_FINISH_DATE",
                "SUMMARY_BASELINE_IN_PROGRESS_ACTIVITY_COUNT",
                "SUMMARY_BASELINE_LABOR_COST",
                "SUMMARY_BASELINE_LABOR_UNITS",
                "SUMMARY_BASELINE_MATERIAL_COST",
                "SUMMARY_BASELINE_NON_LABOR_COST",
                "SUMMARY_BASELINE_NON_LABOR_UNITS",
                "SUMMARY_BASELINE_NOT_STARTED_ACTIVITY_COUNT",
                "SUMMARY_BASELINE_START_DATE",
                "SUMMARY_BASELINE_TOTAL_COST",
                "SUMMARY_BUDGET_AT_COMPLETION_BY_COST",
                "SUMMARY_BUDGET_AT_COMPLETION_BY_LABOR_UNITS",
                "SUMMARY_COMPLETED_ACTIVITY_COUNT",
                "SUMMARY_COST_PERCENT_COMPLETE",
                "SUMMARY_COST_PERCENT_OF_PLANNED",
                "SUMMARY_COST_PERFORMANCE_INDEX_BY_COST",
                "SUMMARY_COST_PERFORMANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_COST_VARIANCE_BY_COST",
                "SUMMARY_COST_VARIANCE_BY_LABOR_UNITS",
                "SUMMARY_COST_VARIANCE_INDEX",
                "SUMMARY_COST_VARIANCE_INDEX_BY_COST",
                "SUMMARY_COST_VARIANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_DURATION_PERCENT_COMPLETE",
                "SUMMARY_DURATION_PERCENT_OF_PLANNED",
                "SUMMARY_DURATION_VARIANCE",
                "SUMMARY_EARNED_VALUE_BY_COST",
                "SUMMARY_EARNED_VALUE_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_AT_COMPLETION_BY_COST",
                "SUMMARY_ESTIMATE_AT_COMPLETION_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_AT_COMPLETION_HIGH_PERCENT_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_AT_COMPLETION_LOW_PERCENT_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_TO_COMPLETE_BY_COST",
                "SUMMARY_ESTIMATE_TO_COMPLETE_BY_LABOR_UNITS",
                "SUMMARY_EXPENSE_COST_PERCENT_COMPLETE",
                "SUMMARY_EXPENSE_COST_VARIANCE",
                "SUMMARY_FINISH_DATE_VARIANCE",
                "SUMMARY_IN_PROGRESS_ACTIVITY_COUNT",
                "SUMMARY_LABOR_COST_PERCENT_COMPLETE",
                "SUMMARY_LABOR_COST_VARIANCE",
                "SUMMARY_LABOR_UNITS_PERCENT_COMPLETE",
                "SUMMARY_LABOR_UNITS_VARIANCE",
                "SUMMARY_MATERIAL_COST_PERCENT_COMPLETE",
                "SUMMARY_MATERIAL_COST_VARIANCE",
                "SUMMARY_NON_LABOR_COST_PERCENT_COMPLETE",
                "SUMMARY_NON_LABOR_COST_VARIANCE",
                "SUMMARY_NON_LABOR_UNITS_PERCENT_COMPLETE",
                "SUMMARY_NON_LABOR_UNITS_VARIANCE",
                "SUMMARY_NOT_STARTED_ACTIVITY_COUNT",
                "SUMMARY_PERFORMANCE_PERCENT_COMPLETE_BY_COST",
                "SUMMARY_PERFORMANCE_PERCENT_COMPLETE_BY_LABOR_UNITS",
                "SUMMARY_PLANNED_COST",
                "SUMMARY_PLANNED_DURATION",
                "SUMMARY_PLANNED_EXPENSE_COST",
                "SUMMARY_PLANNED_FINISH_DATE",
                "SUMMARY_PLANNED_LABOR_COST",
                "SUMMARY_PLANNED_LABOR_UNITS",
                "SUMMARY_PLANNED_MATERIAL_COST",
                "SUMMARY_PLANNED_NON_LABOR_COST",
                "SUMMARY_PLANNED_NON_LABOR_UNITS",
                "SUMMARY_PLANNED_START_DATE",
                "SUMMARY_PLANNED_VALUE_BY_COST",
                "SUMMARY_PLANNED_VALUE_BY_LABOR_UNITS",
                "SUMMARY_PROGRESS_FINISH_DATE",
                "SUMMARY_REMAINING_DURATION",
                "SUMMARY_REMAINING_EXPENSE_COST",
                "SUMMARY_REMAINING_FINISH_DATE",
                "SUMMARY_REMAINING_LABOR_COST",
                "SUMMARY_REMAINING_LABOR_UNITS",
                "SUMMARY_REMAINING_MATERIAL_COST",
                "SUMMARY_REMAINING_NON_LABOR_COST",
                "SUMMARY_REMAINING_NON_LABOR_UNITS",
                "SUMMARY_REMAINING_START_DATE",
                "SUMMARY_REMAINING_TOTAL_COST",
                "SUMMARY_SCHEDULE_PERCENT_COMPLETE",
                "SUMMARY_SCHEDULE_PERCENT_COMPLETE_BY_LABOR_UNITS",
                "SUMMARY_SCHEDULE_PERFORMANCE_INDEX_BY_COST",
                "SUMMARY_SCHEDULE_PERFORMANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_SCHEDULE_VARIANCE_BY_COST",
                "SUMMARY_SCHEDULE_VARIANCE_BY_LABOR_UNITS",
                "SUMMARY_SCHEDULE_VARIANCE_INDEX",
                "SUMMARY_SCHEDULE_VARIANCE_INDEX_BY_COST",
                "SUMMARY_SCHEDULE_VARIANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_START_DATE_VARIANCE",
                "SUMMARY_TO_COMPLETE_PERFORMANCE_INDEX_BY_COST",
                "SUMMARY_TOTAL_COST_VARIANCE",
                "SUMMARY_TOTAL_FLOAT",
                "SUMMARY_UNITS_PERCENT_COMPLETE",
                "SUMMARY_VARIANCE_AT_COMPLETION_BY_LABOR_UNITS",
                "TOTAL_BENEFIT_PLAN",
                "TOTAL_BENEFIT_PLAN_TALLY",
                "TOTAL_FUNDING",
                "TOTAL_SPENDING_PLAN",
                "TOTAL_SPENDING_PLAN_TALLY",
                "UNALLOCATED_BUDGET",
                "UNDISTRIBUTED_CURRENT_VARIANCE"
              ]
            }
          }
        },
        "description": "EPS Entity"
      },
      "RiskThresholdExport": {
        "title": "RiskThreshold",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskThreshold Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskThreshold Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LEVEL",
                "NAME",
                "OBJECT_ID",
                "THRESHOLD_TYPE"
              ]
            }
          }
        },
        "description": "RiskThreshold Entity"
      },
      "HolidayOrExceptions": {
        "type": "object",
        "properties": {
          "HolidayOrException": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HolidayOrException"
            }
          }
        },
        "description": "HolidayOrExceptions"
      },
      "RiskThresholdLevelExport": {
        "title": "RiskThresholdLevel",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskThresholdLevel Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskThresholdLevel Business Object",
              "enum": [
                "CODE",
                "COLOR",
                "COST_RANGE",
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LEVEL",
                "NAME",
                "OBJECT_ID",
                "PROBABILITY_RANGE",
                "RANGE",
                "RISK_THRESHOLD_NAME",
                "RISK_THRESHOLD_OBJECT_ID",
                "SCHEDULE_RANGE",
                "THRESHOLD_TYPE",
                "TOLERANCE_RANGE"
              ]
            }
          }
        },
        "description": "RiskThresholdLevel Entity"
      },
      "WBS": {
        "title": "WBS",
        "required": ["Code", "Name", "ParentObjectId", "ProjectObjectId"],
        "type": "object",
        "properties": {
          "AnticipatedFinishDate": {
            "type": "string",
            "description": "The anticipated finish date of WBS, project and EPS elements. User-entered - not dependent upon any other fields. If there are no children, the anticipated finish date will be the finish date displayed in the columns.",
            "format": "date-time"
          },
          "AnticipatedStartDate": {
            "type": "string",
            "description": "The anticipated start date of WBS, project and EPS elements. User-entered - not dependent upon any other fields. If there are no children, the anticipated start date will be the start date displayed in the columns.",
            "format": "date-time"
          },
          "Code": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes."
          },
          "ContainsSummaryData": {
            "type": "boolean",
            "description": "The flag that indicates that the WBS has been summarized."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this wbs was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this wbs."
          },
          "CurrentBudget": {
            "type": "number",
            "description": "The current budget for this WBS.",
            "format": "double"
          },
          "CurrentVariance": {
            "type": "number",
            "description": "The current budget minus the total spending plan.",
            "format": "double"
          },
          "DistributedCurrentBudget": {
            "type": "number",
            "description": "The sum of the current budget values from one level lower",
            "format": "double"
          },
          "EarnedValueComputeType": {
            "type": "string",
            "description": "The technique used for computing earned-value percent complete for activities within the WBS. Valid values are 'Activity Percent Complete', '0 / 100', '50 / 50', 'Custom Percent Complete', 'WBS Milestones Percent Complete', and 'Activity Percent Complete Using Resource Curves'."
          },
          "EarnedValueETCComputeType": {
            "type": "string",
            "description": "The technique for computing earned-value estimate-to-complete for activities within the WBS. Valid values are 'ETC = Remaining Cost for Activity', 'Performance Factor = 1', 'Performance Factor = Custom Value', 'Performance Factor = 1 / Cost Performance Index', and 'Performance Factor = 1 / (Cost Performance Index * Schedule Performance Index)'."
          },
          "EarnedValueETCUserValue": {
            "type": "number",
            "description": "The user-defined performance factor, PF, for computing earned-value estimate-to-complete. ETC is computed as PF * ( BAC - BCWP).",
            "format": "double"
          },
          "EarnedValueUserPercent": {
            "type": "number",
            "description": "The user-defined percent complete for computing earned value for activities within the WBS. A value of, say, 25 means that 25% of the planned amount is earned when the activity is started and the remainder is earned when the activity is completed.",
            "format": "double"
          },
          "EstimatedWeight": {
            "type": "number",
            "format": "double"
          },
          "FinishDate": {
            "type": "string",
            "description": "The finish date of the WBS.",
            "format": "date-time"
          },
          "ForecastFinishDate": {
            "type": "string",
            "description": "The alternate end date to be optionally used by the scheduler. The user sets the alternate end date by dragging the project bar in the Gantt Chart while manually leveling the resource profile in a resource analysis layout.",
            "format": "date-time"
          },
          "ForecastStartDate": {
            "type": "string",
            "description": "The alternate start date to be optionally used by the scheduler. The user sets the alternate start date by dragging the project bar in the Gantt Chart while manually leveling the resource profile in a resource analysis layout.",
            "format": "date-time"
          },
          "GUID": {
            "type": "string",
            "description": "The globally unique ID generated by the system."
          },
          "IndependentETCLaborUnits": {
            "type": "number",
            "description": "The user-entered ETC total labor.",
            "format": "double"
          },
          "IndependentETCTotalCost": {
            "type": "number",
            "description": "The user-entered ETC total cost.",
            "format": "double"
          },
          "IntegratedType": {
            "type": "string",
            "description": "The flag indicating whether the WBS is integrated with an Enterprise Resource Planning (ERP) system. 'Fusion' indicates the WBS is integrated with Oracle Fusion. 'ERP' indicates the WBS is integrated with another ERP system. 'Gateway' indicates the WBS is integrated with Oracle Primavera Gateway."
          },
          "IntegratedWBS": {
            "type": "boolean",
            "description": "The indicator that determines whether a WBS is synchronized or not."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "IsWorkPackage": {
            "type": "boolean",
            "description": "Indicates if this WBS is a workpackage in Oracle Prime or not."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this wbs was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this wbs."
          },
          "Name": {
            "type": "string",
            "description": "The name of the WBS element."
          },
          "OBSName": {
            "type": "string",
            "description": "The name of the person/role in the organization, sometimes referred to as the \"responsible manager\"."
          },
          "OBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the project manager from the project's OBS tree who is responsible for the WBS.",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OriginalBudget": {
            "type": "number",
            "description": "The original budget for the WBS element.",
            "format": "double"
          },
          "ParentObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent WBS of this WBS in the hierarchy.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ProposedBudget": {
            "type": "number",
            "description": "The sum of the original budget plus the approved and pending budgets from the budget change log.",
            "format": "double"
          },
          "RolledUpFinishDate": {
            "type": "string",
            "description": "The finish date of the WBS. The involved summarized fields such as \"RemianingFinish\" and \"ActualFinish\" are rolled up on the fly.",
            "format": "date-time"
          },
          "RolledUpStartDate": {
            "type": "string",
            "description": "The start date of the WBS. The involved summarized fields such as \"RemianingStart\" and \"ActualStart\" are rolled up on the fly.",
            "format": "date-time"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the WBS.",
            "format": "date-time"
          },
          "Status": {
            "type": "string",
            "description": "The WBS status: 'Planned', 'Active', 'Inactive', 'What-If', 'Requested', or 'Template'."
          },
          "StatusReviewerName": {
            "type": "string",
            "description": "The name of the user reviewing status updates."
          },
          "StatusReviewerObjectId": {
            "type": "string",
            "description": "The unique ID of the user reviewing status updates."
          },
          "SummaryAccountingVarianceByCost": {
            "type": "number",
            "description": "The Planned Value minus the Actual Cost. A negative value indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryAccountingVarianceByLaborUnits": {
            "type": "number",
            "description": "The Planned Value Labor Units minus the Actual Units. Negative value indicates that Actual Units have exceeded the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently in progress.",
            "format": "int32"
          },
          "SummaryActualDuration": {
            "type": "number",
            "description": "The actual duration.",
            "format": "double"
          },
          "SummaryActualExpenseCost": {
            "type": "number",
            "description": "The actual costs for all project expenses associated with the WBS.",
            "format": "double"
          },
          "SummaryActualFinishDate": {
            "type": "string",
            "description": "The latest actual finish date of all activities in the WBS.",
            "format": "date-time"
          },
          "SummaryActualLaborCost": {
            "type": "number",
            "description": "The actual cost for all labor resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualLaborUnits": {
            "type": "number",
            "description": "The actual labor units.",
            "format": "double"
          },
          "SummaryActualMaterialCost": {
            "type": "number",
            "description": "The actual units for all material resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualNonLaborCost": {
            "type": "number",
            "description": "The actual units for all nonlabor resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualNonLaborUnits": {
            "type": "number",
            "description": "The actual nonlabor units.",
            "format": "double"
          },
          "SummaryActualStartDate": {
            "type": "string",
            "description": "The earliest actual start date of all activities in the WBS.",
            "format": "date-time"
          },
          "SummaryActualThisPeriodCost": {
            "type": "number",
            "description": "The actual this period cost (will be labor or nonlabor).",
            "format": "double"
          },
          "SummaryActualThisPeriodLaborCost": {
            "type": "number",
            "description": "The actual this period labor cost.",
            "format": "double"
          },
          "SummaryActualThisPeriodLaborUnits": {
            "type": "number",
            "description": "The actual this period labor units.",
            "format": "double"
          },
          "SummaryActualThisPeriodMaterialCost": {
            "type": "number",
            "description": "The actual this period material cost.",
            "format": "double"
          },
          "SummaryActualThisPeriodNonLaborCost": {
            "type": "number",
            "description": "The actual this period nonlabor cost.",
            "format": "double"
          },
          "SummaryActualThisPeriodNonLaborUnits": {
            "type": "number",
            "description": "The actual this period nonlabor units.",
            "format": "double"
          },
          "SummaryActualTotalCost": {
            "type": "number",
            "description": "The actual labor cost + actual nonlabor cost + actual expense cost as of the project data date.",
            "format": "double"
          },
          "SummaryActualValueByCost": {
            "type": "number",
            "description": "The actual total cost incurred on the activity as of the project data date, computed as Actual Labor Cost + Actual Nonlabor Cost + Actual Material Cost + Actual Expense Cost.",
            "format": "double"
          },
          "SummaryActualValueByLaborUnits": {
            "type": "number",
            "description": "The actual total labor units for the activity as of the project data date (i.e., actual total cost by labor units).",
            "format": "double"
          },
          "SummaryAtCompletionDuration": {
            "type": "number",
            "description": "The total working time from the activity's current start date to the current finish date. The current start date is the planned start date until the activity is started, then it is the actual start date. The current finish date is the activity planned finish date while the activity is not started, the remaining finish date while the activity is in progress, and the actual finish date once the activity is completed. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "SummaryAtCompletionExpenseCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining cost for all project expenses associated with the cost account. Computed as Actual Expense Cost + Remaining Expense Cost.",
            "format": "double"
          },
          "SummaryAtCompletionLaborCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining costs for all labor resources assigned to the activity. Computed as actual labor cost + remaining labor cost. Same as the planned labor costs if the activity is not started and the actual labor costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionLaborUnits": {
            "type": "number",
            "description": "The sum of the actual plus remaining units for all labor resources assigned to the activity. Computed as actual labor units + remaining labor units. Same as the planned labor units if the activity is not started and the actual labor units once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionMaterialCost": {
            "type": "number",
            "description": "The material cost at completion. It is the sum of the actual plus remaining costs for all material resources assigned to the activity. Computed as actual material cost + remaining material cost. Same as the planned material costs if the activity is not started and the actual material costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionNonLaborCost": {
            "type": "number",
            "description": "The nonlabor cost at completion. It is the sum of the actual plus remaining costs for all nonlabor resources assigned to the activity. Computed as actual nonlabor cost + remaining nonlabor cost. Same as the planned nonlabor costs if the activity is not started and the actual nonlabor costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionNonLaborUnits": {
            "type": "number",
            "description": "The nonlabor units at completion. It is the sum of the actual plus remaining units for all nonlabor resources assigned to the activity. Computed as actual nonlabor units + remaining nonlabor units. Same as the planned nonlabor units if the activity is not started and the actual nonlabor units once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionTotalCost": {
            "type": "number",
            "description": "The estimated cost at completion for the activity. Computed as the actual total cost plus the estimate-to-complete cost; EAC = ACWP + ETC. Note that the method for computing ETC depends on the earned-value technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryAtCompletionTotalCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Total Cost - At Completion Total Cost.",
            "format": "double"
          },
          "SummaryBaselineCompletedActivityCount": {
            "type": "integer",
            "description": "The number of completed activities in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineDuration": {
            "type": "number",
            "description": "The planned duration for the activity in the primary baseline. Planned duration is the total working time from the activity current start date to the current finish date. Same as the actual duration plus the remaining duration. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "SummaryBaselineExpenseCost": {
            "type": "number",
            "description": "The planned cost for all project expenses associated with the activity in the primary baseline. Computed as the baseline actual expense cost plus the baseline remaining expense cost.",
            "format": "double"
          },
          "SummaryBaselineFinishDate": {
            "type": "string",
            "description": "The current latest finish date of all activities in the WBS for the current baseline.",
            "format": "date-time"
          },
          "SummaryBaselineInProgressActivityCount": {
            "type": "integer",
            "description": "The number of activities that should be currently in progress, according to the primary baseline. Computed using the baseline start and finish dates and the current data date.",
            "format": "int32"
          },
          "SummaryBaselineLaborCost": {
            "type": "number",
            "description": "The planned cost for all labor resources assigned to the activity in the primary baseline. Computed from the baseline At Completion labor units. If no resources are assigned, computed as the activity Baseline Planned Labor Units * Project Default Price / Time.",
            "format": "double"
          },
          "SummaryBaselineLaborUnits": {
            "type": "number",
            "description": "The planned units for all labor resources assigned to the activity in the primary baseline. Computed as the baseline actual labor units plus the baseline remaining labor units.",
            "format": "double"
          },
          "SummaryBaselineMaterialCost": {
            "type": "number",
            "description": "The planned cost for all material resources assigned to the activity in the primary baseline. Computed from the baseline At Completion nonlabor units. If no resources are assigned.",
            "format": "double"
          },
          "SummaryBaselineNonLaborCost": {
            "type": "number",
            "description": "The planned cost for all nonlabor resources assigned to the activity in the primary baseline. Computed from the baseline At Completion nonlabor units. If no resources are assigned, computed as the activity Baseline Planned Nonlabor Units * Project Default Price / Time.",
            "format": "double"
          },
          "SummaryBaselineNonLaborUnits": {
            "type": "number",
            "description": "The planned units for all nonlabor resources assigned to the activity in the primary baseline. Computed as the baseline actual nonlabor units plus the baseline remaining nonlabor units.",
            "format": "double"
          },
          "SummaryBaselineNotStartedActivityCount": {
            "type": "integer",
            "description": "The number of activities not started in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineStartDate": {
            "type": "string",
            "description": "The current earliest start date of all activities in the WBS for the current baseline.",
            "format": "date-time"
          },
          "SummaryBaselineTotalCost": {
            "type": "number",
            "description": "The Planned Total Cost for the activity in the primary baseline, including labor resources, nonlabor resources, and project expenses. Baseline Planned Total Cost = Baseline Planned Labor Cost + Baseline Planned Nonlabor Cost + Baseline Planned Expense Cost.",
            "format": "double"
          },
          "SummaryBudgetAtCompletionByCost": {
            "type": "number",
            "description": "The Planned Total Cost through activity completion. Computed as Planned Labor Cost + Planned Nonlabor Cost + Planned Expense Cost, same as the Planned Total Cost.",
            "format": "double"
          },
          "SummaryBudgetAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Baseline Labor Units",
            "format": "double"
          },
          "SummaryCompletedActivityCount": {
            "type": "integer",
            "description": "The number of activities that have an Actual Finish in the WBS.",
            "format": "int32"
          },
          "SummaryCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of costs for the resource assignments in the wbs. Computed as Actual Units / At Complete Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryCostPercentOfPlanned": {
            "type": "number",
            "description": "The activity actual cost percent of planned. Computed as actual total cost / baseline total cost * 100, or equivalently as ACWP / BAC * 100. The value can exceed 100. The baseline total cost is the activity's at completion cost from the current baseline. This field is named SummaryCostPercentOfBudget in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "SummaryCostPerformanceIndexByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Actual Cost. A value less than 1 indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryCostPerformanceIndexByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units / Actual Labor Units.",
            "format": "double"
          },
          "SummaryCostVarianceByCost": {
            "type": "number",
            "description": "The Earned Value minus the Actual Cost. A negative value indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryCostVarianceByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Cost minus Actual Value Labor Cost.",
            "format": "double"
          },
          "SummaryCostVarianceIndex": {
            "type": "number",
            "description": "The value that is calcuated as the Cost Variance divided by Earned Value.",
            "format": "double"
          },
          "SummaryCostVarianceIndexByCost": {
            "type": "number",
            "description": "The Cost Variance divided by Earned Value.",
            "format": "double"
          },
          "SummaryCostVarianceIndexByLaborUnits": {
            "type": "number",
            "description": "The Cost Variance Labor Units divided by Earned Value Labor Units.",
            "format": "double"
          },
          "SummaryDurationPercentComplete": {
            "type": "number",
            "description": "The activity actual duration percent of planned. Computed as (baseline planned duration - remaining duration) / baseline planned duration * 100",
            "format": "double"
          },
          "SummaryDurationPercentOfPlanned": {
            "type": "number",
            "description": "The summary actual duration percent of planned of all activities under this WBS. Computed as actual duration / baseline duration * 100. The value can exceed 100. The Baseline duration is the activity's at complete duration from the current baseline.",
            "format": "double"
          },
          "SummaryDurationVariance": {
            "type": "number",
            "description": "The duration between the activity's baseline duration and the at complete duration. Computed as baseline duration - at completion duration.",
            "format": "double"
          },
          "SummaryEarnedValueByCost": {
            "type": "number",
            "description": "The Budget at Completion * Performance % Complete. The method for computing the Performance Percent Complete depends on the Earned Value technique selected for the activity's WBS. Budget at Completion is computed from the primary baseline.",
            "format": "double"
          },
          "SummaryEarnedValueByLaborUnits": {
            "type": "number",
            "description": "The portion of the baseline labor units that is actually completed as of the project data date. Computed as Baseline Labor Units * Performance % Complete. The planned labor units performed is essentially the labor units Earned Value for the activity. The method for computing the Performance % Complete depends on the Earned Value technique selected for the activity's WBS. The Baseline Labor Units is taken from the current baseline.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionByCost": {
            "type": "number",
            "description": "The Actual Cost plus the Estimate to Complete Cost. The method for computing Estimate to Complete depends on the Earned Value technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Actual Labor Units + Estimate To Complete Labor Units. (Estimate To Complete Labor Units is calculated based off of the Earned Value setting on the WBS.)",
            "format": "double"
          },
          "SummaryEstimateAtCompletionHighPercentByLaborUnits": {
            "type": "number",
            "description": "The high forecast of Estimate At Completion (EAC) by labor units.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionLowPercentByLaborUnits": {
            "type": "number",
            "description": "The low forecast of Estimate At Completion (EAC) by labor units.",
            "format": "double"
          },
          "SummaryEstimateToCompleteByCost": {
            "type": "number",
            "description": "The Remaining Total Cost for the activity or the Performance Factor * (Budget at Completion - Earned Value), depending on the Earned Value technique selected for the activity's WBS (calculated from the primary baseline).",
            "format": "double"
          },
          "SummaryEstimateToCompleteByLaborUnits": {
            "type": "number",
            "description": "The estimated quantity to complete the activity. Computed as either the remaining total units for the activity, or as Performance Factor * (Baseline Planned Labor Units - Planned Quantity of Work Performed), depending on the Earned Value Technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryExpenseCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all expenses associated with the WBS. It is computed as Actual Expense Cost / At Complete Expense Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryExpenseCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Expense Cost - At Completion Expense Cost (At Completion Expense Cost = Actual Expense Cost + Remaining Expense Cost).",
            "format": "double"
          },
          "SummaryFinishDateVariance": {
            "type": "number",
            "description": "The duration between the finish date in the current project and the baseline finish date. Calculated as finish date - baseline finish date.",
            "format": "double"
          },
          "SummaryInProgressActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently in progress.",
            "format": "int32"
          },
          "SummaryLaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all labor resources assigned to the WBS. It is computed as Actual Labor Cost / At Complete Labor Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryLaborCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Labor Cost - At Completion Labor Cost.",
            "format": "double"
          },
          "SummaryLaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all labor resources for the WBS. Computed as actual labor units / at complete labor units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryLaborUnitsVariance": {
            "type": "number",
            "description": "The difference between baseline labor units and at completion labor units. Calculated as baseline labor units - at completion labor units.",
            "format": "double"
          },
          "SummaryMaterialCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all material resources assigned to the WBS. It is computed as Actual Material Cost / At Complete Material Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryMaterialCostVariance": {
            "type": "number",
            "description": "The variance that is calculated as Baseline Material Cost - At Completion Material Cost.",
            "format": "double"
          },
          "SummaryNonLaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all non-labor resources assigned to the WBS. It is computed as Actual Nonlabor Cost / At Complete Nonlabor Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryNonLaborCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Nonlabor Cost - At Completion Nonlabor Cost.",
            "format": "double"
          },
          "SummaryNonLaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all nonlabor resources for the WBS. Computed as Actual Nonlabor Cost / At Completion Nonlabor Cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryNonLaborUnitsVariance": {
            "type": "number",
            "description": "The difference between baseline nonlabor units and at completion non labor units. Calculated as baseline nonlabor units - at completion nonlabor units.",
            "format": "double"
          },
          "SummaryNotStartedActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently not started.",
            "format": "int32"
          },
          "SummaryPerformancePercentCompleteByCost": {
            "type": "number",
            "description": "The percent complete of performance for all labor resources, nonlabor resources, and expenses. Computed as Earned Value / Budget At Completion * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryPerformancePercentCompleteByLaborUnits": {
            "type": "number",
            "description": "The percent complete of performance for all labor resources. Computed as earned value labor units / baseline labor units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryPlannedCost": {
            "type": "number",
            "description": "The sum of all planned expense, non labor, labor, and material costs in the WBS.",
            "format": "double"
          },
          "SummaryPlannedDuration": {
            "type": "number",
            "description": "The total working days between planned start and finish dates in the WBS.",
            "format": "double"
          },
          "SummaryPlannedExpenseCost": {
            "type": "number",
            "description": "The sum of all planned expense costs in the WBS.",
            "format": "double"
          },
          "SummaryPlannedFinishDate": {
            "type": "string",
            "description": "The latest planned finish date of all activities in the WBS.",
            "format": "date-time"
          },
          "SummaryPlannedLaborCost": {
            "type": "number",
            "description": "The sum of all planned labor costs in the WBS.",
            "format": "double"
          },
          "SummaryPlannedLaborUnits": {
            "type": "number",
            "description": "The sum of all planned labor units in the WBS.",
            "format": "double"
          },
          "SummaryPlannedMaterialCost": {
            "type": "number",
            "description": "The sum of all planned material costs in the WBS.",
            "format": "double"
          },
          "SummaryPlannedNonLaborCost": {
            "type": "number",
            "description": "The sum of all planned non labor costs in the WBS.",
            "format": "double"
          },
          "SummaryPlannedNonLaborUnits": {
            "type": "number",
            "description": "The sum of all planned non labor units in the WBS.",
            "format": "double"
          },
          "SummaryPlannedStartDate": {
            "type": "string",
            "description": "The earliest planned start date of all activities in the WBS.",
            "format": "date-time"
          },
          "SummaryPlannedValueByCost": {
            "type": "number",
            "description": "The Budget at Completion * Schedule % Complete. The Schedule % Complete specifies how much of the activity's baseline duration has been completed so far. Budget at Completion is computed from the primary baseline",
            "format": "double"
          },
          "SummaryPlannedValueByLaborUnits": {
            "type": "number",
            "description": "The portion of the baseline labor units that is scheduled to be completed as of the project data date. Computed as Baseline Labor Units * Schedule % Complete. The Schedule % Complete specifies how much of the activity's baseline duration has been completed so far. The Baseline Labor Units is taken from the current baseline.",
            "format": "double"
          },
          "SummaryProgressFinishDate": {
            "type": "string",
            "description": "The date the activity is expected to be finished according to the progress made on the activity's work products. The expected finish date is entered manually by people familiar with progress of the activity's work products.",
            "format": "date-time"
          },
          "SummaryRemainingDuration": {
            "type": "number",
            "description": "The total working time from the WBS remaining start date to the remaining finish date.",
            "format": "double"
          },
          "SummaryRemainingExpenseCost": {
            "type": "number",
            "description": "The remaining costs for all project expenses associated with the activities in the WBS.",
            "format": "double"
          },
          "SummaryRemainingFinishDate": {
            "type": "string",
            "description": "The date the resource is scheduled to finish the remaining work for the activity. This date is computed by the project scheduler but can be updated manually by the project manager. Before the activity is started, the remaining finish date is the same as the planned finish date.",
            "format": "date-time"
          },
          "SummaryRemainingLaborCost": {
            "type": "number",
            "description": "The remaining costs for all labor resources assigned to the activities. The remaining cost reflects the cost remaining for the WBS.",
            "format": "double"
          },
          "SummaryRemainingLaborUnits": {
            "type": "number",
            "description": "The remaining units for all labor resources assigned to the activities. The remaining units reflects the work remaining to be done for the WBS.",
            "format": "double"
          },
          "SummaryRemainingMaterialCost": {
            "type": "number",
            "description": "The remaining material costs for all project expenses associated with the activities in the WBS.",
            "format": "double"
          },
          "SummaryRemainingNonLaborCost": {
            "type": "number",
            "description": "The remaining nonlabor costs for all project expenses associated with the activities in the WBS.",
            "format": "double"
          },
          "SummaryRemainingNonLaborUnits": {
            "type": "number",
            "description": "The remaining units for all nonlabor resources assigned to the activities. The remaining units reflects the work remaining to be done for the WBS.",
            "format": "double"
          },
          "SummaryRemainingStartDate": {
            "type": "string",
            "description": "The earliest remaining start of all activities assigned to the WBS.",
            "format": "date-time"
          },
          "SummaryRemainingTotalCost": {
            "type": "number",
            "description": "The sum of all remaining total costs in the WBS.",
            "format": "double"
          },
          "SummarySchedulePercentComplete": {
            "type": "number",
            "description": "The measure that indicates how much of the WBS baseline duration has been completed so far. Computed based on where the current data date falls between the activity's baseline start and finish dates. If the data date is earlier than the baseline start, the schedule % complete is 0. If the data date is later than the baseline finish, the schedule % complete is 100. The schedule % complete indicates how much of the WBS duration should be currently completed, relative to the selected baseline.",
            "format": "double"
          },
          "SummarySchedulePercentCompleteByLaborUnits": {
            "type": "number",
            "description": "The percent complete of units for all labor resources. Computed as Actual Labor Units / At Completion Labor Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummarySchedulePerformanceIndexByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Planned Value. A value less than 1 indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "SummarySchedulePerformanceIndexByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units divided by Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Planned Value. A negative value indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "SummaryScheduleVarianceByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units minus the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndex": {
            "type": "number",
            "description": "The value that is calculated as the Schedule Variance Labor Units divided by Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndexByCost": {
            "type": "number",
            "description": "The Schedule Variance divided by the Planned Value.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndexByLaborUnits": {
            "type": "number",
            "description": "The Schedule Variance Labor Units divided by the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryStartDateVariance": {
            "type": "number",
            "description": "The duration between the start date in the current project and the baseline start date. Calculated as start date - baseline start date.",
            "format": "double"
          },
          "SummaryToCompletePerformanceIndexByCost": {
            "type": "number",
            "description": "The (Budget at Completion - Earned Value) divided by (Estimate at Completion - Actual Cost).",
            "format": "double"
          },
          "SummaryTotalCostVariance": {
            "type": "number",
            "description": "The value that is calculated as baseline total cost - total cost.",
            "format": "double"
          },
          "SummaryTotalFloat": {
            "type": "number",
            "description": "The amount of time the WBS can be delayed before delaying the project finish date. Total float can be computed as late start - early start or as late finish - early finish; this option can be set when running the project scheduler.",
            "format": "double"
          },
          "SummaryUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for the resource assignments in the wbs. Computed as Actual Units / At Complete Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryVarianceAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Baseline Planned Total Labor Units minus Estimate at Completion Labor Units.",
            "format": "double"
          },
          "TotalBenefitPlan": {
            "type": "number",
            "description": "The sum of the monthly benefit plan.",
            "format": "double"
          },
          "TotalBenefitPlanTally": {
            "type": "number",
            "description": "The sum of the monthly benefit plan tally.",
            "format": "double"
          },
          "TotalSpendingPlan": {
            "type": "number",
            "description": "The sum of the monthly spending plan.",
            "format": "double"
          },
          "TotalSpendingPlanTally": {
            "type": "number",
            "description": "The sum of the monthly spending plan tally.",
            "format": "double"
          },
          "UnallocatedBudget": {
            "type": "number",
            "description": "The difference between the total current and distributed current budget. Calculated as total current budget - distributed current budget.",
            "format": "double"
          },
          "UndistributedCurrentVariance": {
            "type": "number",
            "description": "The total spending plan minus the total spending plan tally.",
            "format": "double"
          },
          "WBSCategoryObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated WBS category value. Note that the label used for the WBS category is dynamic; it is controlled by the system administrator.",
            "format": "int32"
          },
          "WBSMilestonePercentComplete": {
            "type": "number",
            "description": "The WBSMilestonePercentComplete field determines whether to calculate earned value by defining milestones at the WBS level and assigning a level of significance or weight to each of them. As progress occurs and you mark each milestone complete, the WBS element's performance percent complete is calculated based on the weight of the milestone.",
            "format": "double"
          }
        },
        "description": "WBS Entity"
      },
      "OBSExport": {
        "title": "OBS",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for OBS Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for OBS Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "GUID",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "OBS Entity"
      },
      "ResourceCodeAssignment": {
        "title": "ResourceCodeAssignment",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this code assignment was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this code assignment."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this code assignment was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this code assignment."
          },
          "ResourceCodeDescription": {
            "type": "string",
            "description": "The description of the associated resource code."
          },
          "ResourceCodeObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource code.",
            "format": "int32"
          },
          "ResourceCodeTypeName": {
            "type": "string",
            "description": "The name of the parent resource code type."
          },
          "ResourceCodeTypeObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent resource code type.",
            "format": "int32"
          },
          "ResourceCodeValue": {
            "type": "string",
            "description": "The value of the associated resource code."
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the associated resource."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource to which the resource code is assigned."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the resource to which the resource code is assigned.",
            "format": "int32"
          }
        },
        "description": "ResourceCodeAssignment Entity"
      },
      "CurrencyExport": {
        "title": "Currency",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for Currency Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for Currency Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "DECIMAL_PLACES",
                "DECIMAL_SYMBOL",
                "DIGIT_GROUPING_SYMBOL",
                "EXCHANGE_RATE",
                "ID",
                "IS_BASE_CURRENCY",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "NEGATIVE_SYMBOL",
                "OBJECT_ID",
                "POSITIVE_SYMBOL",
                "SYMBOL"
              ]
            }
          }
        },
        "description": "Currency Entity"
      },
      "MemberProject": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ObjectId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "MemberProject"
      },
      "SummarizeProject": {
        "title": "SummarizeProject",
        "type": "object",
        "properties": {
          "ObjectId": {
            "type": "integer",
            "description": "The unique identifier of the project you want to summarize.",
            "format": "int32"
          },
          "Timeout": {
            "type": "integer",
            "description": "The amount of time in seconds that the server side will wait for the job service to complete before it returns with the current job status. The Timeout parameter is optional. When this operation is used without specifying a Timeout parameter or with a Timeout of 0, the server immediately returns without waiting for the job service to complete.",
            "format": "int32"
          }
        },
        "description": "SummarizeProject Entity"
      },
      "Schedule": {
        "title": "Schedule",
        "type": "object",
        "properties": {
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique identifier of the project.",
            "format": "int32"
          },
          "NewDataDate": {
            "type": "string",
            "description": "The new data date.",
            "format": "date-time"
          },
          "Timeout": {
            "type": "integer",
            "description": "The amount of time in seconds that the server side will wait for the job service to complete before it returns with the current job status. The Timeout parameter is optional. When you use this operation without specifying a Timeout parameter or with a Timeout of 0, the server immediately returns without waiting for the job service to complete.",
            "format": "int32"
          }
        },
        "description": "Schedule Entity"
      },
      "UserInterfaceView": {
        "title": "UserInterfaceView",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this user interface view was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this user interface view."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this user interface view was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this user interface view."
          },
          "Name": {
            "type": "string",
            "description": "The name of the user interface view."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user.",
            "format": "int32"
          }
        },
        "description": "UserInterfaceView Entity"
      },
      "ProjectResource": {
        "title": "ProjectResource",
        "required": [
          "ProjectObjectId",
          "ResourceObjectId",
          "RoleObjectId",
          "WBSObjectId"
        ],
        "type": "object",
        "properties": {
          "CommittedFlag": {
            "type": "boolean",
            "description": "The Boolean value that determines whether a resource is committed, and so, the resource assignment is stable and unlikely to change. When calculating availability, Primavera considers only assignments that are marked as committed."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this project resource was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project resource."
          },
          "FinishDate": {
            "type": "string",
            "description": "The finish date of the assignment. By default, it is set to the Planned Start date of the project + 1 day, finishing at 5:00pm. For example, if the planned start date is January 1, 8:00am, the finish date is set to January 2, 5:00pm. If LifeOfProjectFlag is set to true during creation, this date is set to the Project Scheduled Finish date. If associated ProjectResourceQuantities exist, this field is set to the end of the week of the latest ProjectResourceQuantity.",
            "format": "date-time"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project resource was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project resource."
          },
          "LifeOfProjectFlag": {
            "type": "boolean",
            "description": "The Boolean value that determines whether a resource that is assigned to a project at Project or WBS level, has that assignment for the duration of the project."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ProjectResourceCategoryName": {
            "type": "string",
            "description": "The name of the associated project resource category."
          },
          "ProjectResourceCategoryObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project resource category.",
            "format": "int32"
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the associated resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "RoleName": {
            "type": "string",
            "description": "The name of the associated role."
          },
          "RoleObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated role.",
            "format": "int32"
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the assignment. By default, it is set to the Planned Start date of the project. If LifeOfProjectFlag is set to true, this date is set to the Project Planned Start date. If associated ProjectResourceQuantities exist, this field is set to the beginning of the week of the earliest ProjectResourceQuantity.",
            "format": "date-time"
          },
          "Status": {
            "type": "string",
            "description": "The project or WBS status: 'Planned', 'Active', 'Inactive', 'What-If', or 'Requested'."
          },
          "WBSCode": {
            "type": "string",
            "description": "The short code assigned to the associated WBS element for identification."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated WBS.",
            "format": "int32"
          },
          "ResourceRequest": {
            "$ref": "#/components/schemas/ResourceRequest"
          }
        },
        "description": "ProjectResource Entity"
      },
      "TimesheetAudit": {
        "title": "TimesheetAudit",
        "type": "object",
        "properties": {
          "ApproverUserName": {
            "type": "string",
            "description": "The user name of the approver."
          },
          "ApproverUserObjectId": {
            "type": "integer",
            "description": "The unique user ID of the approver.",
            "format": "int32"
          },
          "AuditDate": {
            "type": "string",
            "description": "The date this timesheet audit was created.",
            "format": "date-time"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OverheadHours": {
            "type": "number",
            "description": "The total overhead hours for the timesheet.",
            "format": "double"
          },
          "OverheadOvertimeHours": {
            "type": "number",
            "description": "The total overhead overtime hours for the timesheet.",
            "format": "double"
          },
          "PendingOverheadHours": {
            "type": "number",
            "description": "The total pending overhead hours for the timesheet.",
            "format": "double"
          },
          "PendingOverheadOvertimeHours": {
            "type": "number",
            "description": "The total pending overhead overtime hours for the timesheet.",
            "format": "double"
          },
          "PendingProjectHours": {
            "type": "number",
            "description": "The total pending project hours for the timesheet.",
            "format": "double"
          },
          "PendingProjectOvertimeHours": {
            "type": "number",
            "description": "The total pending project overtime hours for the timesheet",
            "format": "double"
          },
          "ProjectHours": {
            "type": "number",
            "description": "The total project hours for the timesheet.",
            "format": "double"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ProjectOvertimeHours": {
            "type": "number",
            "description": "The total project overtime hours for the timesheet.",
            "format": "double"
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the resource."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "TimesheetActivityStatus": {
            "type": "string",
            "description": "The status of the timesheet activity, the value of which will depend on who approved or rejected it. Valid values are 'Submitted', 'Approved', 'Resource Manager Approved', 'Project Manager Approved', and 'Rejected'."
          },
          "TimesheetApprovingAs": {
            "type": "string",
            "description": "The role of the timesheet approver. Valid values are 'Project Manager', 'Resource Manager', 'Project Manager Delegate', and 'Resource Manager Delegate'."
          },
          "TimesheetPeriodEndDate": {
            "type": "string",
            "description": "The timesheet period end date.",
            "format": "date-time"
          },
          "TimesheetPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the timesheet period.",
            "format": "int32"
          },
          "TimesheetPeriodStartDate": {
            "type": "string",
            "description": "The timesheet period start date.",
            "format": "date-time"
          },
          "TimesheetStatus": {
            "type": "string",
            "description": "The status of the timesheet. Valid values are 'Submitted', 'Approved', 'Resource Manager Approved', 'Project Manager Approved', and 'Rejected'."
          }
        },
        "description": "TimesheetAudit Entity"
      },
      "Location": {
        "title": "Location",
        "required": ["Latitude", "Longitude", "Name"],
        "type": "object",
        "properties": {
          "AddressLine1": {
            "type": "string",
            "description": "The first line of the address with street number and street name."
          },
          "AddressLine2": {
            "type": "string",
            "description": "The second line of the address with street number and street name."
          },
          "City": {
            "type": "string",
            "description": "The city name of the address."
          },
          "Country": {
            "type": "string",
            "description": "The country of the address."
          },
          "CountryCode": {
            "type": "string",
            "description": "The country code of the address."
          },
          "CreateDate": {
            "type": "string",
            "description": "The creation date of the Location.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this location."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this location was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this location."
          },
          "Latitude": {
            "type": "number",
            "description": "The latitude of the address.",
            "format": "double"
          },
          "Longitude": {
            "type": "number",
            "description": "The longitude of the address.",
            "format": "double"
          },
          "Municipality": {
            "type": "string",
            "description": "The municipality name of the address."
          },
          "Name": {
            "type": "string",
            "description": "The name of the location."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID of the location.",
            "format": "int32"
          },
          "PostalCode": {
            "type": "string",
            "description": "The postal code of the address."
          },
          "State": {
            "type": "string",
            "description": "The state name of the address."
          },
          "StateCode": {
            "type": "string",
            "description": "The state abbreviation of the address."
          }
        },
        "description": "Location Entity"
      },
      "ResourceAccess": {
        "title": "ResourceAccess",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this resource security was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this resource security."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this resource security was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this resource security."
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the resource."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "description": "The user's login name."
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user.",
            "format": "int32"
          }
        },
        "description": "ResourceAccess Entity"
      },
      "ActivityStepTemplateItem": {
        "title": "ActivityStepTemplateItem",
        "type": "object",
        "properties": {
          "ActivityStepTemplateObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity step template to which this item belongs.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this activity step template item was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this activity step template item."
          },
          "Description": {
            "type": "string",
            "description": "The description of the activity step."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this activity step template item was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this activity step template item."
          },
          "Name": {
            "type": "string",
            "description": "The name of the activity step template item."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          },
          "Weight": {
            "type": "number",
            "description": "The weight that is assigned to the step. This is a user defined field that is used to calculate the physical percent complete when the project option is set.",
            "format": "double"
          }
        },
        "description": "ActivityStepTemplateItem Entity"
      },
      "RiskExport": {
        "title": "Risk",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for Risk Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for Risk Business Object",
              "enum": [
                "CAUSE",
                "COST_THRESHOLD_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "EFFECT",
                "EXPOSURE",
                "EXPOSURE_FINISH_DATE",
                "EXPOSURE_START_DATE",
                "ID",
                "IDENTIFIED_BY_RESOURCE_ID",
                "IDENTIFIED_BY_RESOURCE_NAME",
                "IDENTIFIED_BY_RESOURCE_OBJECT_ID",
                "IDENTIFIED_DATE",
                "IMPACT_THRESHOLD_VALUES",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "NOTE",
                "OBJECT_ID",
                "PROBABILITY_THRESHOLD_ID",
                "PROJECT_ID",
                "PROJECT_NAME",
                "PROJECT_OBJECT_ID",
                "RESOURCE_ID",
                "RESOURCE_NAME",
                "RESOURCE_OBJECT_ID",
                "RESPONSE_TOTAL_COST",
                "RISK_CATEGORY_NAME",
                "RISK_CATEGORY_OBJECT_ID",
                "SCHEDULE_THRESHOLD_ID",
                "SCORE",
                "SCORE_COLOR",
                "SCORE_TEXT",
                "STATUS",
                "TYPE"
              ]
            }
          }
        },
        "description": "Risk Entity"
      },
      "ResourceCodeAssignmentExport": {
        "title": "ResourceCodeAssignment",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          }
        },
        "description": "ResourceCodeAssignment Entity"
      },
      "Values": {
        "type": "object",
        "properties": {
          "Value0": {
            "type": "number",
            "format": "double"
          },
          "Value5": {
            "type": "number",
            "format": "double"
          },
          "Value10": {
            "type": "number",
            "format": "double"
          },
          "Value15": {
            "type": "number",
            "format": "double"
          },
          "Value20": {
            "type": "number",
            "format": "double"
          },
          "Value25": {
            "type": "number",
            "format": "double"
          },
          "Value30": {
            "type": "number",
            "format": "double"
          },
          "Value35": {
            "type": "number",
            "format": "double"
          },
          "Value40": {
            "type": "number",
            "format": "double"
          },
          "Value45": {
            "type": "number",
            "format": "double"
          },
          "Value50": {
            "type": "number",
            "format": "double"
          },
          "Value55": {
            "type": "number",
            "format": "double"
          },
          "Value60": {
            "type": "number",
            "format": "double"
          },
          "Value65": {
            "type": "number",
            "format": "double"
          },
          "Value70": {
            "type": "number",
            "format": "double"
          },
          "Value75": {
            "type": "number",
            "format": "double"
          },
          "Value80": {
            "type": "number",
            "format": "double"
          },
          "Value85": {
            "type": "number",
            "format": "double"
          },
          "Value90": {
            "type": "number",
            "format": "double"
          },
          "Value95": {
            "type": "number",
            "format": "double"
          },
          "Value100": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "EPS": {
        "title": "EPS",
        "required": ["Id", "Name", "OBSObjectId", "ParentObjectId"],
        "type": "object",
        "properties": {
          "AnticipatedFinishDate": {
            "type": "string",
            "description": "The anticipated finish date of the EPS. User-entered - not dependent upon any other fields. If there are no children, the anticipated finish date will be the finish date displayed in the columns.",
            "format": "date-time"
          },
          "AnticipatedStartDate": {
            "type": "string",
            "description": "The anticipated start date of the EPS. User-entered - not dependent upon any other fields. If there are no children, the anticipated start date will be the start date displayed in the columns.",
            "format": "date-time"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this EPS was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this EPS."
          },
          "CurrentBudget": {
            "type": "number",
            "description": "The sum of the original budget plus the approved and pending budgets from the budget change log.",
            "format": "double"
          },
          "CurrentVariance": {
            "type": "number",
            "description": "The difference between the current budget and the total spending plan. Calculated as current budget - total spending plan. Not rolled up",
            "format": "double"
          },
          "DistributedCurrentBudget": {
            "type": "number",
            "description": "The current budget values from one level lower.",
            "format": "double"
          },
          "FinishDate": {
            "type": "string",
            "description": "The finish date of the EPS.",
            "format": "date-time"
          },
          "GUID": {
            "type": "string",
            "description": "The globally unique ID generated by the system."
          },
          "Id": {
            "type": "string",
            "description": "The short code assigned to each EPS element for identification."
          },
          "IndependentETCLaborUnits": {
            "type": "number",
            "description": "The user-entered ETC total labor.",
            "format": "double"
          },
          "IndependentETCTotalCost": {
            "type": "number",
            "description": "The user-entered ETC total cost.",
            "format": "double"
          },
          "LastSummarizedDate": {
            "type": "string",
            "description": "The date the project was last summarized.",
            "format": "date-time"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this EPS was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this EPS."
          },
          "Name": {
            "type": "string",
            "description": "The name of the EPS element."
          },
          "OBSName": {
            "type": "string",
            "description": "The name of the person/role in the organization, sometimes referred to as the \"responsible manager\"."
          },
          "OBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the project manager from the project's OBS tree who is responsible for the EPS.",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OriginalBudget": {
            "type": "number",
            "description": "The original budget for the project.",
            "format": "double"
          },
          "ParentEPSId": {
            "type": "string"
          },
          "ParentEPSName": {
            "type": "string"
          },
          "ParentObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent EPS of this EPS in the hierarchy.",
            "format": "int32"
          },
          "PlannedStartDate": {
            "type": "string",
            "description": "The planned start date of the project. Used by the project scheduler.",
            "format": "date-time"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The internal Project ID of the EPS. This ID cannot be used to load a Project object directly.",
            "format": "int32"
          },
          "ProposedBudget": {
            "type": "number",
            "description": "The Proposed Budget, which is the sum of the original budget plus the approved and pending budgets from the budget change log.",
            "format": "double"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the EPS.",
            "format": "date-time"
          },
          "SummaryAccountingVarianceByCost": {
            "type": "number",
            "description": "Ttual Cost. A negative value indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryAccountingVarianceByLaborUnits": {
            "type": "number",
            "description": "The Planned Value Labor Units minus the Actual Units. Negative value indicates that Actual Units have exceeded the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently in progress.",
            "format": "int32"
          },
          "SummaryActualDuration": {
            "type": "number",
            "description": "The actual duration.",
            "format": "double"
          },
          "SummaryActualExpenseCost": {
            "type": "number",
            "description": "The actual costs for all project expenses associated with the EPS.",
            "format": "double"
          },
          "SummaryActualFinishDate": {
            "type": "string",
            "description": "The latest actual finish date of all activities in the EPS.",
            "format": "date-time"
          },
          "SummaryActualLaborCost": {
            "type": "number",
            "description": "The actual cost for all labor resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualLaborUnits": {
            "type": "number",
            "description": "The actual labor units.",
            "format": "double"
          },
          "SummaryActualMaterialCost": {
            "type": "number",
            "description": "The actual units for all material resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualNonLaborCost": {
            "type": "number",
            "description": "The actual units for all nonlabor resources assigned to the activity.",
            "format": "double"
          },
          "SummaryActualNonLaborUnits": {
            "type": "number",
            "description": "The actual nonlabor units.",
            "format": "double"
          },
          "SummaryActualStartDate": {
            "type": "string",
            "description": "The earliest actual start date of all activities in the EPS.",
            "format": "date-time"
          },
          "SummaryActualThisPeriodCost": {
            "type": "number",
            "description": "The actual this period cost (will be labor or nonlabor).",
            "format": "double"
          },
          "SummaryActualThisPeriodLaborCost": {
            "type": "number",
            "description": "The actual this period labor cost",
            "format": "double"
          },
          "SummaryActualThisPeriodLaborUnits": {
            "type": "number",
            "description": "The actual this period labor units.",
            "format": "double"
          },
          "SummaryActualThisPeriodMaterialCost": {
            "type": "number",
            "description": "The actual this period material cost.",
            "format": "double"
          },
          "SummaryActualThisPeriodNonLaborCost": {
            "type": "number",
            "description": "The actual this period nonlabor cost.",
            "format": "double"
          },
          "SummaryActualThisPeriodNonLaborUnits": {
            "type": "number",
            "description": "The actual this period nonlabor units.",
            "format": "double"
          },
          "SummaryActualTotalCost": {
            "type": "number",
            "description": "The actual labor cost + actual nonlabor cost + actual expense cost as of the project data date.",
            "format": "double"
          },
          "SummaryActualValueByCost": {
            "type": "number",
            "description": "The actual total cost incurred on the activity as of the project data date, computed as Actual Labor Cost + Actual Nonlabor Cost + Actual Material Cost + Actual Expense Cost.",
            "format": "double"
          },
          "SummaryActualValueByLaborUnits": {
            "type": "number",
            "description": "The actual total labor units for the activity as of the project data date (i.e., actual total cost by labor units).",
            "format": "double"
          },
          "SummaryAtCompletionDuration": {
            "type": "number",
            "description": "The duration at completion.",
            "format": "double"
          },
          "SummaryAtCompletionExpenseCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining cost for all project expenses associated with the cost account. Computed as Actual Expense Cost + Remaining Expense Cost.",
            "format": "double"
          },
          "SummaryAtCompletionLaborCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining costs for all labor resources assigned to the activity. Computed as actual labor cost + remaining labor cost. Same as the planned labor costs if the activity is not started and the actual labor costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionLaborUnits": {
            "type": "number",
            "description": "The sum of the actual plus remaining units for all labor resources assigned to the activity. Computed as actual labor units + remaining labor units. Same as the planned labor units if the activity is not started and the actual labor units once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionMaterialCost": {
            "type": "number",
            "description": "The material cost at completion. It is the sum of the actual plus remaining costs for all material resources assigned to the activity. Computed as actual material cost + remaining material cost. Same as the planned material costs if the activity is not started and the actual material costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionNonLaborCost": {
            "type": "number",
            "description": "The nonlabor cost at completion. It is the sum of the actual plus remaining costs for all nonlabor resources assigned to the activity. Computed as actual nonlabor cost + remaining nonlabor cost. Same as the planned nonlabor costs if the activity is not started and the actual nonlabor costs once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionNonLaborUnits": {
            "type": "number",
            "description": "The nonlabor units at completion. It is the sum of the actual plus remaining units for all nonlabor resources assigned to the activity. Computed as actual nonlabor units + remaining nonlabor units. Same as the planned nonlabor units if the activity is not started and the actual nonlabor units once the activity is completed.",
            "format": "double"
          },
          "SummaryAtCompletionTotalCost": {
            "type": "number",
            "description": "The estimated cost at completion for the activity. Computed as the actual total cost plus the estimate-to-complete cost; EAC = ACWP + ETC. Note that the method for computing ETC depends on the earned-value technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryAtCompletionTotalCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Total Cost - At Completion Total Cost.",
            "format": "double"
          },
          "SummaryBaselineCompletedActivityCount": {
            "type": "integer",
            "description": "The number of completed activities in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineDuration": {
            "type": "number",
            "description": "The planned duration for the activity in the primary baseline. Planned duration is the total working time from the activity current start date to the current finish date. Same as the actual duration plus the remaining duration. The total working time is computed using the activity's calendar.",
            "format": "double"
          },
          "SummaryBaselineExpenseCost": {
            "type": "number",
            "description": "The planned cost for all project expenses associated with the activity in the primary baseline. Computed as the baseline actual expense cost plus the baseline remaining expense cost.",
            "format": "double"
          },
          "SummaryBaselineFinishDate": {
            "type": "string",
            "description": "The current latest finish date of all activities in the EPS for the current baseline.",
            "format": "date-time"
          },
          "SummaryBaselineInProgressActivityCount": {
            "type": "integer",
            "description": "The number of activities that should be currently in progress, according to the primary baseline. Computed using the baseline start and finish dates and the current data date.",
            "format": "int32"
          },
          "SummaryBaselineLaborCost": {
            "type": "number",
            "description": "The planned cost for all labor resources assigned to the activity in the primary baseline. Computed from the baseline At Completion labor units. If no resources are assigned, computed as the activity Baseline Planned Labor Units * Project Default Price / Time.",
            "format": "double"
          },
          "SummaryBaselineLaborUnits": {
            "type": "number",
            "description": "The planned units for all labor resources assigned to the activity in the primary baseline. Computed as the baseline actual labor units plus the baseline remaining labor units.",
            "format": "double"
          },
          "SummaryBaselineMaterialCost": {
            "type": "number",
            "description": "The planned cost for all material resources assigned to the activity in the primary baseline. Computed from the baseline At Completion nonlabor units. If no resources are assigned.",
            "format": "double"
          },
          "SummaryBaselineNonLaborCost": {
            "type": "number",
            "description": "The planned cost for all nonlabor resources assigned to the activity in the primary baseline. Computed from the baseline At Completion nonlabor units. If no resources are assigned, computed as the activity Baseline Planned Nonlabor Units * Project Default Price / Time.",
            "format": "double"
          },
          "SummaryBaselineNonLaborUnits": {
            "type": "number",
            "description": "The planned units for all nonlabor resources assigned to the activity in the primary baseline. Computed as the baseline actual nonlabor units plus the baseline remaining nonlabor units.",
            "format": "double"
          },
          "SummaryBaselineNotStartedActivityCount": {
            "type": "integer",
            "description": "The number of activities not started in the baseline.",
            "format": "int32"
          },
          "SummaryBaselineStartDate": {
            "type": "string",
            "description": "The current earliest start date of all activities in the EPS for the current baseline.",
            "format": "date-time"
          },
          "SummaryBaselineTotalCost": {
            "type": "number",
            "description": "The Planned Total Cost for the activity in the primary baseline, including labor resources, nonlabor resources, and project expenses. Baseline Planned Total Cost = Baseline Planned Labor Cost + Baseline Planned Nonlabor Cost + Baseline Planned Expense Cost.",
            "format": "double"
          },
          "SummaryBudgetAtCompletionByCost": {
            "type": "number",
            "description": "The Planned Total Cost through activity completion. Computed as Planned Labor Cost + Planned Nonlabor Cost + Planned Expense Cost, same as the Planned Total Cost.",
            "format": "double"
          },
          "SummaryBudgetAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Baseline Labor Units",
            "format": "double"
          },
          "SummaryCompletedActivityCount": {
            "type": "integer",
            "description": "The number of activities that have an Actual Finish in the EPS.",
            "format": "int32"
          },
          "SummaryCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of costs for the resource assignments in the EPS. Computed as Actual Units / At Complete Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryCostPercentOfPlanned": {
            "type": "number",
            "description": "The activity actual cost percent of planned. Computed as actual total cost / baseline total cost * 100, or equivalently as ACWP / BAC * 100. The value can exceed 100. The baseline total cost is the activity's at completion cost from the current baseline. This field is named SummaryCostPercentOfBudget in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "SummaryCostPerformanceIndexByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Actual Cost. A value less than 1 indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryCostPerformanceIndexByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units / Actual Labor Units.",
            "format": "double"
          },
          "SummaryCostVarianceByCost": {
            "type": "number",
            "description": "The Earned Value minus the Actual Cost. A negative value indicates that the Actual Cost has exceeded the Planned Value.",
            "format": "double"
          },
          "SummaryCostVarianceByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Cost minus Actual Value Labor Cost.",
            "format": "double"
          },
          "SummaryCostVarianceIndex": {
            "type": "number",
            "description": "The value that is calculated as the Cost Variance divided by Earned Value.",
            "format": "double"
          },
          "SummaryCostVarianceIndexByCost": {
            "type": "number",
            "description": "The Cost Variance divided by Earned Value.",
            "format": "double"
          },
          "SummaryCostVarianceIndexByLaborUnits": {
            "type": "number",
            "description": "The Cost Variance Labor Units divided by Earned Value Labor Units.",
            "format": "double"
          },
          "SummaryDurationPercentComplete": {
            "type": "number",
            "description": "The activity actual duration percent of planned. Computed as (baseline planned duration - remaining duration) / baseline planned duration * 100.",
            "format": "double"
          },
          "SummaryDurationPercentOfPlanned": {
            "type": "number",
            "description": "The summary actual duration percent of planned of all activities under this EPS. Computed as actual duration / baseline duration * 100. The value can exceed 100. The Baseline duration is the activity's at complete duration from the current baseline.",
            "format": "double"
          },
          "SummaryDurationVariance": {
            "type": "number",
            "description": "The duration between the activity's baseline duration and the at complete duration. Computed as baseline duration - at completion duration.",
            "format": "double"
          },
          "SummaryEarnedValueByCost": {
            "type": "number",
            "description": "The Budget at Completion * Performance % Complete. The method for computing the Performance Percent Complete depends on the Earned Value technique selected for the activity's WBS. Budget at Completion is computed from the primary baseline.",
            "format": "double"
          },
          "SummaryEarnedValueByLaborUnits": {
            "type": "number",
            "description": "The Schedule Variance Labor Units divided by the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionByCost": {
            "type": "number",
            "description": "The Actual Cost plus the Estimate to Complete Cost. The method for computing Estimate to Complete depends on the Earned Value technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Actual Labor Units + Estimate To Complete Labor Units. (Estimate To Complete Labor Units is calculated based off of the Earned Value setting on the EPS.)",
            "format": "double"
          },
          "SummaryEstimateAtCompletionHighPercentByLaborUnits": {
            "type": "number",
            "description": "The high forecast of Estimate At Completion (EAC) by labor units.",
            "format": "double"
          },
          "SummaryEstimateAtCompletionLowPercentByLaborUnits": {
            "type": "number",
            "description": "The low forecast of Estimate At Completion (EAC) by labor units.",
            "format": "double"
          },
          "SummaryEstimateToCompleteByCost": {
            "type": "number",
            "description": "The Remaining Total Cost for the activity or the Performance Factor * (Budget at Completion - Earned Value), depending on the Earned Value technique selected for the activity's WBS (calculated from the primary baseline).",
            "format": "double"
          },
          "SummaryEstimateToCompleteByLaborUnits": {
            "type": "number",
            "description": "The estimated quantity to complete the activity. Computed as either the remaining total units for the activity, or as Performance Factor * (Baseline Planned Labor Units - Planned Quantity of Work Performed), depending on the Earned Value Technique selected for the activity's WBS.",
            "format": "double"
          },
          "SummaryExpenseCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all expenses associated with the EPS. It is computed as Actual Expense Cost / At Complete Expense Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryExpenseCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Expense Cost - At Completion Expense Cost (At Completion Expense Cost = Actual Expense Cost + Remaining Expense Cost).",
            "format": "double"
          },
          "SummaryFinishDateVariance": {
            "type": "number",
            "description": "The duration between the finish date in the current project and the baseline finish date. Calculated as finish date - baseline finish date.",
            "format": "double"
          },
          "SummaryInProgressActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently in progress.",
            "format": "int32"
          },
          "SummaryLaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all labor resources assigned to the EPS. It is computed as Actual Labor Cost / At Complete Labor Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryLaborCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Labor Cost - At Completion Labor Cost.",
            "format": "double"
          },
          "SummaryLaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all labor resources for the EPS. Computed as actual labor units / at complete labor units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryLaborUnitsVariance": {
            "type": "number",
            "description": "The difference between baseline labor units and at completion labor units. Calculated as Baseline labor units - at completion labor units.",
            "format": "double"
          },
          "SummaryMaterialCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all material resources assigned to the EPS. It is computed as Actual Material Cost / At Complete Material Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryMaterialCostVariance": {
            "type": "number",
            "description": "The variance that is calculated as Baseline Material Cost - At Completion Material Cost.",
            "format": "double"
          },
          "SummaryNonLaborCostPercentComplete": {
            "type": "number",
            "description": "The percent complete of cost for all non-labor resources assigned to the EPS. It is computed as Actual Nonlabor Cost / At Complete Nonlabor Cost * 100, and it is always in the range of 0 to 100.",
            "format": "double"
          },
          "SummaryNonLaborCostVariance": {
            "type": "number",
            "description": "The Baseline Planned Nonlabor Cost - At Completion Nonlabor Cost.",
            "format": "double"
          },
          "SummaryNonLaborUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for all nonlabor resources for the EPS. Computed as Actual Nonlabor Cost / At Completion Nonlabor Cost * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryNonLaborUnitsVariance": {
            "type": "number",
            "description": "The difference between baseline nonlabor units and at completion non labor units. Calculated as Baseline nonlabor units - at completion nonlabor units.",
            "format": "double"
          },
          "SummaryNotStartedActivityCount": {
            "type": "integer",
            "description": "The number of activities that are currently not started.",
            "format": "int32"
          },
          "SummaryPerformancePercentCompleteByCost": {
            "type": "number",
            "description": "The percent complete of performance for all labor resources, nonlabor resources, and expenses. Computed as Earned Value / Budget At Completion * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryPerformancePercentCompleteByLaborUnits": {
            "type": "number",
            "description": "The percent complete of performance for all labor resources. Computed as earned value labor units / baseline labor units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryPlannedCost": {
            "type": "number",
            "description": "The sum of all planned expense, non labor, labor, and material costs in the EPS.",
            "format": "double"
          },
          "SummaryPlannedDuration": {
            "type": "number",
            "description": "The total working days between planned start and finish dates in the EPS.",
            "format": "double"
          },
          "SummaryPlannedExpenseCost": {
            "type": "number",
            "description": "The sum of all planned expense costs in the EPS.",
            "format": "double"
          },
          "SummaryPlannedFinishDate": {
            "type": "string",
            "description": "The latest planned finish date of all activities in the EPS.",
            "format": "date-time"
          },
          "SummaryPlannedLaborCost": {
            "type": "number",
            "description": "The sum of all planned labor costs in the EPS.",
            "format": "double"
          },
          "SummaryPlannedLaborUnits": {
            "type": "number",
            "description": "The sum of all planned labor units in the EPS.",
            "format": "double"
          },
          "SummaryPlannedMaterialCost": {
            "type": "number",
            "description": "The sum of all planned material costs in the EPS.",
            "format": "double"
          },
          "SummaryPlannedNonLaborCost": {
            "type": "number",
            "description": "The sum of all planned non labor costs in the EPS.",
            "format": "double"
          },
          "SummaryPlannedNonLaborUnits": {
            "type": "number",
            "description": "The sum of all planned non labor units in the EPS.",
            "format": "double"
          },
          "SummaryPlannedStartDate": {
            "type": "string",
            "description": "The earliest planned start date of all activities in the EPS.",
            "format": "date-time"
          },
          "SummaryPlannedValueByCost": {
            "type": "number",
            "description": "The Budget at Completion * Schedule % Complete. The Schedule % Complete specifies how much of the activity's baseline duration has been completed so far. Budget at Completion is computed from the primary baseline",
            "format": "double"
          },
          "SummaryPlannedValueByLaborUnits": {
            "type": "number",
            "description": "The portion of the baseline labor units that is scheduled to be completed as of the project data date. Computed as Baseline Labor Units * Schedule % Complete. The Schedule % Complete specifies how much of the activity's baseline duration has been completed so far. The Baseline Labor Units is taken from the current baseline.",
            "format": "double"
          },
          "SummaryProgressFinishDate": {
            "type": "string",
            "description": "The date the activity is expected to be finished according to the progress made on the activity's work products. The expected finish date is entered manually by people familiar with progress of the activity's work products.",
            "format": "date-time"
          },
          "SummaryRemainingDuration": {
            "type": "number",
            "description": "The total working time from the EPS remaining start date to the remaining finish date.",
            "format": "double"
          },
          "SummaryRemainingExpenseCost": {
            "type": "number",
            "description": "The remaining costs for all project expenses associated with the activities in the EPS.",
            "format": "double"
          },
          "SummaryRemainingFinishDate": {
            "type": "string",
            "description": "The date the resource is scheduled to finish the remaining work for the activity. This date is computed by the project scheduler but can be updated manually by the project manager. Before the activity is started, the remaining finish date is the same as the planned finish date.",
            "format": "date-time"
          },
          "SummaryRemainingLaborCost": {
            "type": "number",
            "description": "The remaining costs for all labor resources assigned to the activities. The remaining cost reflects the cost remaining for the EPS.",
            "format": "double"
          },
          "SummaryRemainingLaborUnits": {
            "type": "number",
            "description": "The remaining units for all labor resources assigned to the activities. The remaining units reflects the work remaining to be done for the EPS.",
            "format": "double"
          },
          "SummaryRemainingMaterialCost": {
            "type": "number",
            "description": "The remaining material costs for all project expenses associated with the activities in the EPS.",
            "format": "double"
          },
          "SummaryRemainingNonLaborCost": {
            "type": "number",
            "description": "The remaining nonlabor costs for all project expenses associated with the activities in the EPS.",
            "format": "double"
          },
          "SummaryRemainingNonLaborUnits": {
            "type": "number",
            "description": "The remaining units for all nonlabor resources assigned to the activities. The remaining units reflects the work remaining to be done for the EPS.",
            "format": "double"
          },
          "SummaryRemainingStartDate": {
            "type": "string",
            "description": "The earliest remaining start of all activities assigned to the EPS.",
            "format": "date-time"
          },
          "SummaryRemainingTotalCost": {
            "type": "number",
            "description": "The sum of all remaining total costs in the EPS.",
            "format": "double"
          },
          "SummarySchedulePercentComplete": {
            "type": "number",
            "description": "The measure that indicates how much of the EPS baseline duration has been completed so far. Computed based on where the current data date falls between the activity's baseline start and finish dates. If the data date is earlier than the Baseline start, the schedule % complete is 0. If the data date is later than the Baseline finish, the schedule % complete is 100. The schedule % complete indicates how much of the EPS duration should be currently completed, relative to the selected baseline.",
            "format": "double"
          },
          "SummarySchedulePercentCompleteByLaborUnits": {
            "type": "number",
            "description": "The percent complete of units for all labor resources. Computed as Actual Labor Units / At Completion Labor Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummarySchedulePerformanceIndexByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Planned Value. A value less than 1 indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "SummarySchedulePerformanceIndexByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units divided by Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceByCost": {
            "type": "number",
            "description": "The Earned Value divided by the Planned Value. A negative value indicates that less work was actually performed than was scheduled.",
            "format": "double"
          },
          "SummaryScheduleVarianceByLaborUnits": {
            "type": "number",
            "description": "The Earned Value Labor Units minus the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndex": {
            "type": "number",
            "description": "The value that is calculated as the Schedule Variance Labor Units divided by Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndexByCost": {
            "type": "number",
            "description": "The Schedule Variance divided by the Planned Value.",
            "format": "double"
          },
          "SummaryScheduleVarianceIndexByLaborUnits": {
            "type": "number",
            "description": "The Schedule Variance Labor Units divided by the Planned Value Labor Units.",
            "format": "double"
          },
          "SummaryStartDateVariance": {
            "type": "number",
            "description": "The duration between the start date in the current project and the baseline start date. Calculated as start date - baseline start date.",
            "format": "double"
          },
          "SummaryToCompletePerformanceIndexByCost": {
            "type": "number",
            "description": "The (Budget at Completion - Earned Value) divided by (Estimate at Completion - Actual Cost).",
            "format": "double"
          },
          "SummaryTotalCostVariance": {
            "type": "number",
            "description": "The value that is calculated as baseline total cost - total cost.",
            "format": "double"
          },
          "SummaryTotalFloat": {
            "type": "number",
            "description": "The amount of time the EPS can be delayed before delaying the project finish date. Total float can be computed as late start - early start or as late finish - early finish; this option can be set when running the project scheduler.",
            "format": "double"
          },
          "SummaryUnitsPercentComplete": {
            "type": "number",
            "description": "The percent complete of units for the resource assignments in the EPS. Computed as Actual Units / At Complete Units * 100. Always in the range 0 to 100.",
            "format": "double"
          },
          "SummaryVarianceAtCompletionByLaborUnits": {
            "type": "number",
            "description": "The Baseline Planned Total Labor Units minus Estimate at Completion Labor Units.",
            "format": "double"
          },
          "TotalBenefitPlan": {
            "type": "number",
            "description": "The sum of the monthly benefit plan.",
            "format": "double"
          },
          "TotalBenefitPlanTally": {
            "type": "number",
            "description": "The sum of the monthly benefit plan tally.",
            "format": "double"
          },
          "TotalFunding": {
            "type": "number",
            "description": "The total amount of funding contributed to the project by your funding sources.",
            "format": "double"
          },
          "TotalSpendingPlan": {
            "type": "number",
            "description": "The sum of the monthly spending plan.",
            "format": "double"
          },
          "TotalSpendingPlanTally": {
            "type": "number",
            "description": "The sum of the monthly spending plan tally.",
            "format": "double"
          },
          "UnallocatedBudget": {
            "type": "number",
            "description": "The total current budget minus the distributed current budget.",
            "format": "double"
          },
          "UndistributedCurrentVariance": {
            "type": "number",
            "description": "The total spending plan minus the total spending plan tally.",
            "format": "double"
          }
        },
        "description": "EPS Entity"
      },
      "ProjectIssueExport": {
        "title": "ProjectIssue",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectIssue Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectIssue Business Object",
              "enum": [
                "ACTIVITY_ID",
                "ACTIVITY_NAME",
                "ACTIVITY_OBJECT_ID",
                "ACTUAL_VALUE",
                "CREATE_DATE",
                "CREATE_USER",
                "DATE_IDENTIFIED",
                "IDENTIFIED_BY",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LOWER_THRESHOLD",
                "NAME",
                "NOTES",
                "OBS_NAME",
                "OBS_OBJECT_ID",
                "OBJECT_ID",
                "PARENT_WBS_OBJECT_ID",
                "PRIORITY",
                "PROJECT_ID",
                "PROJECT_NAME",
                "PROJECT_OBJECT_ID",
                "PROJECT_THRESHOLD_OBJECT_ID",
                "RAW_TEXT_NOTE",
                "RESOLUTION_DATE",
                "RESOURCE_ID",
                "RESOURCE_NAME",
                "RESOURCE_OBJECT_ID",
                "STATUS",
                "THRESHOLD_PARAMETER_OBJECT_ID",
                "UPPER_THRESHOLD",
                "WBS_CODE",
                "WBS_NAME",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ProjectIssue Entity"
      },
      "ActivityNoteExport": {
        "title": "ActivityNote",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ActivityNote Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ActivityNote Business Object",
              "enum": [
                "ACTIVITY_ID",
                "ACTIVITY_NAME",
                "ACTIVITY_OBJECT_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NOTE",
                "NOTEBOOK_TOPIC_NAME",
                "NOTEBOOK_TOPIC_OBJECT_ID",
                "OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "RAW_TEXT_NOTE",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ActivityNote Entity"
      },
      "MSPTemplate": {
        "title": "MSPTemplate",
        "type": "object",
        "properties": {
          "MSPTemplateType": {
            "type": "string",
            "description": "The content of the template."
          },
          "Name": {
            "type": "string",
            "description": "The name of the template."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ViewData": {
            "type": "string",
            "description": "The content of the template."
          }
        },
        "description": "MSPTemplate Entity"
      },
      "DocumentExport": {
        "title": "Document",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for Document Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for Document Business Object",
              "enum": [
                "ACTIVITY_OBJECT_ID",
                "AUTHOR",
                "CONTENT_REPOSITORY_DOCUMENT_INTERNAL_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "DELIVERABLE",
                "DESCRIPTION",
                "DOCUMENT_CATEGORY_NAME",
                "DOCUMENT_CATEGORY_OBJECT_ID",
                "DOCUMENT_STATUS_CODE_NAME",
                "DOCUMENT_STATUS_CODE_OBJECT_ID",
                "DOCUMENT_STATUS_NAME",
                "DOCUMENT_TYPE",
                "GUID",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "PRIVATE_LOCATION",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "PUBLIC_LOCATION",
                "REFERENCE_NUMBER",
                "RESOURCE_ID",
                "RESOURCE_NAME",
                "RESOURCE_OBJECT_ID",
                "REVISION_DATE",
                "SEQUENCE_NUMBER",
                "TITLE",
                "VERSION"
              ]
            }
          }
        },
        "description": "Document Entity"
      },
      "UDFTypeExport": {
        "title": "UDFType",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for UDFType Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for UDFType Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "DATA_TYPE",
                "FORMULA",
                "IS_CALCULATED",
                "IS_CONDITIONAL",
                "IS_SECURE_CODE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "SUBJECT_AREA",
                "SUMMARY_METHOD",
                "TITLE"
              ]
            }
          }
        },
        "description": "UDFType Entity"
      },
      "ActivityRiskExport": {
        "title": "ActivityRisk",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ActivityRisk Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ActivityRisk Business Object",
              "enum": [
                "ACTIVITY_ID",
                "ACTIVITY_NAME",
                "ACTIVITY_OBJECT_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "PROJECT_ID",
                "PROJECT_NAME",
                "PROJECT_OBJECT_ID",
                "RISK_ID",
                "RISK_NAME",
                "RISK_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ActivityRisk Entity"
      },
      "ResourceCurve": {
        "title": "ResourceCurve",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this resource curve was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this resource curve."
          },
          "IsDefault": {
            "type": "boolean",
            "description": "The flag that identifies the default curve. The default curve can not be edited."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this resource curve was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this resource curve."
          },
          "Name": {
            "type": "string",
            "description": "The name of the resource curve."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "Values": {
            "$ref": "#/components/schemas/Values"
          }
        },
        "description": "ResourceCurve Entity"
      },
      "StorePeriodPerformance": {
        "type": "object",
        "properties": {
          "projectObjectId": {
            "type": "array",
            "xml": {
              "name": "ProjectObjectId"
            },
            "items": {
              "type": "integer",
              "format": "int32",
              "xml": {
                "name": "ProjectObjectId"
              }
            }
          },
          "financialPeriodObjectId": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "name": "FinancialPeriodObjectId"
            }
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "name": "Timeout"
            }
          }
        }
      },
      "CancelJob": {
        "title": "CancelJob",
        "type": "object",
        "properties": {
          "JobId": {
            "type": "string"
          }
        },
        "description": "CancelJob Entity"
      },
      "ThresholdParameterExport": {
        "title": "ThresholdParameter",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ThresholdParameter Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ThresholdParameter Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "TYPE"
              ]
            }
          }
        },
        "description": "ThresholdParameter Entity"
      },
      "ActivityNote": {
        "title": "ActivityNote",
        "required": ["ActivityObjectId", "NotebookTopicObjectId"],
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "string",
            "description": "The short ID that uniquely identifies the activity to which the activity note is assigned."
          },
          "ActivityName": {
            "type": "string",
            "description": "The name of the activity to which the activity note is assigned."
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the activity note is assigned.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this note was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this note."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this note was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this note."
          },
          "Note": {
            "type": "string",
            "description": "The information that is associated with the notebook topic."
          },
          "NotebookTopicName": {
            "type": "string",
            "description": "The name of the associated notebook topic."
          },
          "NotebookTopicObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated notebook topic.",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RawTextNote": {
            "type": "string",
            "description": "The information that is associated with the notebook topic, without any HTML."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS for the activity.",
            "format": "int32"
          }
        },
        "description": "ActivityNote Entity"
      },
      "CreateActivityRiskResponse": {
        "title": "CreateActivityRiskResponse",
        "type": "object",
        "properties": {
          "RiskObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated risk.",
            "format": "int32"
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the risk is assigned.",
            "format": "int32"
          }
        },
        "description": "CreateActivityRiskResponse Entity"
      },
      "ReadCBSExpenseSpreadResponse": {
        "title": "ReadCBSExpenseSpreadResponse",
        "type": "object",
        "properties": {
          "cbsexpenseSpread": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CBSExpenseSpread"
            }
          },
          "CBSExpenseSpread": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CBSExpenseSpread"
            }
          }
        },
        "description": "ReadCBSExpenseSpreadResponse Entity"
      },
      "ResourceRole": {
        "title": "ResourceRole",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this resource role was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this resource role."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this resource role was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this resource role."
          },
          "Proficiency": {
            "type": "string",
            "description": "The resource's proficiency at performing this role. The values are '1 - Master', '2 - Expert', '3 - Skilled', '4 - Proficient', and '5 - Inexperienced'. If the current user does not have the ViewResourceRoleProficiency global security privilege, this field may not be accessed."
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the resource."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "RoleId": {
            "type": "string",
            "description": "The short code that uniquely identifies the role."
          },
          "RoleName": {
            "type": "string",
            "description": "The name of the role. The role name uniquely identifies the role."
          },
          "RoleObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated role.",
            "format": "int32"
          }
        },
        "description": "ResourceRole Entity"
      },
      "UpdateResourceAssignmentSpread": {
        "title": "UpdateResourceAssignmentSpread",
        "type": "object",
        "properties": {
          "PeriodType": {
            "type": "string",
            "description": "Spread period type enumerations are used to specify the spread interval for EPS, project, WBS, Activity, and resource assignment spreads."
          },
          "ResourceAssignmentSpread": {
            "type": "array",
            "description": "The live resource assignment spread data.",
            "items": {
              "$ref": "#/components/schemas/ResourceAssignmentSpread"
            }
          }
        },
        "description": "UpdateResourceAssignmentSpread Entity"
      },
      "ActivityCodeAssignment": {
        "title": "ActivityCodeAssignment",
        "required": ["ActivityCodeObjectId", "ActivityObjectId"],
        "type": "object",
        "properties": {
          "ActivityCodeDescription": {
            "type": "string",
            "description": "The description of the associated activity code."
          },
          "ActivityCodeObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated activity code.",
            "format": "int32"
          },
          "ActivityCodeTypeName": {
            "type": "string",
            "description": "The name of the parent activity code type."
          },
          "ActivityCodeTypeObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent activity code type.",
            "format": "int32"
          },
          "ActivityCodeTypeScope": {
            "type": "string",
            "description": "The scope of the associated activity code type: Global, EPS, or Project. An activity code with Global scope can be assigned to any activity. An activity code with EPS scope can be assigned only to an activity within a project under that particular EPS. Similarly, an activity code with Project scope can be assigned only to an activity within that particular project."
          },
          "ActivityCodeValue": {
            "type": "string",
            "description": "The value of the associated activity code."
          },
          "ActivityId": {
            "type": "string",
            "description": "The short ID that uniquely identifies the activity to which the activity code is assigned."
          },
          "ActivityName": {
            "type": "string",
            "description": "The name of the activity to which the activity code is assigned."
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the activity code is assigned.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this code assignment was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this code assignment."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this code assignment was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this code assignment."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS for the associated activity.",
            "format": "int32"
          }
        },
        "description": "ActivityCodeAssignment Entity"
      },
      "HolidayOrException": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "WorkTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkTime"
            }
          }
        }
      },
      "CreateResourceRoleResponse": {
        "title": "CreateResourceRoleResponse",
        "type": "object",
        "properties": {
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Resource.",
            "format": "int32"
          },
          "RoleObjectId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "CreateResourceRoleResponse Entity"
      },
      "RiskResponsePlan": {
        "title": "RiskResponsePlan",
        "required": ["Id", "RiskObjectId"],
        "type": "object",
        "properties": {
          "ActualCost": {
            "type": "number",
            "description": "The actual cost.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this risk response plan was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the risk response plan."
          },
          "FinishDate": {
            "type": "string",
            "description": "The finish date of the risk response action. If an activity is assigned, the risk response action uses the activity finish date.",
            "format": "date-time"
          },
          "Id": {
            "type": "string",
            "description": "The ID of the risk response plan. This must be unique within the assigned risk."
          },
          "IsActive": {
            "type": "boolean",
            "description": "The indication of whether the response plan is currently active for the associated risk. Only one response plan can be active at a given time for a risk."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk response plan was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the risk response plan."
          },
          "Name": {
            "type": "string",
            "description": "The name of the risk response plan."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "PlannedCost": {
            "type": "number",
            "description": "The planned cost.",
            "format": "double"
          },
          "PlannedFinishDate": {
            "type": "string",
            "description": "The planned finish date.",
            "format": "date-time"
          },
          "PlannedStartDate": {
            "type": "string",
            "description": "The planned start date.",
            "format": "date-time"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short name of the associated project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RemainingCost": {
            "type": "number",
            "description": "The remaining cost associated with the risk response action.",
            "format": "double"
          },
          "ResponseType": {
            "type": "string",
            "description": "The risk response plan type. If the risk is a threat, the valid types are 'Avoid', 'Transfer', 'Reduce', and 'Accept'. If the risk is a opportunity, the valid types are 'Exploit', 'Facilitate', 'Enhance', and 'Reject'."
          },
          "RiskId": {
            "type": "string",
            "description": "The ID of the risk."
          },
          "RiskName": {
            "type": "string",
            "description": "The name of the risk."
          },
          "RiskObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated risk.",
            "format": "int32"
          },
          "Score": {
            "type": "integer",
            "description": "The risk score from the numeric PID after all response actions of the response plan have been completed. The post response plan score is set from the response action with the latest finish date and the lowest score when more than one response action has the same date.",
            "format": "int32"
          },
          "ScoreColor": {
            "type": "string",
            "description": "The color of the tolerance threshold for the score value."
          },
          "ScoreText": {
            "type": "string",
            "description": "The risk score from the alphanumeric PID after all response actions of the response plan have been completed. The post response plan score is set from the response action with the latest finish date and the lowest score when more than one response action has the same date."
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the risk response action. If an activity is assigned, the risk response action uses the activity start date.",
            "format": "date-time"
          }
        },
        "description": "RiskResponsePlan Entity"
      },
      "Level": {
        "title": "SummarizeProject",
        "type": "object",
        "properties": {
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique identifier of the project you want to summarize.",
            "format": "int32"
          },
          "Timeout": {
            "type": "integer",
            "description": "The unique identifier of the project you want to summarize.",
            "format": "int32"
          }
        },
        "description": "SummarizeProject Entity"
      },
      "RoleCodeAssignmentExport": {
        "title": "RoleCodeAssignment",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          }
        },
        "description": "RoleCodeAssignment Entity"
      },
      "ResourceRequest": {
        "type": "object",
        "properties": {
          "FinishDate": {
            "type": "string",
            "format": "date-time"
          },
          "MatchAllCriteria": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "RequestedUnits": {
            "type": "number",
            "format": "double"
          },
          "SequenceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "ShowOnlyLaborResources": {
            "type": "boolean"
          },
          "ShowOverallocatedResources": {
            "type": "boolean"
          },
          "SortResultsByAvailability": {
            "type": "boolean"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "UseActivityDates": {
            "type": "boolean"
          },
          "ResourceRequestCriterion": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRequestCriterion"
            }
          }
        }
      },
      "CalendarExport": {
        "title": "Calendar",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for Calendar Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for Calendar Business Object",
              "enum": [
                "BASE_CALENDAR_OBJECT_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "HOURS_PER_DAY",
                "HOURS_PER_MONTH",
                "HOURS_PER_WEEK",
                "HOURS_PER_YEAR",
                "IS_BASELINE",
                "IS_DEFAULT",
                "IS_PERSONAL",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "TYPE"
              ]
            }
          }
        },
        "description": "Calendar Entity"
      },
      "ResourceAssignmentSpreadPeriod": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "ActualCost": {
            "type": "number",
            "format": "double"
          },
          "ActualOvertimeCost": {
            "type": "number",
            "format": "double"
          },
          "ActualOvertimeUnits": {
            "type": "number",
            "format": "double"
          },
          "ActualRegularCost": {
            "type": "number",
            "format": "double"
          },
          "ActualRegularUnits": {
            "type": "number",
            "format": "double"
          },
          "ActualUnits": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "StaffedRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "StaffedRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "StaffedRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "StaffedRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualOvertimeCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualOvertimeUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualRegularCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualRegularUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionUnits": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ResourceAssignmentPeriodActualExport": {
        "title": "ResourceAssignmentPeriodActual",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ResourceAssignmentPeriodActual Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ResourceAssignmentPeriodActual Business Object",
              "enum": [
                "ACTIVITY_OBJECT_ID",
                "ACTUAL_COST",
                "ACTUAL_UNITS",
                "CREATE_DATE",
                "CREATE_USER",
                "FINANCIAL_PERIOD_OBJECT_ID",
                "FINANCIAL_PERIOD_TEMPLATE_ID",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "PROJECT_OBJECT_ID",
                "RESOURCE_ASSIGNMENT_OBJECT_ID",
                "RESOURCE_TYPE",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ResourceAssignmentPeriodActual Entity"
      },
      "ResourceRoleSpreadPeriod": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "FinancialPeriodObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ActualCost": {
            "type": "number",
            "format": "double"
          },
          "ActualOvertimeCost": {
            "type": "number",
            "format": "double"
          },
          "ActualOvertimeUnits": {
            "type": "number",
            "format": "double"
          },
          "ActualRegularCost": {
            "type": "number",
            "format": "double"
          },
          "ActualRegularUnits": {
            "type": "number",
            "format": "double"
          },
          "ActualUnits": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "Limit": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "StaffedActualCost": {
            "type": "number",
            "format": "double"
          },
          "StaffedActualOvertimeCost": {
            "type": "number",
            "format": "double"
          },
          "StaffedActualOvertimeUnits": {
            "type": "number",
            "format": "double"
          },
          "StaffedActualRegularCost": {
            "type": "number",
            "format": "double"
          },
          "StaffedActualRegularUnits": {
            "type": "number",
            "format": "double"
          },
          "StaffedActualUnits": {
            "type": "number",
            "format": "double"
          },
          "StaffedAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "StaffedAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "StaffedPlannedCost": {
            "type": "number",
            "format": "double"
          },
          "StaffedPlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "StaffedRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "StaffedRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "StaffedRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "StaffedRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedActualCost": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedActualOvertimeCost": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedActualOvertimeUnits": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedActualRegularCost": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedActualRegularUnits": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedActualUnits": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedPlannedCost": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedPlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "UnstaffedRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualOvertimeCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualOvertimeUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualRegularCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualRegularUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeLimit": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodActualCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodActualUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedActualCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedActualOvertimeCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedActualOvertimeUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedActualRegularCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedActualRegularUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedActualUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedPlannedCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedPlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeStaffedRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedActualCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedActualOvertimeCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedActualOvertimeUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedActualRegularCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedActualRegularUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedActualUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedPlannedCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedPlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedRemainingLateCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedRemainingLateUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeUnstaffedRemainingUnits": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "CreateActivityPeriodActualResponse": {
        "title": "CreateProjectResourceQuantityResponse",
        "type": "object",
        "properties": {
          "FinancialPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated financial period.",
            "format": "int32"
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated activity.",
            "format": "int32"
          }
        },
        "description": "CreateProjectResourceQuantityResponse Entity"
      },
      "ResourceTeam": {
        "title": "ResourceTeam",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this resource team was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this resource team."
          },
          "Description": {
            "type": "string",
            "description": "The description of the resource team."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this resource team was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this resource team."
          },
          "Name": {
            "type": "string",
            "description": "The name of the resource team."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "description": "The user's login name."
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user.",
            "format": "int32"
          },
          "MemberResource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberResource"
            }
          }
        },
        "description": "ResourceTeam Entity"
      },
      "RelationshipExport": {
        "title": "Relationship",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for Relationship Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for Relationship Business Object",
              "enum": [
                "AREF",
                "ARLS",
                "COMMENTS",
                "CREATE_DATE",
                "CREATE_USER",
                "DRIVING",
                "IS_PREDECESSOR_BASELINE",
                "IS_PREDECESSOR_TEMPLATE",
                "IS_SUCCESSOR_BASELINE",
                "IS_SUCCESSOR_TEMPLATE",
                "LAG",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PREDECESSOR_ACTIVITY_ID",
                "PREDECESSOR_ACTIVITY_NAME",
                "PREDECESSOR_ACTIVITY_OBJECT_ID",
                "PREDECESSOR_ACTIVITY_TYPE",
                "PREDECESSOR_FINISH_DATE",
                "PREDECESSOR_PROJECT_ID",
                "PREDECESSOR_PROJECT_OBJECT_ID",
                "PREDECESSOR_START_DATE",
                "PREDECESSOR_WBS_NAME",
                "SUCCESSOR_ACTIVITY_ID",
                "SUCCESSOR_ACTIVITY_NAME",
                "SUCCESSOR_ACTIVITY_OBJECT_ID",
                "SUCCESSOR_ACTIVITY_TYPE",
                "SUCCESSOR_FINISH_DATE",
                "SUCCESSOR_PROJECT_ID",
                "SUCCESSOR_PROJECT_OBJECT_ID",
                "SUCCESSOR_START_DATE",
                "SUCCESSOR_WBS_NAME",
                "TYPE"
              ]
            }
          }
        },
        "description": "Relationship Entity"
      },
      "DocumentStatusCode": {
        "title": "DocumentStatusCode",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this document status was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this document status."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this document status was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this document status."
          },
          "Name": {
            "type": "string",
            "description": "The name of the document status code."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          }
        },
        "description": "DocumentStatusCode Entity"
      },
      "ActivityExpenseExport": {
        "title": "ActivityExpense",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "ActivityExpenseFieldType: List of Fields for ActivityExpense Business Object",
            "items": {
              "type": "string",
              "description": "ActivityExpenseFieldType: List of Fields for ActivityExpense Business Object",
              "enum": [
                "ACCRUAL_TYPE",
                "ACTIVITY_ID",
                "ACTIVITY_NAME",
                "ACTIVITY_OBJECT_ID",
                "ACTUAL_COST",
                "ACTUAL_UNITS",
                "AT_COMPLETION_COST",
                "AT_COMPLETION_UNITS",
                "AUTO_COMPUTE_ACTUALS",
                "CBS_CODE",
                "CBS_ID",
                "COST_ACCOUNT_ID",
                "COST_ACCOUNT_NAME",
                "COST_ACCOUNT_OBJECT_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "DOCUMENT_NUMBER",
                "EXPENSE_CATEGORY_NAME",
                "EXPENSE_CATEGORY_OBJECT_ID",
                "EXPENSE_DESCRIPTION",
                "EXPENSE_ITEM",
                "EXPENSE_PERCENT_COMPLETE",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "OVER_BUDGET",
                "PLANNED_COST",
                "PLANNED_UNITS",
                "PRICE_PER_UNIT",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "REMAINING_COST",
                "REMAINING_UNITS",
                "UNIT_OF_MEASURE",
                "VENDOR",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ActivityExpense Entity"
      },
      "CreateRiskImpactResponse": {
        "title": "CreateRiskImpactResponse",
        "type": "object",
        "properties": {
          "RiskObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated risk.",
            "format": "int32"
          },
          "RiskThresholdObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Threshold Type.",
            "format": "int32"
          }
        },
        "description": "CreateRiskImpactResponse Entity"
      },
      "TimesheetDelegate": {
        "title": "TimesheetDelegate",
        "type": "object",
        "properties": {
          "ActiveFlag": {
            "type": "boolean",
            "description": "The flag indicating whether this delegate is active."
          },
          "ApproverUserName": {
            "type": "string",
            "description": "The approver user's login name."
          },
          "ApproverUserObjectId": {
            "type": "integer",
            "description": "The unique ID of the approver user.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this timesheet delegate was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this timesheet delegate."
          },
          "DelegateUserEmailAddress": {
            "type": "string",
            "description": "The delegate user's email address."
          },
          "DelegateUserName": {
            "type": "string",
            "description": "The delegate user's login name."
          },
          "DelegateUserObjectId": {
            "type": "integer",
            "description": "The unique ID of the delegate user.",
            "format": "int32"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this timesheet delegate was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this timesheet delegate."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          }
        },
        "description": "TimesheetDelegate Entity"
      },
      "CreateResourceCodeAssignmentsResponse": {
        "title": "CreateResourceCodeAssignmentsResponse",
        "type": "object",
        "properties": {
          "ResourceCodeTypeObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent resource code type.",
            "format": "int32"
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the resource to which the resource code is assigned.",
            "format": "int32"
          }
        },
        "description": "CreateResourceCodeAssignmentsResponse Entity"
      },
      "SummarizeCBS": {
        "title": "SummarizeCBS",
        "type": "object",
        "properties": {
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique identifier of the project that you want to send to Primavera Unifier.",
            "format": "int32"
          },
          "Timeout": {
            "type": "integer",
            "description": "The amount of time in seconds that the server side will wait for the job service to complete before it returns with the current job status. The Timeout parameter is optional. When this operation is used without specifying a Timeout parameter or with a Timeout of 0, the server immediately returns without waiting for the job service to complete.",
            "format": "int32"
          }
        },
        "description": "SummarizeCBS Entity"
      },
      "ProjectSpendingPlanExport": {
        "title": "ProjectSpendingPlan",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectSpendingPlan Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectSpendingPlan Business Object",
              "enum": [
                "BENEFIT_PLAN",
                "CREATE_DATE",
                "CREATE_USER",
                "DATE",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "SPENDING_PLAN",
                "WBS_CODE",
                "WBS_NAME",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ProjectSpendingPlan Entity"
      },
      "ExportProject": {
        "title": "ExportProject",
        "type": "object",
        "properties": {
          "Encoding": {
            "type": "string",
            "description": "Specifies the encoding of the XML file that is exported, e.g., UTF-8."
          },
          "FileType": {
            "title": "FileTypeType",
            "type": "string",
            "description": "FileTypeType Entity",
            "enum": ["GZIP", "XML", "ZIP"]
          },
          "LineSeparator": {
            "type": "string",
            "description": "Specifies whether the Windows (\"\\r\\n\") or Unix (\"\\n\") line endings will be used.",
            "enum": ["WINDOWS", "UNIX"]
          },
          "ProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "SpreadPeriodType": {
            "title": "SpreadPeriodType",
            "type": "string",
            "description": "SpreadPeriodType Entity",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "YEAR",
              "FINANCIAL_PERIOD"
            ]
          },
          "Spacing": {
            "type": "string",
            "description": "Specifies the indentation between the elements in the XML export file. For example, use \" \" to specify 5 spaces of indentation."
          },
          "BusinessObjectOptions": {
            "$ref": "#/components/schemas/BusinessObjectOptions"
          }
        },
        "description": "ExportProject Entity"
      },
      "IssueHistory": {
        "title": "IssueHistory",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this issue history was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this issue history."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this issue history was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this issue history."
          },
          "Notes": {
            "type": "string",
            "description": "The notes associated with the issue history."
          },
          "ProjectIssueObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project issue for this issue history.",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project for this issue history.",
            "format": "int32"
          }
        },
        "description": "IssueHistory Entity"
      },
      "RoleRate": {
        "title": "RoleRate",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this role rate was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this role rate."
          },
          "EffectiveDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this role rate was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this role rate."
          },
          "MaxUnitsPerTime": {
            "type": "number",
            "format": "double"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "PricePerUnit": {
            "type": "number",
            "description": "The non-overtime price per time for the role. This price is used to compute costs for any activities the role is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "PricePerUnit2": {
            "type": "number",
            "description": "The non-overtime price per time for the role. This price is used to compute costs for any activities the role is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "PricePerUnit3": {
            "type": "number",
            "description": "The non-overtime price per time for the role. This price is used to compute costs for any activities the role is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "PricePerUnit4": {
            "type": "number",
            "description": "The non-overtime price per time for the role. This price is used to compute costs for any activities the role is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "PricePerUnit5": {
            "type": "number",
            "description": "The non-overtime price per time for the role. This price is used to compute costs for any activities the role is assigned to. In general, cost = units * price per time.",
            "format": "double"
          },
          "RoleId": {
            "type": "string",
            "description": "The short code that uniquely identifies the role."
          },
          "RoleName": {
            "type": "string",
            "description": "The name of the role. The role name uniquely identifies the role."
          },
          "RoleObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated role.",
            "format": "int32"
          }
        },
        "description": "RoleRate Entity"
      },
      "ActivityCode": {
        "title": "ActivityCode",
        "required": ["CodeTypeObjectId", "CodeValue"],
        "type": "object",
        "properties": {
          "CodeConcatName": {
            "type": "string"
          },
          "CodeTypeName": {
            "type": "string",
            "description": "The name of the parent code type for this code."
          },
          "CodeTypeObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent activity code type.",
            "format": "int32"
          },
          "CodeTypeScope": {
            "type": "string",
            "description": "The scope of the parent activity code type: Global, EPS, or Project. An activity code with Global scope can be assigned to any activity. An activity code with EPS scope can be assigned only to an activity within a project under that particular EPS. Similarly, an activity code with Project scope can be assigned only to an activity within that particular project."
          },
          "CodeValue": {
            "type": "string",
            "description": "The value of the activity code."
          },
          "Color": {
            "type": "string",
            "description": "The Hex representation for the color e.g. 0xFFFFFF."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this activity code was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this activity code."
          },
          "Description": {
            "type": "string",
            "description": "The description of the activity code."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this activity code was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this activity code."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ParentObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent activity code of this activity code in the hierarchy.",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique project ID of the parent code type for this code if code type scope is 'Project' or 'EPS', null for code types with scope 'Global'.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          }
        },
        "description": "ActivityCode Entity"
      },
      "NotebookTopicExport": {
        "title": "NotebookTopic",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for NotebookTopic Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for NotebookTopic Business Object",
              "enum": [
                "AVAILABLE_FOR_ACTIVITY",
                "AVAILABLE_FOR_EPS",
                "AVAILABLE_FOR_PROJECT",
                "AVAILABLE_FOR_WBS",
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "NotebookTopic Entity"
      },
      "UserOBS": {
        "title": "UserOBS",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this association was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this association."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this association was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this association."
          },
          "ProfileName": {
            "type": "string",
            "description": "The name of security profile."
          },
          "ProjectProfileObjectId": {
            "type": "integer",
            "description": "The unique ID of the project profile with which the user is granted access to the project and OBS. See the ProjectProfile class for a constant defining the fixed profile of Project Superuser.",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "description": "The user's login name."
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the user who is assigned to the project OBS.",
            "format": "int32"
          },
          "OBSName": {
            "type": "string",
            "description": "The name of the person/role in the organization, sometimes referred to as the \"responsible manager\"."
          },
          "OBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the OBS to which the user is granted access.",
            "format": "int32"
          }
        },
        "description": "UserOBS Entity"
      },
      "ReadWBSSpreadResponse": {
        "title": "ReadWBSSpreadResponse",
        "type": "object",
        "properties": {
          "WBSCode": {
            "type": "string"
          },
          "WBSObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummarizedSpreadPeriod"
            }
          }
        },
        "description": "ReadWBSSpreadResponse Entity"
      },
      "ReadProjectRoleSpreadResponse": {
        "title": "ReadProjectRoleSpreadResponse",
        "type": "object",
        "properties": {
          "ProjectId": {
            "type": "string"
          },
          "ProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "RoleId": {
            "type": "string"
          },
          "RoleObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRoleSpreadPeriod"
            }
          }
        },
        "description": "ReadProjectRoleSpreadResponse Entity"
      },
      "ExportProjects": {
        "title": "ExportProjects",
        "type": "object",
        "properties": {
          "Encoding": {
            "type": "string",
            "description": "Specifies the encoding of the XML file that is exported, e.g., UTF-8."
          },
          "FileType": {
            "title": "FileTypeType",
            "type": "string",
            "description": "FileTypeType Entity",
            "enum": ["GZIP", "XML", "ZIP"]
          },
          "LineSeparator": {
            "type": "string",
            "description": "Specifies whether the Windows (\"\\r\\n\") or Unix (\"\\n\") line endings will be used.",
            "enum": ["WINDOWS", "UNIX"]
          },
          "ProjectObjectId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "SpreadPeriodType": {
            "title": "SpreadPeriodType",
            "type": "string",
            "description": "SpreadPeriodType Entity",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "YEAR",
              "FINANCIAL_PERIOD"
            ]
          },
          "Spacing": {
            "type": "string",
            "description": "Specifies the indentation between the elements in the XML export file. For example, use \" \" to specify 5 spaces of indentation."
          },
          "BusinessObjectOptions": {
            "$ref": "#/components/schemas/BusinessObjectOptions"
          }
        },
        "description": "ExportProjects Entity"
      },
      "RiskResponsePlanExport": {
        "title": "RiskResponsePlan",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskResponsePlan Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskResponsePlan Business Object",
              "enum": [
                "ACTUAL_COST",
                "CREATE_DATE",
                "CREATE_USER",
                "FINISH_DATE",
                "ID",
                "IS_ACTIVE",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PLANNED_COST",
                "PLANNED_FINISH_DATE",
                "PLANNED_START_DATE",
                "PROJECT_ID",
                "PROJECT_NAME",
                "PROJECT_OBJECT_ID",
                "REMAINING_COST",
                "RESPONSE_TYPE",
                "RISK_ID",
                "RISK_NAME",
                "RISK_OBJECT_ID",
                "SCORE",
                "SCORE_COLOR",
                "SCORE_TEXT",
                "START_DATE"
              ]
            }
          }
        },
        "description": "RiskResponsePlan Entity"
      },
      "ProjectFundingExport": {
        "title": "ProjectFunding",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectFunding Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectFunding Business Object",
              "enum": [
                "AMOUNT",
                "CREATE_DATE",
                "CREATE_USER",
                "FUND_SHARE",
                "FUNDING_SOURCE_NAME",
                "FUNDING_SOURCE_OBJECT_ID",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ProjectFunding Entity"
      },
      "WBSMilestone": {
        "title": "WBSMilestone",
        "required": ["Name", "ProjectObjectId", "WBSObjectId"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this WBS milestone was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this WBS milestone."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsCompleted": {
            "type": "boolean",
            "description": "The flag that indicates whether the step has been completed."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this WBS milestone was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this WBS milestone."
          },
          "Name": {
            "type": "string",
            "description": "The name of the WBS milestone."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          },
          "WBSCode": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes."
          },
          "WBSName": {
            "type": "string",
            "description": "The name of the WBS element."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS where the WBS milestone is assigned.",
            "format": "int32"
          },
          "Weight": {
            "type": "number",
            "description": "The weight that is assigned to the milestone.",
            "format": "double"
          }
        },
        "description": "WBSMilestone Entity"
      },
      "ProjectFunding": {
        "title": "ProjectFunding",
        "required": ["FundingSourceObjectId", "ProjectObjectId"],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "The amount of a funding source that is allocated to the project.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this project funding data was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project funding data."
          },
          "FundShare": {
            "type": "number",
            "description": "The percentage of the total fund that is allocated to the project.",
            "format": "double"
          },
          "FundingSourceName": {
            "type": "string"
          },
          "FundingSourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated funding source for this project funding.",
            "format": "int32"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project funding data was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project funding data."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project source for this project funding.",
            "format": "int32"
          }
        },
        "description": "ProjectFunding Entity"
      },
      "GlobalPreferences": {
        "title": "GlobalPreferences",
        "type": "object",
        "properties": {
          "AllowApprovedTSRejection": {
            "type": "boolean"
          },
          "AlwaysLaunchOnlineHelp": {
            "type": "boolean",
            "description": "The flag indicating that Online Help should be launched whenever a user accesses help."
          },
          "BaseCurrencyObjectId": {
            "type": "integer",
            "description": "The unique ID of the currency.",
            "format": "int32"
          },
          "ContractManagementURL": {
            "type": "string",
            "description": "This is the URL of the Contract Management application."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this global preferences was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this global preferences."
          },
          "CustomLabel1": {
            "type": "string",
            "description": "The custom (user-defined) text that will be inserted into any report containing the Custom Label 1 global variable text cell, when printed."
          },
          "CustomLabel2": {
            "type": "string",
            "description": "The custom (user-defined) text that will be inserted into any report containing the Custom Label 2 global variable text cell, when printed."
          },
          "CustomLabel3": {
            "type": "string",
            "description": "The custom (user-defined) text that will be inserted into any report containing the Custom Label 3 global variable text cell, when printed."
          },
          "DayAbbreviation": {
            "type": "string",
            "description": "The abbreviation character for time periods of days. This abbreviation is used for displaying time units and durations in the user's selected display formats."
          },
          "DefaultDuration": {
            "type": "number",
            "description": "The planned duration assigned to new activities by default.",
            "format": "double"
          },
          "DefaultTimesheetApprovalManager": {
            "type": "integer",
            "description": "The unique ID of the resource manager assigned to approve timesheets for new resources by default.",
            "format": "int32"
          },
          "EPPMConsentMessage": {
            "type": "string"
          },
          "EPPMEnableConsent": {
            "type": "string"
          },
          "EVEstimateToCompleteFactor": {
            "type": "number",
            "description": "The user-defined performance factor, PF, for computing earned-value estimate-to-complete. ETC is computed as PF * ( BAC - earned value). This value is assigned to new projects by default. It can be modified for each project WBS element.",
            "format": "double"
          },
          "EVEstimateToCompleteTechnique": {
            "type": "string",
            "description": "The technique for computing earned-value estimate-to-complete. This setting is assigned to new projects by default. It can be modified for each project WBS element."
          },
          "EVPerformancePctCompleteCustomPct": {
            "type": "number",
            "description": "The user-defined percent complete for computing earned value for activities within the WBS. A value of, say, 25 means that 25% of the planned amount is earned when the activity is started and the remainder is earned when the activity is completed. This value is assigned to new projects by default. It can be modified for each project WBS element.",
            "format": "double"
          },
          "EVPerformancePctCompleteTechnique": {
            "type": "string",
            "description": "The technique used for computing earned-value percent complete. This setting is assigned to new projects by default. It can be modified for each project WBS element."
          },
          "EarnedValueCalculation": {
            "type": "string",
            "description": "The flag indicating which values to use when calculating earned value when using a primary baseline. Valid values are 'At Completion Values with Current Dates', 'Planned Values with Planned Dates', and 'Planned Values with Current Dates'."
          },
          "EmailNotifyTSRejection": {
            "type": "boolean"
          },
          "EnablePasswordPolicy": {
            "type": "boolean",
            "description": "The flag that indicates whether the password policy is enforced."
          },
          "EnableTSAudit": {
            "type": "boolean",
            "description": "The flag indicating whether to track timesheet submission, approval, and rejection. When you set this option, the application saves each user who reviews a timesheet, and when the timesheet was reviewed. This information can be viewed by loading TimesheetAudit business objects."
          },
          "EnableWebServicesIPCheck": {
            "type": "boolean"
          },
          "EnableWhatsNewDialog": {
            "type": "boolean"
          },
          "ExceptionSiteList": {
            "type": "string"
          },
          "FooterLabel1": {
            "type": "string",
            "description": "The first footer for reports. The Project Management application allows up to three different footer text strings that can be optionally placed at the bottom of all reports using the report writer."
          },
          "FooterLabel2": {
            "type": "string",
            "description": "The second footer for reports. The Project Management application allows up to three different footer text strings that can be optionally placed at the bottom of all reports using the report writer."
          },
          "FooterLabel3": {
            "type": "string",
            "description": "The third footer for reports. The Project Management application allows up to three different footer text strings that can be optionally placed at the bottom of all reports using the report writer."
          },
          "GatewayApiUrl": {
            "type": "string",
            "description": "The Primavera Gateway URL that will allow you to integrate other products with P6 and P6 Professional."
          },
          "GatewayExportERPSyncName": {
            "type": "string",
            "description": "The synchronization for exporting to ERP."
          },
          "GatewayExportUnifierSyncName": {
            "type": "string",
            "description": "The synchronization for exporting to Primavera Unifier."
          },
          "GatewayImportERPSyncName": {
            "type": "string",
            "description": "The synchronization for importing to ERP."
          },
          "GatewayImportUnifierSyncName": {
            "type": "string",
            "description": "The synchronization for importing to Primavera Unifier."
          },
          "GatewayP6DeploymentName": {
            "type": "string",
            "description": "The name for the P6 deployment to be integrated with Primavera Gateway."
          },
          "GatewayPassword": {
            "type": "string",
            "description": "The password for integration."
          },
          "GatewayUnifierEnabled": {
            "type": "boolean",
            "description": "This is the flag to enable Unifier through Gateway."
          },
          "GatewayUsername": {
            "type": "string",
            "description": "The username for integration."
          },
          "HeaderLabel1": {
            "type": "string",
            "description": "The first header for reports. The Project Management application allows up to three different header text strings that can be optionally placed at the top of all reports using the report writer."
          },
          "HeaderLabel2": {
            "type": "string",
            "description": "The second header for reports. The Project Management application allows up to three different header text strings that can be optionally placed at the top of all reports using the report writer."
          },
          "HeaderLabel3": {
            "type": "string",
            "description": "The third header for reports. The Project Management application allows up to three different header text strings that can be optionally placed at the top of all reports using the report writer."
          },
          "HourAbbreviation": {
            "type": "string",
            "description": "The abbreviation character for time periods of hours. This abbreviation is used for displaying time units and durations in the user's selected display formats."
          },
          "HoursPerDay": {
            "type": "number",
            "description": "The number of work hours per day. This conversion factor is used for displaying time units and durations in the user's selected display formats.",
            "format": "double"
          },
          "HoursPerMonth": {
            "type": "number",
            "description": "The number of work hours per month. This conversion factor is used for displaying time units and durations in the user's selected display formats.",
            "format": "double"
          },
          "HoursPerWeek": {
            "type": "number",
            "description": "The number of work hours per week. This conversion factor is used for displaying time units and durations in the user's selected display formats.",
            "format": "double"
          },
          "HoursPerYear": {
            "type": "number",
            "description": "The number of work hours per year. This conversion factor is used for displaying time units and durations in the user's selected display formats.",
            "format": "double"
          },
          "IPSiteList": {
            "type": "string"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this global preferences was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this global preferences."
          },
          "LogHoursAfterActualFinish": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet application users are allowed to log timesheet hours on activities for dates after the activities' actual finish dates."
          },
          "LogHoursBeforeActualStart": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet application users are allowed to log timesheet hours on activities for dates prior to the activities' actual start dates."
          },
          "LogHoursCompletedActivities": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet application users are allowed to log timesheet hours on activities that are already marked as completed."
          },
          "LogHoursInFuture": {
            "type": "boolean",
            "description": "The flag that indicates whether the user can log hours in the future."
          },
          "LogHoursNotStartedActivities": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet application users are allowed to log timesheet hours on activities that are still marked as Not started."
          },
          "MaxActivityCodeTreeLevels": {
            "type": "integer",
            "description": "The maximum number of levels that can be created in activity code hierarchies in the Project Management application. The API ignores this setting when creating activity codes.",
            "format": "int32"
          },
          "MaxActivityCodesPerProject": {
            "type": "integer",
            "description": "The maximum number of project-level activity user codes that can be created per project.",
            "format": "int32"
          },
          "MaxActivityIdLength": {
            "type": "integer",
            "description": "The maximum number of characters allowed for activity IDs.",
            "format": "int32"
          },
          "MaxAssignmentCodeTreeLevelCnt": {
            "type": "integer",
            "format": "int32"
          },
          "MaxBaselinesPerProject": {
            "type": "integer",
            "description": "The maximum number of baselines that can be created per project.",
            "format": "int32"
          },
          "MaxCostAccountLength": {
            "type": "integer",
            "description": "The maximum number of characters allowed for cost account IDs (at each level in the cost account tree).",
            "format": "int32"
          },
          "MaxCostAccountTreeLevels": {
            "type": "integer",
            "description": "The maximum number of levels that can be created in the cost account hierarchy in the Project Management application. The API ignores this setting when creating cost accounts.",
            "format": "int32"
          },
          "MaxFPCalendarCount": {
            "type": "integer",
            "format": "int32"
          },
          "MaxOBSTreeLevels": {
            "type": "integer",
            "description": "The maximum number of levels that can be created in OBS hierarchies in the Project Management application. The API ignores this setting when creating OBS objects.",
            "format": "int32"
          },
          "MaxProjectCodeTreeLevels": {
            "type": "integer",
            "description": "The maximum number of levels in the project category hierarchy in the Project Management application. The API ignores this setting when creating project codes.",
            "format": "int32"
          },
          "MaxProjectIdLength": {
            "type": "integer",
            "description": "The maximum number characters allowed for project IDs.",
            "format": "int32"
          },
          "MaxResourceCodeTreeLevels": {
            "type": "integer",
            "description": "The maximum number of levels in the resource code hierarchy in the Project Management application. The API ignores this setting when creating resource codes.",
            "format": "int32"
          },
          "MaxResourceIdLength": {
            "type": "integer",
            "description": "The maximum number of characters allowed for resource IDs (at each level in the resource tree).",
            "format": "int32"
          },
          "MaxResourceTreeLevels": {
            "type": "integer",
            "description": "The maximum number of levels that can be created in the resource hierarchy.",
            "format": "int32"
          },
          "MaxRoleCodeTreeLevelCnt": {
            "type": "integer",
            "format": "int32"
          },
          "MaxRoleIdLength": {
            "type": "integer",
            "description": "The maximum number characters allowed for role IDs.",
            "format": "int32"
          },
          "MaxRoleTreeLevels": {
            "type": "integer",
            "description": "The maximum number of levels in the role hierarchy in the Project Management application. The API ignores this setting when creating roles.",
            "format": "int32"
          },
          "MaxTimesheetResourceHours": {
            "type": "number",
            "description": "The maximum hours a resource can enter per day for all of their assigned activities.",
            "format": "double"
          },
          "MaxWBSCodeLength": {
            "type": "integer",
            "description": "The maximum number of characters allowed for WBS codes (at each level in the WBS tree).",
            "format": "int32"
          },
          "MaxWBSTreeLevels": {
            "type": "integer",
            "description": "The maximum number of levels that can be created in WBS hierarchies.",
            "format": "int32"
          },
          "MaximumBaselinesCopiedWithProject": {
            "type": "integer",
            "description": "The number of baseline projects that can be copied with a project.",
            "format": "int32"
          },
          "MinuteAbbreviation": {
            "type": "string",
            "description": "The abbreviation character for time periods of minutes. This abbreviation is used for displaying time units and durations in the user's selected display formats."
          },
          "MonthAbbreviation": {
            "type": "string",
            "description": "The abbreviation character for time periods of months. This abbreviation is used for displaying time units and durations in the user's selected display formats."
          },
          "NumberOfAccessibleFutureTimesheets": {
            "type": "integer",
            "description": "The number of future timesheets that timesheet application users are allowed to access.",
            "format": "int32"
          },
          "NumberOfAccessiblePastTimesheets": {
            "type": "integer",
            "format": "int32"
          },
          "PrivateIPAllowList": {
            "type": "string"
          },
          "ReportEnableLazyLoad": {
            "type": "boolean"
          },
          "ResourcesCanAssignThemselvesToActivities": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet application users are allowed to assign themselves to activities in this project."
          },
          "ResourcesCanAssignThemselvesToActivitiesOutsideTheirOBSAccess": {
            "type": "boolean"
          },
          "StartDayOfWeek": {
            "type": "integer",
            "description": "The starting day of the week as displayed in all calendars.",
            "format": "int32"
          },
          "SummarizeByCalendar": {
            "type": "boolean",
            "description": "The flag indicating whether to summarize by calendar ."
          },
          "SummarizeByFinancialPeriods": {
            "type": "boolean",
            "description": "The flag indicating whether to summarize the EPS, project or WBS by financial periods."
          },
          "SummaryResourceSpreadInterval": {
            "type": "string",
            "description": "The interval in which resource and role level spreads are summarized and stored. Valid values are 'Month' and 'Week'. This setting is used by the Summarizer job service."
          },
          "SummaryWBSSpreadInterval": {
            "type": "string",
            "description": "The interval in which WBS level spreads are summarized and stored. Valid values are 'Month' and 'Week'. This setting is used by the Summarizer job service."
          },
          "TeamMemberConsentMessage": {
            "type": "string"
          },
          "TeamMemberEnableConsent": {
            "type": "string"
          },
          "TimeWindowCompletedActivities": {
            "type": "integer",
            "description": "The time window (days) to access completed activities in the timesheet application, assigned to new resources by default.",
            "format": "int32"
          },
          "TimeWindowNotStartedActivities": {
            "type": "integer",
            "description": "The time window (days) to access not started activities in the timesheet application, assigned to new resources by default.",
            "format": "int32"
          },
          "TimesheetApprovalLevel": {
            "type": "integer",
            "description": "The number of approval levels required for timesheets (0, 1, or 2) before timesheets hours are applied to activities as actuals.",
            "format": "int32"
          },
          "TimesheetDecimalDigits": {
            "type": "integer",
            "description": "The number of decimal digits for recording hours in timesheets.",
            "format": "int32"
          },
          "TimesheetInterval": {
            "type": "boolean",
            "description": "The flag that indicates whether timesheet application users enter timesheet hours daily or by entire timesheet reporting period."
          },
          "TimesheetPeriodEndsOnDay": {
            "type": "string",
            "description": "The end day of time sheet period used in time sheet application. Valid values are: 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday' and 'Saturday'."
          },
          "TimesheetPeriodType": {
            "type": "string",
            "description": "The time period used in time sheet application. Valid values are: 'Every Week', 'Every Two Weeks', 'Every Four Weeks' and 'Every Month'."
          },
          "UnifierAuthCode": {
            "type": "string"
          },
          "UnifierCompanyShortName": {
            "type": "string"
          },
          "UnifierIntegrationPassword": {
            "type": "string"
          },
          "UnifierIntegrationUserName": {
            "type": "string"
          },
          "UnifierWebServiceURL": {
            "type": "string"
          },
          "UseCalendarTimePeriodsFlag": {
            "type": "boolean",
            "description": "The flag that indicates whether the system uses the hours per time period defined in the calendar.If this flag is true, the system uses the hours per time period settings that are defined in the calendar.If this flag is false, the system uses the hours per time period from the global preferences."
          },
          "UseMaxTimesheetResourceHours": {
            "type": "boolean",
            "description": "The flag indicating whether to restrict the number of hours a user can enter to the limit specified in MaxTimesheetResourceHours."
          },
          "UseProjectManagerApproval": {
            "type": "string",
            "description": "The flag that indicates the approval sequence, if any, required for level 2 timesheet approvals. For example, project managers must approve before resource manager do, or vice versa."
          },
          "UseTimesheets": {
            "type": "boolean",
            "description": "The flag that indicates whether new resources use timesheets by default."
          },
          "VersionForWhatsNew": {
            "type": "string"
          },
          "WBSCategoryLabel": {
            "type": "string",
            "description": "The dynamic label used for the WBS category. Project Planner allows the system administrator to dynamically label the WBS category."
          },
          "WBSCodeSeparator": {
            "type": "string",
            "description": "The character used for separating code fields for the cost account tree. This is also the WBS code separator for new projects by default."
          },
          "WeekAbbreviation": {
            "type": "string",
            "description": "The abbreviation character for time periods of weeks. This abbreviation is used for displaying time units and durations in the user's selected display formats."
          },
          "YearAbbreviation": {
            "type": "string",
            "description": "The abbreviation character for time periods of years. This abbreviation is used for displaying time units and durations in the user's selected display formats."
          }
        },
        "description": "GlobalPreferences Entity"
      },
      "CurrentJobResponse": {
        "title": "CurrentJobResponse",
        "type": "object",
        "properties": {
          "JobId": {
            "type": "string"
          },
          "JobType": {
            "type": "string"
          },
          "JobStatus": {
            "type": "string"
          },
          "SubmittedDate": {
            "type": "string"
          },
          "LastRunDate": {
            "type": "string"
          },
          "ProjectObjectId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "EPSObjectId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "WorkerHost": {
            "type": "string"
          }
        },
        "description": "CurrentJobResponse Entity"
      },
      "RiskMatrix": {
        "title": "RiskMatrix",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this risk matrix was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the risk matrix."
          },
          "Description": {
            "type": "string",
            "description": "The description of the risk matrix."
          },
          "ImpactThresholdLevel": {
            "type": "integer",
            "description": "The number of levels for the impact thresholds assigned to the risk scoring matrix. This impact level with the probability level determines the size of the matrix.",
            "format": "int32"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk matrix was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the risk matrix."
          },
          "Name": {
            "type": "string",
            "description": "The name of the risk matrix."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProbabilityThresholdLevel": {
            "type": "integer",
            "description": "The number of levels for the probability threshold assigned to the risk matrix. This probability level with the impact level determines the size of the matrix.",
            "format": "int32"
          },
          "RiskScoringMethod": {
            "type": "string",
            "description": "The calculation method used to determine the risk score. Valid values are 'Highest', 'Average of Impacts', 'Average of Individual Scores'."
          }
        },
        "description": "RiskMatrix Entity"
      },
      "EPSBudgetChangeLog": {
        "title": "EPSBudgetChangeLog",
        "required": ["ChangeNumber", "EPSObjectId"],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "The amount of budget change.",
            "format": "double"
          },
          "ChangeNumber": {
            "type": "string",
            "description": "The change number that is automatically incremented according to when changes are added. This can be changed to any number."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this epsbudgetchangelog was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this epsbudgetchangelog."
          },
          "Date": {
            "type": "string",
            "description": "The date of this budget change entry.",
            "format": "date-time"
          },
          "EPSId": {
            "type": "string",
            "description": "The short code assigned to the associated EPS."
          },
          "EPSName": {
            "type": "string",
            "description": "The name of the EPS element associated with this budget change log."
          },
          "EPSObjectId": {
            "type": "integer",
            "description": "The unique ID of the EPS element to which the budget change log applies.",
            "format": "int32"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this epsbudgetchangelog was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this epsbudgetchangelog."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "Reason": {
            "type": "string",
            "description": "The description of the reason for the budget change request."
          },
          "Responsible": {
            "type": "string",
            "description": "The person responsible for the change."
          },
          "Status": {
            "type": "string",
            "description": "The status of this budget change request."
          }
        },
        "description": "EPSBudgetChangeLog Entity"
      },
      "ReadJobLogResponse": {
        "title": "ReadJobLogResponse",
        "type": "object",
        "properties": {
          "JobLog": {
            "type": "string"
          }
        },
        "description": "ReadJobLogResponse Entity"
      },
      "ResourceRequests": {
        "type": "object",
        "properties": {
          "ResourceRequest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRequest"
            }
          }
        }
      },
      "ProjectCodeAssignment": {
        "title": "ProjectCodeAssignment",
        "required": ["ProjectCodeObjectId", "ProjectObjectId"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this code assignment was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this code assignment."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this code assignment was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this code assignment."
          },
          "ProjectCodeDescription": {
            "type": "string",
            "description": "The description of the associated project code."
          },
          "ProjectCodeObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project code.",
            "format": "int32"
          },
          "ProjectCodeTypeName": {
            "type": "string",
            "description": "The name of the parent project code type."
          },
          "ProjectCodeTypeObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent project code type.",
            "format": "int32"
          },
          "ProjectCodeValue": {
            "type": "string",
            "description": "The value of the associated project code."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the associated project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the project to which the project code is assigned."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the project to which the project code is assigned.",
            "format": "int32"
          },
          "WBSObjectId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "ProjectCodeAssignment Entity"
      },
      "CreateActivityCodeAssignmentsResponse": {
        "title": "CreateActivityCodeAssignmentsResponse",
        "type": "object",
        "properties": {
          "ActivityCodeTypeObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent activity code type.",
            "format": "int32"
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the activity code is assigned.",
            "format": "int32"
          }
        },
        "description": "CreateActivityCodeAssignmentsResponse Entity"
      },
      "RiskResponseActionImpactExport": {
        "title": "RiskResponseActionImpact",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RiskResponseActionImpact Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RiskResponseActionImpact Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "PROJECT_ID",
                "PROJECT_NAME",
                "PROJECT_OBJECT_ID",
                "RISK_ID",
                "RISK_OBJECT_ID",
                "RISK_RESPONSE_ACTION_ID",
                "RISK_RESPONSE_ACTION_NAME",
                "RISK_RESPONSE_ACTION_OBJECT_ID",
                "RISK_THRESHOLD_LEVEL_CODE",
                "RISK_THRESHOLD_LEVEL_NAME",
                "RISK_THRESHOLD_LEVEL_OBJECT_ID",
                "RISK_THRESHOLD_NAME",
                "RISK_THRESHOLD_OBJECT_ID"
              ]
            }
          }
        },
        "description": "RiskResponseActionImpact Entity"
      },
      "ResourceCodeExport": {
        "title": "ResourceCode",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ResourceCode Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ResourceCode Business Object",
              "enum": [
                "CODE_CONCAT_NAME",
                "CODE_TYPE_NAME",
                "CODE_TYPE_OBJECT_ID",
                "CODE_VALUE",
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "ResourceCode Entity"
      },
      "ReadJobStatusResponse": {
        "title": "ReadJobStatusResponse",
        "type": "object",
        "properties": {
          "JobStatus": {
            "type": "string"
          }
        },
        "description": "ReadJobStatusResponse Entity"
      },
      "SummarizedSpreadPeriod": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "ActualCost": {
            "type": "number",
            "format": "double"
          },
          "ActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "ActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "ActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "ActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "ActualNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "ActualNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "ActualTotalCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionLaborCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionTotalCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "EarnedValueCost": {
            "type": "number",
            "format": "double"
          },
          "EarnedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "EstimateAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "EstimateAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "EstimateToCompleteCost": {
            "type": "number",
            "format": "double"
          },
          "EstimateToCompleteLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodActualNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionLaborCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodAtCompletionTotalCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodEarnedValueCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodEarnedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodEstimateAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodEstimateAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PeriodPlannedValueCost": {
            "type": "number",
            "format": "double"
          },
          "PeriodPlannedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedValueCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLaborCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateLaborCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateTotalCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEarnedValueCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEarnedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEstimateAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEstimateAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEstimateToCompleteCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEstimateToCompleteLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeLimit": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedValueCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodActualCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodActualNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodActualNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodAtCompletionExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodAtCompletionLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodAtCompletionMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodAtCompletionNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodAtCompletionNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodAtCompletionTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodEarnedValueCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodEarnedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodEstimateAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodEstimateAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodPlannedValueCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePeriodPlannedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingNonlaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingNonlaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingTotalCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProjectResourceExport": {
        "title": "ProjectResource",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectResource Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectResource Business Object",
              "enum": [
                "COMMITTED_FLAG",
                "CREATE_DATE",
                "CREATE_USER",
                "FINISH_DATE",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LIFE_OF_PROJECT_FLAG",
                "OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "PROJECT_RESOURCE_CATEGORY_NAME",
                "PROJECT_RESOURCE_CATEGORY_OBJECT_ID",
                "RESOURCE_NAME",
                "RESOURCE_OBJECT_ID",
                "RESOURCE_REQUEST",
                "ROLE_NAME",
                "ROLE_OBJECT_ID",
                "START_DATE",
                "STATUS",
                "TOTAL_UNITS",
                "WBS_CODE",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ProjectResource Entity"
      },
      "UDFCodeExport": {
        "title": "UDFCode",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for UDFCode Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for UDFCode Business Object",
              "enum": [
                "CODE_TYPE_OBJECT_ID",
                "CODE_TYPE_TITLE",
                "CODE_VALUE",
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "UDFCode Entity"
      },
      "CreateRiskResponseActionImpactResponse": {
        "title": "CreateRiskResponseActionImpactResponse",
        "type": "object",
        "properties": {
          "RiskResponseActionObjectId": {
            "type": "integer",
            "description": "The unique ID of the RiskResponseAction.",
            "format": "int32"
          },
          "RiskThresholdObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Threshold.",
            "format": "int32"
          }
        },
        "description": "CreateRiskResponseActionImpactResponse Entity"
      },
      "ProjectCodeType": {
        "title": "ProjectCodeType",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this project code type was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project code type."
          },
          "IsSecureCode": {
            "type": "boolean",
            "description": "The flag indicating whether this is a secure Project Code Type."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project code type was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project code type."
          },
          "Length": {
            "type": "integer",
            "description": "The maximum number of characters allowed for values of this project code.",
            "format": "int32"
          },
          "MaxCodeValueWeight": {
            "type": "number",
            "description": "The maximum weight of the code values for this project code type.",
            "format": "double"
          },
          "Name": {
            "type": "string",
            "description": "The name of the project code type."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          },
          "Weight": {
            "type": "number",
            "description": "The weight for this project code type.",
            "format": "double"
          }
        },
        "description": "ProjectCodeType Entity"
      },
      "ActivityStepTemplate": {
        "title": "ActivityStepTemplate",
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this activity step template was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this activity step template."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this activity step template was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this activity step template."
          },
          "Name": {
            "type": "string",
            "description": "The name of the activity step template."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          },
          "StepCount": {
            "type": "integer",
            "description": "The number of items in this activity step template.",
            "format": "int32"
          }
        },
        "description": "ActivityStepTemplate Entity"
      },
      "ProjectExport": {
        "title": "Project",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for Project Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for Project Business Object",
              "enum": [
                "ACTIVITY_DEFAULT_ACTIVITY_TYPE",
                "ACTIVITY_DEFAULT_CALENDAR_NAME",
                "ACTIVITY_DEFAULT_CALENDAR_OBJECT_ID",
                "ACTIVITY_DEFAULT_COST_ACCOUNT_OBJECT_ID",
                "ACTIVITY_DEFAULT_DURATION_TYPE",
                "ACTIVITY_DEFAULT_PERCENT_COMPLETE_TYPE",
                "ACTIVITY_DEFAULT_PRICE_PER_UNIT",
                "ACTIVITY_DEFAULT_REVIEW_REQUIRED",
                "ACTIVITY_ID_BASED_ON_SELECTED_ACTIVITY",
                "ACTIVITY_ID_INCREMENT",
                "ACTIVITY_ID_PREFIX",
                "ACTIVITY_ID_SUFFIX",
                "ACTIVITY_PERCENT_COMPLETE_BASED_ON_ACTIVITY_STEPS",
                "ADD_ACTUAL_TO_REMAINING",
                "ADDED_BY",
                "ALLOW_NEGATIVE_ACTUAL_UNITS_FLAG",
                "ALLOW_STATUS_REVIEW",
                "ANNUAL_DISCOUNT_RATE",
                "ANTICIPATED_FINISH_DATE",
                "ANTICIPATED_START_DATE",
                "ASSIGNMENT_DEFAULT_DRIVING_FLAG",
                "ASSIGNMENT_DEFAULT_RATE_TYPE",
                "CALCULATE_FLOAT_BASED_ON_FINISH_DATE",
                "CHECK_OUT_DATE",
                "CHECK_OUT_STATUS",
                "CHECK_OUT_USER_OBJECT_ID",
                "COMPUTE_TOTAL_FLOAT_TYPE",
                "CONTAINS_SUMMARY_DATA",
                "CONTRACT_MANAGEMENT_GROUP_NAME",
                "CONTRACT_MANAGEMENT_PROJECT_NAME",
                "COST_QUANTITY_RECALCULATE_FLAG",
                "CREATE_DATE",
                "CREATE_USER",
                "CRITICAL_ACTIVITY_FLOAT_LIMIT",
                "CRITICAL_ACTIVITY_FLOAT_THRESHOLD",
                "CRITICAL_ACTIVITY_PATH_TYPE",
                "CRITICAL_FLOAT_THRESHOLD",
                "CURRENT_BASELINE_PROJECT_OBJECT_ID",
                "CURRENT_BUDGET",
                "CURRENT_VARIANCE",
                "DATA_DATE",
                "DATE_ADDED",
                "DEFAULT_PRICE_TIME_UNITS",
                "DESCRIPTION",
                "DISCOUNT_APPLICATION_PERIOD",
                "DISTRIBUTED_CURRENT_BUDGET",
                "EARNED_VALUE_COMPUTE_TYPE",
                "EARNED_VALUE_ETC_COMPUTE_TYPE",
                "EARNED_VALUE_ETC_USER_VALUE",
                "EARNED_VALUE_USER_PERCENT",
                "ENABLE_PRIME_SYC_FLAG",
                "ENABLE_PUBLICATION",
                "ENABLE_SUMMARIZATION",
                "ETL_INTERVAL",
                "FINANCIAL_PERIOD_TEMPLATE_ID",
                "FINISH_DATE",
                "FISCAL_YEAR_START_MONTH",
                "FORECAST_FINISH_DATE",
                "FORECAST_START_DATE",
                "GUID",
                "HAS_FUTURE_BUCKET_DATA",
                "HISTORY_INTERVAL",
                "HISTORY_LEVEL",
                "ID",
                "IGNORE_OTHER_PROJECT_RELATIONSHIPS",
                "INDEPENDENT_ETC_LABOR_UNITS",
                "INDEPENDENT_ETC_TOTAL_COST",
                "INTEGRATED_TYPE",
                "INTEGRATED_WBS",
                "IS_TEMPLATE",
                "LAST_APPLY_ACTUALS_DATE",
                "LAST_FINANCIAL_PERIOD_OBJECT_ID",
                "LAST_LEVEL_DATE",
                "LAST_PUBLISHED_ON",
                "LAST_SCHEDULE_DATE",
                "LAST_SUMMARIZED_DATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LATITUDE",
                "LEVEL_ALL_RESOURCES",
                "LEVEL_DATE_FLAG",
                "LEVEL_FLOAT_THRESHOLD_COUNT",
                "LEVEL_OUTER_ASSIGN",
                "LEVEL_OUTER_ASSIGN_PRIORITY",
                "LEVEL_OVER_ALLOCATION_PERCENT",
                "LEVEL_PRIORITY_LIST",
                "LEVEL_RESOURCE_LIST",
                "LEVEL_WITHIN_FLOAT",
                "LEVELING_PRIORITY",
                "LIMIT_MULTIPLE_FLOAT_PATHS",
                "LINK_ACTUAL_TO_ACTUAL_THIS_PERIOD",
                "LINK_PERCENT_COMPLETE_WITH_ACTUAL",
                "LINK_PLANNED_AND_AT_COMPLETION_FLAG",
                "LOCATION_NAME",
                "LOCATION_OBJECT_ID",
                "LONGITUDE",
                "MAKE_OPEN_ENDED_ACTIVITIES_CRITICAL",
                "MAXIMUM_MULTIPLE_FLOAT_PATHS",
                "MULTIPLE_FLOAT_PATHS_ENABLED",
                "MULTIPLE_FLOAT_PATHS_ENDING_ACTIVITY_OBJECT_ID",
                "MULTIPLE_FLOAT_PATHS_USE_TOTAL_FLOAT",
                "MUST_FINISH_BY_DATE",
                "NAME",
                "NET_PRESENT_VALUE",
                "OBS_NAME",
                "OBS_OBJECT_ID",
                "OBJECT_ID",
                "ORIGINAL_BUDGET",
                "OUT_OF_SEQUENCE_SCHEDULE_TYPE",
                "OVERALL_PROJECT_SCORE",
                "OWNER_RESOURCE_OBJECT_ID",
                "PARENT_EPS_ID",
                "PARENT_EPS_NAME",
                "PARENT_EPS_OBJECT_ID",
                "PAYBACK_PERIOD",
                "PERFORMANCE_PERCENT_COMPLETE_BY_LABOR_UNITS",
                "PLANNED_START_DATE",
                "POST_RESPONSE_PESSIMISTIC_FINISH",
                "POST_RESPONSE_PESSIMISTIC_START",
                "PRE_RESPONSE_PESSIMISTIC_FINISH",
                "PRE_RESPONSE_PESSIMISTIC_START",
                "PRICE_PER_UNIT",
                "PRIMARY_RESOURCES_CAN_MARK_ACTIVITIES_AS_COMPLETED",
                "PRIMARY_RESOURCES_CAN_UPDATE_ACTIVITY_DATES",
                "PROJECT_FORECAST_START_DATE",
                "PROJECT_SCHEDULE_TYPE",
                "PROPERTY_TYPE",
                "PROPOSED_BUDGET",
                "PUBLICATION_PRIORITY",
                "PUBLISH_LEVEL",
                "RELATIONSHIP_LAG_CALENDAR",
                "RESET_PLANNED_TO_REMAINING_FLAG",
                "RESOURCE_CAN_BE_ASSIGNED_TO_SAME_ACTIVITY_MORE_THAN_ONCE",
                "RESOURCE_NAME",
                "RESOURCES_CAN_ASSIGN_THEMSELVES_TO_ACTIVITIES",
                "RESOURCES_CAN_ASSIGN_THEMSELVES_TO_ACTIVITIES_OUTSIDE_OBS_ACCESS",
                "RESOURCES_CAN_EDIT_ASSIGNMENT_PERCENT_COMPLETE",
                "RESOURCES_CAN_MARK_ASSIGNMENT_AS_COMPLETED",
                "RESOURCES_CAN_STAFF_ROLE_ASSIGNMENT",
                "RESOURCES_CAN_VIEW_INACTIVE_ACTIVITIES",
                "RETURN_ON_INVESTMENT",
                "REVIEW_TYPE",
                "RISK_EXPOSURE",
                "RISK_LEVEL",
                "RISK_MATRIX_NAME",
                "RISK_MATRIX_OBJECT_ID",
                "RISK_SCORE",
                "SCHEDULE_WBS_HIERARCHY_TYPE",
                "SCHEDULED_FINISH_DATE",
                "SOURCE_PROJECT_OBJECT_ID",
                "START_DATE",
                "START_TO_START_LAG_CALCULATION_TYPE",
                "STATUS",
                "STATUS_REVIEWER_NAME",
                "STATUS_REVIEWER_OBJECT_ID",
                "STRATEGIC_PRIORITY",
                "SUMMARIZE_RESOURCES_ROLES_BY_WBS",
                "SUMMARIZE_TO_WBS_LEVEL",
                "SUMMARIZED_DATA_DATE",
                "SUMMARY_ACCOUNTING_VARIANCE_BY_COST",
                "SUMMARY_ACCOUNTING_VARIANCE_BY_LABOR_UNITS",
                "SUMMARY_ACTIVITY_COUNT",
                "SUMMARY_ACTUAL_DURATION",
                "SUMMARY_ACTUAL_EXPENSE_COST",
                "SUMMARY_ACTUAL_FINISH_DATE",
                "SUMMARY_ACTUAL_LABOR_COST",
                "SUMMARY_ACTUAL_LABOR_UNITS",
                "SUMMARY_ACTUAL_MATERIAL_COST",
                "SUMMARY_ACTUAL_NON_LABOR_COST",
                "SUMMARY_ACTUAL_NON_LABOR_UNITS",
                "SUMMARY_ACTUAL_START_DATE",
                "SUMMARY_ACTUAL_THIS_PERIOD_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_LABOR_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_LABOR_UNITS",
                "SUMMARY_ACTUAL_THIS_PERIOD_MATERIAL_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_NON_LABOR_COST",
                "SUMMARY_ACTUAL_THIS_PERIOD_NON_LABOR_UNITS",
                "SUMMARY_ACTUAL_TOTAL_COST",
                "SUMMARY_ACTUAL_VALUE_BY_COST",
                "SUMMARY_ACTUAL_VALUE_BY_LABOR_UNITS",
                "SUMMARY_AT_COMPLETION_DURATION",
                "SUMMARY_AT_COMPLETION_EXPENSE_COST",
                "SUMMARY_AT_COMPLETION_LABOR_COST",
                "SUMMARY_AT_COMPLETION_LABOR_UNITS",
                "SUMMARY_AT_COMPLETION_MATERIAL_COST",
                "SUMMARY_AT_COMPLETION_NON_LABOR_COST",
                "SUMMARY_AT_COMPLETION_NON_LABOR_UNITS",
                "SUMMARY_AT_COMPLETION_TOTAL_COST",
                "SUMMARY_AT_COMPLETION_TOTAL_COST_VARIANCE",
                "SUMMARY_BASELINE_COMPLETED_ACTIVITY_COUNT",
                "SUMMARY_BASELINE_DURATION",
                "SUMMARY_BASELINE_EXPENSE_COST",
                "SUMMARY_BASELINE_FINISH_DATE",
                "SUMMARY_BASELINE_IN_PROGRESS_ACTIVITY_COUNT",
                "SUMMARY_BASELINE_LABOR_COST",
                "SUMMARY_BASELINE_LABOR_UNITS",
                "SUMMARY_BASELINE_MATERIAL_COST",
                "SUMMARY_BASELINE_NON_LABOR_COST",
                "SUMMARY_BASELINE_NON_LABOR_UNITS",
                "SUMMARY_BASELINE_NOT_STARTED_ACTIVITY_COUNT",
                "SUMMARY_BASELINE_START_DATE",
                "SUMMARY_BASELINE_TOTAL_COST",
                "SUMMARY_BUDGET_AT_COMPLETION_BY_COST",
                "SUMMARY_BUDGET_AT_COMPLETION_BY_LABOR_UNITS",
                "SUMMARY_COMPLETED_ACTIVITY_COUNT",
                "SUMMARY_COST_PERCENT_COMPLETE",
                "SUMMARY_COST_PERCENT_OF_PLANNED",
                "SUMMARY_COST_PERFORMANCE_INDEX_BY_COST",
                "SUMMARY_COST_PERFORMANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_COST_VARIANCE_BY_COST",
                "SUMMARY_COST_VARIANCE_BY_LABOR_UNITS",
                "SUMMARY_COST_VARIANCE_INDEX",
                "SUMMARY_COST_VARIANCE_INDEX_BY_COST",
                "SUMMARY_COST_VARIANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_DURATION_PERCENT_COMPLETE",
                "SUMMARY_DURATION_PERCENT_OF_PLANNED",
                "SUMMARY_DURATION_VARIANCE",
                "SUMMARY_EARNED_VALUE_BY_COST",
                "SUMMARY_EARNED_VALUE_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_AT_COMPLETION_BY_COST",
                "SUMMARY_ESTIMATE_AT_COMPLETION_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_AT_COMPLETION_HIGH_PERCENT_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_AT_COMPLETION_LOW_PERCENT_BY_LABOR_UNITS",
                "SUMMARY_ESTIMATE_TO_COMPLETE_BY_COST",
                "SUMMARY_ESTIMATE_TO_COMPLETE_BY_LABOR_UNITS",
                "SUMMARY_EXPENSE_COST_PERCENT_COMPLETE",
                "SUMMARY_EXPENSE_COST_VARIANCE",
                "SUMMARY_FINISH_DATE_VARIANCE",
                "SUMMARY_IN_PROGRESS_ACTIVITY_COUNT",
                "SUMMARY_LABOR_COST_PERCENT_COMPLETE",
                "SUMMARY_LABOR_COST_VARIANCE",
                "SUMMARY_LABOR_UNITS_PERCENT_COMPLETE",
                "SUMMARY_LABOR_UNITS_VARIANCE",
                "SUMMARY_LEVEL",
                "SUMMARY_MATERIAL_COST_PERCENT_COMPLETE",
                "SUMMARY_MATERIAL_COST_VARIANCE",
                "SUMMARY_NON_LABOR_COST_PERCENT_COMPLETE",
                "SUMMARY_NON_LABOR_COST_VARIANCE",
                "SUMMARY_NON_LABOR_UNITS_PERCENT_COMPLETE",
                "SUMMARY_NON_LABOR_UNITS_VARIANCE",
                "SUMMARY_NOT_STARTED_ACTIVITY_COUNT",
                "SUMMARY_PERFORMANCE_PERCENT_COMPLETE_BY_COST",
                "SUMMARY_PERFORMANCE_PERCENT_COMPLETE_BY_LABOR_UNITS",
                "SUMMARY_PLANNED_COST",
                "SUMMARY_PLANNED_DURATION",
                "SUMMARY_PLANNED_EXPENSE_COST",
                "SUMMARY_PLANNED_FINISH_DATE",
                "SUMMARY_PLANNED_LABOR_COST",
                "SUMMARY_PLANNED_LABOR_UNITS",
                "SUMMARY_PLANNED_MATERIAL_COST",
                "SUMMARY_PLANNED_NON_LABOR_COST",
                "SUMMARY_PLANNED_NON_LABOR_UNITS",
                "SUMMARY_PLANNED_START_DATE",
                "SUMMARY_PLANNED_VALUE_BY_COST",
                "SUMMARY_PLANNED_VALUE_BY_LABOR_UNITS",
                "SUMMARY_PROGRESS_FINISH_DATE",
                "SUMMARY_REMAINING_DURATION",
                "SUMMARY_REMAINING_EXPENSE_COST",
                "SUMMARY_REMAINING_FINISH_DATE",
                "SUMMARY_REMAINING_LABOR_COST",
                "SUMMARY_REMAINING_LABOR_UNITS",
                "SUMMARY_REMAINING_MATERIAL_COST",
                "SUMMARY_REMAINING_NON_LABOR_COST",
                "SUMMARY_REMAINING_NON_LABOR_UNITS",
                "SUMMARY_REMAINING_START_DATE",
                "SUMMARY_REMAINING_TOTAL_COST",
                "SUMMARY_SCHEDULE_PERCENT_COMPLETE",
                "SUMMARY_SCHEDULE_PERCENT_COMPLETE_BY_LABOR_UNITS",
                "SUMMARY_SCHEDULE_PERFORMANCE_INDEX_BY_COST",
                "SUMMARY_SCHEDULE_PERFORMANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_SCHEDULE_VARIANCE_BY_COST",
                "SUMMARY_SCHEDULE_VARIANCE_BY_LABOR_UNITS",
                "SUMMARY_SCHEDULE_VARIANCE_INDEX",
                "SUMMARY_SCHEDULE_VARIANCE_INDEX_BY_COST",
                "SUMMARY_SCHEDULE_VARIANCE_INDEX_BY_LABOR_UNITS",
                "SUMMARY_START_DATE_VARIANCE",
                "SUMMARY_TO_COMPLETE_PERFORMANCE_INDEX_BY_COST",
                "SUMMARY_TOTAL_COST_VARIANCE",
                "SUMMARY_TOTAL_FLOAT",
                "SUMMARY_UNITS_PERCENT_COMPLETE",
                "SUMMARY_VARIANCE_AT_COMPLETION_BY_LABOR_UNITS",
                "SYNC_WBS_HIERARCHY_FLAG",
                "TEAM_MEMBER_ACTIVITY_FIELDS",
                "TEAM_MEMBER_ADD_NEW_ACTUAL_UNITS",
                "TEAM_MEMBER_ASSIGNMENT_OPTION",
                "TEAM_MEMBER_ASSIGNMENT_PROFICIENCY_FLAG",
                "TEAM_MEMBER_CAN_STATUS_OTHER_RESOURCES",
                "TEAM_MEMBER_CAN_UPDATE_NOTEBOOKS",
                "TEAM_MEMBER_DISPLAY_BASELINE_DATES_FLAG",
                "TEAM_MEMBER_DISPLAY_PLANNED_UNITS",
                "TEAM_MEMBER_DISPLAY_TOTAL_FLOAT_FLAG",
                "TEAM_MEMBER_INCLUDE_PRIMARY_RESOURCES",
                "TEAM_MEMBER_READ_ONLY_ACTIVITY_FIELDS",
                "TEAM_MEMBER_RESOURCE_ASSIGNMENT_FIELDS",
                "TEAM_MEMBER_STEP_UDF_VIEWABLE_FIELDS",
                "TEAM_MEMBER_STEPS_ADD_DELETABLE",
                "TEAM_MEMBER_VIEWABLE_FIELDS",
                "TOTAL_BENEFIT_PLAN",
                "TOTAL_BENEFIT_PLAN_TALLY",
                "TOTAL_FUNDING",
                "TOTAL_SPENDING_PLAN",
                "TOTAL_SPENDING_PLAN_TALLY",
                "UNALLOCATED_BUDGET",
                "UNDISTRIBUTED_CURRENT_VARIANCE",
                "UNIFIER_CBS_TASKS_ONLY_FLAG",
                "UNIFIER_DATA_MAPPING_NAME",
                "UNIFIER_DELETE_ACTIVITIES_FLAG",
                "UNIFIER_ENABLED_FLAG",
                "UNIFIER_PROJECT_NAME",
                "UNIFIER_PROJECT_NUMBER",
                "UNIFIER_SCHEDULE_SHEET_NAME",
                "UNIT_PER_TIME_OVERTIME_FACTOR",
                "USE_EXPECTED_FINISH_DATES",
                "USE_PROJECT_BASELINE_FOR_EARNED_VALUE",
                "WBS_CATEGORY_OBJECT_ID",
                "WBS_CODE_SEPARATOR",
                "WBS_HIERARCHY_LEVELS",
                "WBS_MILESTONE_PERCENT_COMPLETE",
                "WBS_OBJECT_ID",
                "WEB_SITE_ROOT_DIRECTORY",
                "WEB_SITE_URL"
              ]
            }
          }
        },
        "description": "Project Entity"
      },
      "UpdateBaselineOption": {
        "title": "UpdateBaselineOption",
        "required": ["ObjectId"],
        "type": "object",
        "properties": {
          "ActivitiesFilter": {
            "type": "string",
            "description": "The option used to update activity IDs of the selected filter when updating the baseline."
          },
          "ActivitiesFilterLogic": {
            "type": "string",
            "description": "The option used to update activity filter logic when updating the baseline."
          },
          "ActivityCodeAssignments": {
            "type": "boolean",
            "description": "The option used to update activity code assignments when updating the baseline."
          },
          "ActivityFilterId": {
            "type": "string",
            "description": "The option used to update activity filter id when updating the baseline."
          },
          "ActivityFilterName": {
            "type": "string",
            "description": "The option used to update activity filter name when updating the baseline."
          },
          "ActivityInformation": {
            "type": "boolean",
            "description": "The option used to update activity information for existing resource and role assignments when updating the baseline."
          },
          "ActivityNotebooks": {
            "type": "boolean",
            "description": "The option used to update activity information for existing resource and role assignments when updating the baseline."
          },
          "ActivityRsrcAssignmentCodes": {
            "type": "boolean"
          },
          "ActivityRsrcAssignmentUdfs": {
            "type": "boolean",
            "description": "The option used to update activity resource assignment UDFs when updating the baseline."
          },
          "ActivityUdfs": {
            "type": "boolean",
            "description": "The option used to update activity UDFs when updating the baseline"
          },
          "ActualUnitsCostWoRsrcAssignmnt": {
            "type": "boolean",
            "description": "The option used to update activity actual units and cost without resource assignments when updating the baseline."
          },
          "AddNewActivitiesData": {
            "type": "boolean",
            "description": "The option used to add new activities with data when updating the baseline."
          },
          "AddNewRsrcRole": {
            "type": "boolean",
            "description": "The option used to add new resource and role assignments when updating the baseline."
          },
          "AllActivities": {
            "type": "boolean",
            "description": "The option used to include all activities when updating the baseline."
          },
          "BatchModeEnabled": {
            "type": "boolean",
            "description": "The option used to enable the batch update mode when updating the baseline."
          },
          "BudgetUnitsCost": {
            "type": "boolean",
            "description": "The option used to update budget units and cost for existing resource and role assignments when updating the baseline."
          },
          "BudgetUnitsCostWoRsrcAssignmnt": {
            "type": "boolean",
            "description": "The option used to update activity budget units and cost without resource assignment when updating the baseline."
          },
          "Constraints": {
            "type": "boolean",
            "description": "The option used to update activity constraints when updating the baseline"
          },
          "DatesDurationDatadates": {
            "type": "boolean",
            "description": "The option used to update activity dates, duration, and data dates when updating the baseline"
          },
          "DeleteNonExistingActivities": {
            "type": "boolean",
            "description": "The option used to delete non existing activities when updating the baseline."
          },
          "ExpenseUdfs": {
            "type": "boolean",
            "description": "the option used to update activity expense UDFs when updating the baseline."
          },
          "Expenses": {
            "type": "boolean",
            "description": "The option used to update activity expenses when updating the baseline."
          },
          "FilteredActivities": {
            "type": "boolean",
            "description": "The option used to include activities in the selected folder when updating the baseline."
          },
          "GeneralActivitiInfo": {
            "type": "boolean",
            "description": "The option used to update general activity info when updating the baseline."
          },
          "IgnoreLastUpdateDate": {
            "type": "boolean",
            "description": "The option used to ignore LastUpdateDate when updating the baseline."
          },
          "IssueUDFs": {
            "type": "boolean",
            "description": "The option used to update the Issue UDFs when updating the baseline."
          },
          "NewActivityInformation": {
            "type": "boolean"
          },
          "NewBudgetUnitsCost": {
            "type": "boolean"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user.",
            "format": "int32"
          },
          "ProjectDetails": {
            "type": "boolean",
            "description": "The option used to update the project details when updating the baseline."
          },
          "ProjectRisksIssuesAndThresholds": {
            "type": "boolean",
            "description": "The option used to update the Project Risks Issues and Thresholds when updating the baseline."
          },
          "ProjectUDFs": {
            "type": "boolean",
            "description": "The option used to update the project UDFs when updating the baseline."
          },
          "Relationships": {
            "type": "boolean",
            "description": "The option used to update activity relationships when updating the baseline."
          },
          "RiskAssignments": {
            "type": "boolean",
            "description": "The option used to update risk assignments when updating the baseline."
          },
          "RiskUDFs": {
            "type": "boolean",
            "description": "The option used to update the Risks UDFs when updating the baseline."
          },
          "Steps": {
            "type": "boolean",
            "description": "The option used to update activity steps when updating the baseline."
          },
          "StepsUdf": {
            "type": "boolean",
            "description": "The option used to update activity steps UDFs when updating the baseline."
          },
          "UpdateExistRsrcRoleAssignment": {
            "type": "boolean",
            "description": "The option used to update existing resource and role assignments when updating the baseline."
          },
          "UpdateExistingActivities": {
            "type": "boolean",
            "description": "The option used to update existing activities when updating the baseline."
          },
          "UserName": {
            "type": "string",
            "description": "The user's login name."
          },
          "WPDocumentUDFs": {
            "type": "boolean",
            "description": "The option used to update the WPDocument UDFs when updating the baseline."
          },
          "WbsAssignments": {
            "type": "boolean",
            "description": "The option used to update WBS assignments when updating the baseline."
          },
          "WbsUDFs": {
            "type": "boolean",
            "description": "The option used to update the WBS UDFs when updating the baseline."
          },
          "WorkProductsAndDocuments": {
            "type": "boolean",
            "description": "The option used to update the work products and documents when updating the baseline."
          }
        },
        "description": "UpdateBaselineOption Entity"
      },
      "ProjectPortfolio": {
        "title": "ProjectPortfolio",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this project portfolio was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project portfolio."
          },
          "Description": {
            "type": "string",
            "description": "The description of the project portfolio."
          },
          "IncludeClosedProjects": {
            "type": "boolean",
            "description": "The flag that indicates whether closed projects are included in the portfolio."
          },
          "IncludeWhatIfProjects": {
            "type": "boolean",
            "description": "The flag that indicates whether what-if projects are included in the portfolio."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project portfolio was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project portfolio."
          },
          "Name": {
            "type": "string",
            "description": "The name of the project portfolio."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "PortfolioUserIdArray": {
            "type": "string"
          },
          "PortfolioUserNameArray": {
            "type": "string"
          },
          "Type": {
            "type": "string",
            "description": "The type of the project portfolio: \"Manual\", \"Auto-Maintained\", or \"Filtered\"."
          },
          "UserName": {
            "type": "string",
            "description": "The user's login name."
          },
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of a specific user who has access to the selected project portfolio.",
            "format": "int32"
          },
          "MemberProject": {
            "type": "array",
            "description": "MemberProject",
            "items": {
              "$ref": "#/components/schemas/MemberProject"
            }
          }
        },
        "description": "ProjectPortfolio Entity"
      },
      "Resource": {
        "title": "Resource",
        "type": "object",
        "properties": {
          "AutoComputeActuals": {
            "type": "boolean"
          },
          "CalculateCostFromUnits": {
            "type": "boolean"
          },
          "CalendarName": {
            "type": "string"
          },
          "CalendarObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string"
          },
          "CurrencyId": {
            "type": "string"
          },
          "CurrencyName": {
            "type": "string"
          },
          "CurrencyObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "DefaultUnitsPerTime": {
            "type": "number",
            "format": "double"
          },
          "EffectiveDate": {
            "type": "string",
            "format": "date-time"
          },
          "EmailAddress": {
            "type": "string"
          },
          "EmployeeId": {
            "type": "string"
          },
          "GUID": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "IntegratedType": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsOverTimeAllowed": {
            "type": "boolean"
          },
          "LastUpdateDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string"
          },
          "Latitude": {
            "type": "number",
            "format": "double"
          },
          "LocationName": {
            "type": "string"
          },
          "LocationObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "Longitude": {
            "type": "number",
            "format": "double"
          },
          "MaxUnitsPerTime": {
            "type": "number",
            "format": "double"
          },
          "Name": {
            "type": "string"
          },
          "ObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "OfficePhone": {
            "type": "string"
          },
          "OtherPhone": {
            "type": "string"
          },
          "OvertimeFactor": {
            "type": "number",
            "format": "double"
          },
          "ParentObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "PricePerUnit": {
            "type": "number",
            "format": "double"
          },
          "PrimaryRoleId": {
            "type": "string"
          },
          "PrimaryRoleName": {
            "type": "string"
          },
          "PrimaryRoleObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ResourceNotes": {
            "type": "string"
          },
          "ResourceType": {
            "type": "string"
          },
          "SequenceNumber": {
            "type": "integer",
            "format": "int32"
          },
          "ShiftObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "TimesheetApprovalManager": {
            "type": "string"
          },
          "TimesheetApprovalManagerObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "Title": {
            "type": "string"
          },
          "UnitOfMeasureAbbreviation": {
            "type": "string"
          },
          "UnitOfMeasureName": {
            "type": "string"
          },
          "UnitOfMeasureObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "UseTimesheets": {
            "type": "boolean"
          },
          "UserName": {
            "type": "string"
          },
          "UserObjectId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Resource Entity"
      },
      "Period": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "The start of the time period that you are interested in.",
            "format": "date-time"
          },
          "PlannedUnits": {
            "type": "number",
            "description": "The planned units of work for the resource assignment on the activity. This field is named BudgetedUnits in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "RemainingUnits": {
            "type": "number",
            "description": "The remaining units of work to be performed by this resource on this activity. Before the activity is started, the remaining units are the same as the planned units. After the activity is completed, the remaining units are zero.",
            "format": "double"
          }
        }
      },
      "ProjectThreshold": {
        "title": "ProjectThreshold",
        "required": [
          "OBSObjectId",
          "ProjectObjectId",
          "ThresholdParameterObjectId",
          "WBSObjectId"
        ],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this project threshold was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project threshold."
          },
          "DetailToMonitor": {
            "type": "string",
            "description": "The level of detail to monitor, either Activity or WBS. The project threshold is calculated at the activity level or at the WBS level, whichever is selected."
          },
          "FromDate": {
            "type": "string",
            "description": "The starting custom date of the time window that is monitored against a project threshold. Any activities or WBS elements with start/finish dates which intersect this time window are monitored.",
            "format": "date-time"
          },
          "FromDateExpression": {
            "type": "string",
            "description": "The expression for the starting date of the time window that is monitored against a project threshold. Valid values are PS (the project StartDate), PF (the project FinishDate), DD (the project Data Date), CD (Current Date), CW (Current Week), or CM (Current Month). All values can be combined with arithmetic operators + or - and a numerical calendar value. For example, PS+5D, DD-1M. The calendar abbreviation specified in the expression (H, D, W, M, Y) must match the value of the corresponding GlobalPreferences field: HourChar, DayChar, WeekChar, MonthChar, or YearChar. You could specify a custom date by setting a date value for the FromDate field. If you set values for both the FromDate and FromDateExpression fields, the FromDateExpression will be ignored."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "IssuePriority": {
            "type": "string",
            "description": "The priority of any issues generated from the project threshold."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project threshold was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project threshold."
          },
          "LowerThreshold": {
            "type": "number",
            "description": "The lower value of a project threshold that will trigger an issue. An issue is identified by the project threshold monitor when the actual/observed value of the project threshold parameter is found to be less than or equal to the lower project threshold value. If the lower project threshold value is null, it is ignored. Example: The Total Float lower project threshold is set to one day. Whenever the observed total float is less than or equal to one day, a project issue is raised",
            "format": "double"
          },
          "OBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated OBS for this project threshold.",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The Project short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project for this project threshold.",
            "format": "int32"
          },
          "Status": {
            "type": "string",
            "description": "The current status of the project threshold."
          },
          "ThresholdParameterObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated threshold parameter for this project threshold.",
            "format": "int32"
          },
          "ToDate": {
            "type": "string",
            "description": "The ending custom date of the time window that is monitored against a project threshold. Any activities or WBS elements with start/finish dates which intersect this time window are monitored.",
            "format": "date-time"
          },
          "ToDateExpression": {
            "type": "string",
            "description": "The expression for the ending date of the time window that is monitored against a project threshold. Valid values are PS (the project StartDate), PF (the project FinishDate), DD (the project Data Date), CD (Current Date), CW (Current Week), or CM (Current Month). All values can be combined with arithmetic operators + or - and a numerical calendar value. For example, PS+5d, DD-1M. The calendar abbreviation specified in the expression (H, D, W, M, Y) must match the value of the corresponding GlobalPreferences field: HourChar, DayChar, WeekChar, MonthChar, or YearChar. You could specify a custom date by setting a date value for the FromDate field. If you set values for both the ToDate and ToDateExpression fields, the ToDateExpression will be ignored."
          },
          "UpperThreshold": {
            "type": "number",
            "description": "The upper value of a project threshold parameter which will trigger an issue. An issue is identified by the project threshold monitor when the actual/observed value of the project threshold parameter is found to be greater than or equal to the upper project threshold value. If the upper project threshold value is null, it is ignored. Example: The Cost % of Planned upper project threshold is set to 120%. Whenever the actual cost is greater than or equal to 120% of planned, an issue is raised.",
            "format": "double"
          },
          "WBSCode": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes."
          },
          "WBSName": {
            "type": "string",
            "description": "The name of the WBS element."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated WBS for this project threshold.",
            "format": "int32"
          }
        },
        "description": "ProjectThreshold Entity"
      },
      "RiskImpact": {
        "title": "RiskImpact",
        "required": ["RiskObjectId", "RiskThresholdLevelObjectId"],
        "type": "object",
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "The date this risk impact was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created the risk impact."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline."
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this risk impact was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated the risk impact."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short name of the associated project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RiskId": {
            "type": "string",
            "description": "The ID of the Risk. Must be unique within a project."
          },
          "RiskName": {
            "type": "string",
            "description": "The name of the Risk. Does not need to be unique."
          },
          "RiskObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated risk.",
            "format": "int32"
          },
          "RiskThresholdLevelCode": {
            "type": "string",
            "description": "The 10 character short name for the threshold level. Must be unique."
          },
          "RiskThresholdLevelName": {
            "type": "string",
            "description": "The 40 character name for the threshold level. Does not need to be unique."
          },
          "RiskThresholdLevelObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Threshold.",
            "format": "int32"
          },
          "RiskThresholdName": {
            "type": "string",
            "description": "The name of the associated risk score type."
          },
          "RiskThresholdObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Threshold Type.",
            "format": "int32"
          }
        },
        "description": "RiskImpact Entity"
      },
      "CBSRsrcExpenseSpreadPeriod": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "ActualCost": {
            "type": "number",
            "format": "double"
          },
          "ActualUnits": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingUnits": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ActivitySpreadPeriod": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "ActualCost": {
            "type": "number",
            "format": "double"
          },
          "ActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "ActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "ActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "ActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "ActualNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "ActualNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "ActualTotalCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionLaborCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "AtCompletionTotalCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1ActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1ActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1ActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "Baseline1ActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1ActualNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1ActualNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "Baseline1ActualTotalCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1PlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1PlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1PlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "Baseline1PlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1PlannedNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "Baseline1PlannedNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "Baseline1PlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "BaselineActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "BaselineActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "BaselineActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "BaselineActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "BaselineActualNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "BaselineActualNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "BaselineActualTotalCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "BaselinePlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "EarnedValueCost": {
            "type": "number",
            "format": "double"
          },
          "EarnedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "EstimateAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "EstimateAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "EstimateToCompleteCost": {
            "type": "number",
            "format": "double"
          },
          "EstimateToCompleteLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "PlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedValueCost": {
            "type": "number",
            "format": "double"
          },
          "PlannedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLaborCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateLaborCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingLateTotalCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "RemainingNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "RemainingTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeActualTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeAtCompletionTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1ActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1ActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1ActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1ActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1ActualNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1ActualNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1ActualTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1PlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1PlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1PlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1PlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1PlannedNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1PlannedNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaseline1PlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselineActualExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselineActualLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselineActualLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselineActualMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselineActualNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselineActualNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselineActualTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeBaselinePlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEarnedValueCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEarnedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEstimateAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEstimateAtCompletionLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEstimateToCompleteCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeEstimateToCompleteLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedValueCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativePlannedValueLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateExpenseCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingLateTotalCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingMaterialCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingNonLaborCost": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingNonLaborUnits": {
            "type": "number",
            "format": "double"
          },
          "CumulativeRemainingTotalCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "CreateProjectResourceQuantityResponse": {
        "title": "CreateProjectResourceQuantityResponse",
        "type": "object",
        "properties": {
          "ProjectResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project resource.",
            "format": "int32"
          },
          "WeekStartDate": {
            "type": "string",
            "description": "The date value that represents the first day of the week."
          },
          "MonthStartDate": {
            "type": "string",
            "description": "The value that represents the resource allocation hours per week for this project resource quantity. If the week contains days from two different months, two ProjectResourceQuantity business objects will exist. The first business object's Quantity field represents the hours of the first week fragment (WeekStartDate and MonthStartDate have the same month value). The second business object's Quantity field represents the second week fragment (WeekStartDate and MonthStartDate have different month values)."
          }
        },
        "description": "CreateProjectResourceQuantityResponse Entity"
      },
      "ResourceExport": {
        "title": "Resource",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for Resource Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for Resource Business Object",
              "enum": [
                "AUTO_COMPUTE_ACTUALS",
                "CALCULATE_COST_FROM_UNITS",
                "CALENDAR_NAME",
                "CALENDAR_OBJECT_ID",
                "CREATE_DATE",
                "CREATE_USER",
                "CURRENCY_ID",
                "CURRENCY_NAME",
                "CURRENCY_OBJECT_ID",
                "DEFAULT_UNITS_PER_TIME",
                "EFFECTIVE_DATE",
                "EMAIL_ADDRESS",
                "EMPLOYEE_ID",
                "GUID",
                "ID",
                "INTEGRATED_TYPE",
                "IS_ACTIVE",
                "IS_OVER_TIME_ALLOWED",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LATITUDE",
                "LOCATION_NAME",
                "LOCATION_OBJECT_ID",
                "LONGITUDE",
                "MAX_UNITS_PER_TIME",
                "NAME",
                "OBJECT_ID",
                "OFFICE_PHONE",
                "OTHER_PHONE",
                "OVERTIME_FACTOR",
                "PARENT_OBJECT_ID",
                "PRICE_PER_UNIT",
                "PRIMARY_ROLE_ID",
                "PRIMARY_ROLE_NAME",
                "PRIMARY_ROLE_OBJECT_ID",
                "RESOURCE_NOTES",
                "RESOURCE_TYPE",
                "SEQUENCE_NUMBER",
                "SHIFT_OBJECT_ID",
                "TIMESHEET_APPROVAL_MANAGER",
                "TIMESHEET_APPROVAL_MANAGER_OBJECT_ID",
                "TITLE",
                "UNIT_OF_MEASURE_ABBREVIATION",
                "UNIT_OF_MEASURE_NAME",
                "UNIT_OF_MEASURE_OBJECT_ID",
                "USE_TIMESHEETS",
                "USER_NAME",
                "USER_OBJECT_ID"
              ]
            }
          }
        },
        "description": "Resource Entity"
      },
      "ProjectResourceQuantity": {
        "title": "ProjectResourceQuantity",
        "required": [
          "FinancialPeriod1Quantity",
          "FinancialPeriod2Quantity",
          "ProjectResourceObjectId",
          "Quantity",
          "WeekStartDate"
        ],
        "type": "object",
        "properties": {
          "CommittedFlag": {
            "type": "boolean",
            "description": "The Boolean value that determines whether a resource is committed, and so, the resource assignment is stable and unlikely to change. When calculating availability, Primavera considers only assignments that are marked as committed."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this project resource quantity was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project resource quantity."
          },
          "FinancialPeriod1ObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated first financial period for this project resource quantity.",
            "format": "int32"
          },
          "FinancialPeriod1Quantity": {
            "type": "number",
            "description": "The value that represents the resource allocation hours for the first financial period for this project resource quantity. If the week contains days from two different months, two ProjectResourceQuantity business objects will exist. The first business object's Quantity field represents the hours of the first week fragment (WeekStartDate and MonthStartDate have the same month value). The second business object's Quantity field represents the second week fragment (WeekStartDate and MonthStartDate have different month values).",
            "format": "double"
          },
          "FinancialPeriod2ObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated second financial period for this project resource quantity.",
            "format": "int32"
          },
          "FinancialPeriod2Quantity": {
            "type": "number",
            "description": "The value that represents the resource allocation hours for the second financial period for this project resource quantity. If the week contains days from two different months, two ProjectResourceQuantity business objects will exist. The first business object's Quantity field represents the hours of the first week fragment (WeekStartDate and MonthStartDate have the same month value). The second business object's Quantity field represents the second week fragment (WeekStartDate and MonthStartDate have different month values).",
            "format": "double"
          },
          "FinancialPeriodTmplId": {
            "type": "integer",
            "format": "int32"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project resource quantity was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project resource quantity."
          },
          "MonthStartDate": {
            "type": "string",
            "description": "The date value that represents the first day of the month. If the week contains days from two different months, two objects will exist. The first ProjectResourceQuantity object's MonthStartDate is the first day of the month for the first week fragment. The second ProjectResourceQuantity object's MonthStartDate is the first day of the month for the second week fragment.",
            "format": "date-time"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ProjectResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project resource.",
            "format": "int32"
          },
          "Quantity": {
            "type": "number",
            "description": "The value that represents the resource allocation hours per week for this project resource quantity. If the week contains days from two different months, two ProjectResourceQuantity business objects will exist. The first business object's Quantity field represents the hours of the first week fragment (WeekStartDate and MonthStartDate have the same month value). The second business object's Quantity field represents the second week fragment (WeekStartDate and MonthStartDate have different month values).",
            "format": "double"
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "RoleObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated role.",
            "format": "int32"
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated WBS.",
            "format": "int32"
          },
          "WeekStartDate": {
            "type": "string",
            "description": "The date value that represents the first day of the week.",
            "format": "date-time"
          }
        },
        "description": "ProjectResourceQuantity Entity"
      },
      "CostAccountExport": {
        "title": "CostAccount",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for CostAccount Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for CostAccount Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "DESCRIPTION",
                "ID",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PARENT_OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "CostAccount Entity"
      },
      "ProjectBudgetChangeLogExport": {
        "title": "ProjectBudgetChangeLog",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean"
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectBudgetChangeLog Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectBudgetChangeLog Business Object",
              "enum": [
                "AMOUNT",
                "CHANGE_NUMBER",
                "CREATE_DATE",
                "CREATE_USER",
                "DATE",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "REASON",
                "RESPONSIBLE",
                "STATUS",
                "WBS_CODE",
                "WBS_NAME",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ProjectBudgetChangeLog Entity"
      },
      "ProjectDocument": {
        "title": "ProjectDocument",
        "required": [
          "ActivityObjectId",
          "DocumentObjectId",
          "ProjectObjectId",
          "WBSObjectId"
        ],
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "string",
            "description": "The short ID that uniquely identifies the activity within the project."
          },
          "ActivityName": {
            "type": "string",
            "description": "The name of the activity. The activity name does not have to be unique."
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the activity document applies.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this document was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The date this document was created."
          },
          "DocumentCategoryName": {
            "type": "string"
          },
          "DocumentObjectId": {
            "type": "integer",
            "description": "The unique ID of the document to which the activity document applies.",
            "format": "int32"
          },
          "DocumentStatusName": {
            "type": "string"
          },
          "DocumentTitle": {
            "type": "string",
            "description": "The title or name of a document assigned to a WBS or activity within a project."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "IsWorkProduct": {
            "type": "boolean",
            "description": "The flag that indicates whether the document is a work product."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this document was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this document."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ParentWBSObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the project to which the activity document applies.",
            "format": "int32"
          },
          "WBSCode": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes."
          },
          "WBSName": {
            "type": "string",
            "description": "The name of the WBS element."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS to which the activity document applies.",
            "format": "int32"
          }
        },
        "description": "ProjectDocument Entity"
      },
      "DocumentCategoryExport": {
        "title": "DocumentCategory",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for DocumentCategory Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for DocumentCategory Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "DocumentCategory Entity"
      },
      "CreateRiskMatrixThresholdResponse": {
        "title": "CreateRiskMatrixThresholdResponse",
        "type": "object",
        "properties": {
          "RiskMatrixObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Matrix.",
            "format": "int32"
          },
          "RiskThresholdObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Risk Threshold.",
            "format": "int32"
          }
        },
        "description": "CreateRiskMatrixThresholdResponse Entity"
      },
      "ReadWBSRoleSpreadResponse": {
        "title": "ReadWBSRoleSpreadResponse",
        "type": "object",
        "properties": {
          "WBSCode": {
            "type": "string"
          },
          "WBSObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "RoleId": {
            "type": "string"
          },
          "RoleObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRoleSpreadPeriod"
            }
          }
        },
        "description": "ReadWBSRoleSpreadResponse Entity"
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "AllResourceAccessFlag": {
            "type": "boolean",
            "description": "The flag that determines whether the user has all resource access (TRUE) or restricted resource access (FALSE). Admin Superusers always have all resource access."
          },
          "AssignmentStaffingPreference": {
            "type": "string",
            "description": "The value that determines whether the current or the new resource's Units per Time and Overtime factor is used to calculate costs when assigning the resource to an existing activity assignment. If the AssignmentStaffingPreference is set to 'Ask Me', the default value is then current resource."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this user was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this user."
          },
          "CurrencyId": {
            "type": "string",
            "description": "The unique currency abbreviation for the currency associated with this user."
          },
          "CurrencyName": {
            "type": "string",
            "description": "The name of the currency associated with this user."
          },
          "CurrencyObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated currency.",
            "format": "int32"
          },
          "CurrencyShowDecimals": {
            "type": "boolean",
            "description": "The flag which when set to true will show decimal places for the currency, and when set to false will not Display decimal places. Possible values : 'True' or 'False'"
          },
          "CurrencyShowSymbol": {
            "type": "boolean",
            "description": "The flag which when set to true will show Currency Symbol for the currency, and when set to false will not Display Currency Symbol. Possible values : 'True' or 'False'"
          },
          "DateFormatType": {
            "type": "string",
            "description": "The date format type for the user: 'Month, Day, Year' , 'Day, Month, Year' or 'Year, Month, Day'."
          },
          "DateSeparator": {
            "type": "string",
            "description": "The date Separator for the user: '/' , '-' or '.'"
          },
          "DateShowFourDigitYear": {
            "type": "boolean",
            "description": "The flag which when set to true will show four digit year for the Date format specified, and when set to false will not show four digit year. Possible values : 'True' or 'False'"
          },
          "DateShowMinutes": {
            "type": "boolean",
            "description": "The flag which when set to true will show minutes value for the Time format specified, and when set to false will not show minutes value. Possible values : 'True' or 'False'"
          },
          "DateTimeFormatType": {
            "type": "string",
            "description": "The date format type for the user: '12 hour (1:30 PM)' , '24 hour (13:30)' or 'Do not show time'."
          },
          "DateUseLeadingZero": {
            "type": "boolean",
            "description": "The flag which when set to true will show leading zero for the Date format specified, and when set to false will not show leading zero. Possible values : 'True' or 'False'"
          },
          "DateUseMonthName": {
            "type": "boolean",
            "description": "The flag which when set to true will show month value for the Date format specified, and when set to false will not show month value. Possible values : 'True' or 'False'"
          },
          "DurationDecimalCount": {
            "type": "string",
            "description": "The Duration Decimal count for the user is the number of decimal places to be displayed for the Duration. : '0','1' or '2'."
          },
          "DurationUnitType": {
            "type": "string",
            "description": "The Duration Unit Type for the user is the Display Time units In: 'Hour','Day','Week','Month' or 'Year'."
          },
          "DurationUseFraction": {
            "type": "boolean",
            "description": "The flag which when set to true will show units for the Duration, and when set to false will not show units. Possible values : 'True' or 'False'"
          },
          "EmailAddress": {
            "type": "string",
            "description": "The current user's return email address. This will be used in the \"FROM\" line for any email sent by this user. Example: \"yourname@yourdomain.com\". For MAPI users, this may just be the MAPI profile name or mailbox name."
          },
          "EmailProtocol": {
            "type": "string",
            "description": "The email type for the user: 'Internet Mail' or 'MAPI Mail'."
          },
          "EnableUserToModifyViewSettingsFlag": {
            "type": "boolean",
            "description": "The flag that when set to true allows the user to change his or her personal view settings in P6. When a user changes the user interface view settings, the changes do not affect the settings of other users assigned to the same view."
          },
          "FinancialPeriodEndObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system of the last financial period viewable in columns in Project Management.",
            "format": "int32"
          },
          "FinancialPeriodStartObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system of the first financial period viewable in columns in Project Management.",
            "format": "int32"
          },
          "GUID": {
            "type": "string",
            "description": "The globally unique ID generated by the system."
          },
          "GlobalProfileObjectId": {
            "type": "integer",
            "description": "The unique ID of the global security profile assigned to the user. See the GlobalProfile class for constants defining the fixed profiles of Admin Superuser and No Global Privileges.",
            "format": "int32"
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this user was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this user."
          },
          "MailServerLoginName": {
            "type": "string",
            "description": "The mail login name (profile name) for the current user to send outgoing email. If the email protocol is MAPI, this field should contain the MAPI profile name"
          },
          "Name": {
            "type": "string",
            "description": "The user's login name."
          },
          "NewProjectDurationType": {
            "type": "string",
            "description": "the default duration type assigned to new activities. Valid values are 'Fixed Units/Time', 'Fixed Duration and Units/Time', 'Fixed Units', or 'Fixed Duration and Units'."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OfficePhone": {
            "type": "string",
            "description": "The work phone number of the user."
          },
          "OutgoingMailServer": {
            "type": "string",
            "description": "The outgoing mail server (SMTP) address used to send outgoing email for this user. The address may be a host name or an IP address. This field is used only with the Internet email protocol, and is not required for MAPI."
          },
          "PersonalName": {
            "type": "string",
            "description": "The user's personal or actual name."
          },
          "RateSourcePreference": {
            "type": "string",
            "description": "The value that determines which price/unit will be used by default to calculate costs for the assignment when both a resource and role are assigned."
          },
          "ReportingFlag": {
            "type": "boolean",
            "description": "The flag that determines whether the user can access ODS database as a database user."
          },
          "ResourceRequests": {
            "$ref": "#/components/schemas/ResourceRequests"
          },
          "RespectActivityDurationType": {
            "type": "boolean",
            "description": "the setting that indicates whether to recalculate the Duration, Units, or Units/Time for existing assignments based on the activity Duration Type (true) or to preserve the Duration, Units, or Units/Time for existing assignments (false) when adding or removing assignments on activities."
          },
          "RoleLimitDisplayOption": {
            "type": "string",
            "description": "The option for how RoleLimit is displayed. Valid values are 'Custom', and 'PrimaryRole'."
          },
          "ShowDurationTimeUnit": {
            "type": "boolean",
            "description": "The flag which when set to true will show units for the Duration, and when set to false will not show units. Possible values : 'True' or 'False'"
          },
          "ShowTimeUnit": {
            "type": "boolean",
            "description": "The flag which when set to true will show units for the Time, and when set to false will not show units. Possible values : 'True' or 'False'"
          },
          "SmallScaleDecimalCount": {
            "type": "string",
            "description": "The Small Scale Decimal count for the user is the number of decimal places to be displayed for the Time. : '0','1' or '2'."
          },
          "SmallScaleUnitType": {
            "type": "string",
            "description": "The Small Scale Unit Type for the user is the Display Time units In: 'Hour','Day','Week','Month' or 'Year'."
          },
          "SmallScaleUseFraction": {
            "type": "boolean",
            "description": "The flag which when set to true will show sub units for the Time units format specified, and when set to false will not show sub units. Possible values : 'True' or 'False'"
          },
          "TeamMemberActivityFilters": {
            "type": "string",
            "description": "The Statuser activity filters for the Team Member application."
          },
          "TeamMemberActivitySortField": {
            "type": "string",
            "description": "Select whether column name entries are sorted in ascending or descending order."
          },
          "TeamMemberActivitySortOrder": {
            "type": "string",
            "description": "From the Sort Order list, you can select to list projects in the scorecard in either ascending"
          },
          "TeamMemberApplicationTheme": {
            "type": "string",
            "description": "The user interface theme setting for P6 Team Member Web."
          },
          "TeamMemberDateFormat": {
            "type": "string",
            "description": "The date format setting for the P6 Team Member Web."
          },
          "TeamMemberDisplayTimeFlag": {
            "type": "boolean",
            "description": "The display hours setting for P6 Team Member Web."
          },
          "TeamMemberDisplayTimeFormat": {
            "type": "string",
            "description": "The display hours format setting for P6 Team Member Web."
          },
          "TeamMemberLocale": {
            "type": "string",
            "description": "The user-specific locale set for P6 Team Member Web."
          },
          "TeamMemberProjectFilter": {
            "type": "string",
            "description": "The project filter for P6 Team Member Web."
          },
          "TeamMemberResourceFilter": {
            "type": "string",
            "description": "The user-specific resource filter for P6 Team Member Web."
          },
          "TeamMemberDisplayQRQuickAccess": {
            "type": "string",
            "description": "The flag that is used to to determine if a user has seen the QR quick access link in P6 Team Member Web."
          },
          "TeamMemberTaskStatusFilter": {
            "type": "string",
            "description": "The task status filter for P6 Team Member Web."
          },
          "TeamMemberTimeframeFilter": {
            "type": "string"
          },
          "TeamMemberWBSFilter": {
            "type": "string",
            "description": "The time frame filter for P6 Team Member Web."
          },
          "TeamMemberWorkUnitType": {
            "type": "string",
            "description": "The user-specific wbs filter for P6 Team Member Web."
          },
          "UnitsPerTimeShowAsPercentage": {
            "type": "boolean",
            "description": "The flag which when set to true will show Units/Time as Percentage, and when set to false will display as Units/Duration. Possible values : 'True' or 'False'"
          },
          "UserInterfaceViewObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user interface view.",
            "format": "int32"
          }
        },
        "description": "User Entity"
      },
      "ResourceCodeTypeExport": {
        "title": "ResourceCodeType",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ResourceCodeType Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ResourceCodeType Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "IS_SECURE_CODE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LENGTH",
                "NAME",
                "OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "ResourceCodeType Entity"
      },
      "CBSResourceSpread": {
        "type": "object",
        "properties": {
          "cbsobjectId": {
            "type": "integer",
            "format": "int32"
          },
          "BaselineProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string"
          },
          "ProjectName": {
            "type": "string"
          },
          "OriginalProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "CBSObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ResourceObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "BaselineType": {
            "type": "string"
          },
          "DataDate": {
            "type": "string"
          },
          "ResourceId": {
            "type": "string"
          },
          "ResourceName": {
            "type": "string"
          },
          "ResourceType": {
            "type": "string"
          },
          "UnitName": {
            "type": "string"
          },
          "UnitAbbreviation": {
            "type": "string"
          },
          "CurrencyId": {
            "type": "string"
          },
          "CurrencyName": {
            "type": "string"
          },
          "SummaryActualCost": {
            "type": "number",
            "format": "double"
          },
          "SummaryActualUnits": {
            "type": "number",
            "format": "double"
          },
          "SummaryAtCompletionCost": {
            "type": "number",
            "format": "double"
          },
          "SummaryAtCompletionUnits": {
            "type": "number",
            "format": "double"
          },
          "SummaryPlannedCost": {
            "type": "number",
            "format": "double"
          },
          "SummaryPlannedUnits": {
            "type": "number",
            "format": "double"
          },
          "SummaryRemainingCost": {
            "type": "number",
            "format": "double"
          },
          "SummaryRemainingUnits": {
            "type": "number",
            "format": "double"
          },
          "SummaryActualFinish": {
            "type": "string",
            "format": "date-time"
          },
          "SummaryActualStart": {
            "type": "string",
            "format": "date-time"
          },
          "SummaryPlannedFinish": {
            "type": "string",
            "format": "date-time"
          },
          "SummaryPlannedStart": {
            "type": "string",
            "format": "date-time"
          },
          "SummaryRemainingFinish": {
            "type": "string",
            "format": "date-time"
          },
          "SummaryRemainingStart": {
            "type": "string",
            "format": "date-time"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CBSRsrcExpenseSpreadPeriod"
            }
          }
        }
      },
      "CreateResourceAccessResponse": {
        "title": "CreateResourceAccessResponse",
        "type": "object",
        "properties": {
          "UserObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated user.",
            "format": "int32"
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Resource.",
            "format": "int32"
          }
        },
        "description": "CreateResourceAccessResponse Entity"
      },
      "CBS": {
        "title": "CBS",
        "required": ["CBSCode", "ProjectObjectId"],
        "type": "object",
        "properties": {
          "CBSCode": {
            "type": "string",
            "description": "The unique name of the Unifier CBS Code. Assign CBS codes to activities so that you can filter which activities you will send to Unifier."
          },
          "CBSDescription": {
            "type": "string",
            "description": "The description of the associated CBS."
          },
          "CBSStatus": {
            "type": "string",
            "description": "Specifies the status of the CBS."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this activity was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this activity."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this activity was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this activity."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ParentObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent CBS for this CBS in the hierarchy.",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          }
        },
        "description": "CBS Entity"
      },
      "ProjectCode": {
        "title": "ProjectCode",
        "required": ["CodeTypeObjectId", "CodeValue"],
        "type": "object",
        "properties": {
          "CodeTypeName": {
            "type": "string",
            "description": "The name of the parent code type for this code."
          },
          "CodeTypeObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent project code type.",
            "format": "int32"
          },
          "CodeValue": {
            "type": "string",
            "description": "The value of the project code."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this project code was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project code."
          },
          "Description": {
            "type": "string",
            "description": "The description of the project code."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project code was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project code."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ParentObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent project code of this project code in the hierarchy.",
            "format": "int32"
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number for sorting.",
            "format": "int32"
          },
          "Weight": {
            "type": "number",
            "description": "The weight for this code value.",
            "format": "double"
          }
        },
        "description": "ProjectCode Entity"
      },
      "UpdateBaseline": {
        "title": "UpdateBaseline",
        "type": "object",
        "properties": {
          "ObjectId": {
            "type": "integer",
            "description": "The unique identifier for the job.",
            "format": "int32"
          },
          "BaselineProjId": {
            "type": "integer",
            "description": "The unique identifier for the baseline project.",
            "format": "int32"
          },
          "Timeout": {
            "type": "integer",
            "description": "The amount of time in seconds that the server side will wait for the job service to complete before it returns with the current job status. The Timeout parameter is optional. When this operation is used without specifying a Timeout parameter or with a Timeout of 0, the server immediately returns without waiting for the job service to complete.",
            "format": "int32"
          }
        },
        "description": "UpdateBaseline Entity"
      },
      "ResourceAssignmentCreate": {
        "title": "ResourceAssignmentCreate",
        "required": ["ActivityObjectId", "ResourceObjectId"],
        "type": "object",
        "properties": {
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the associated assignment is assigned.",
            "format": "int32"
          },
          "ActualFinishDate": {
            "type": "string",
            "description": "The date the resource actually finished working on the activity.",
            "format": "date-time"
          },
          "ActualStartDate": {
            "type": "string",
            "description": "The date the resource actually started working on the activity.",
            "format": "date-time"
          },
          "ActualUnits": {
            "type": "number",
            "description": "The actual units worked by the resource on this activity.",
            "format": "double"
          },
          "AssignmentIsRead": {
            "type": "string",
            "description": "To determine whether or not the newly created assignment from P6 Team Member Web is viewed by the manager in the Control Status Update."
          },
          "ChangeSetObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated Changeset.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique identifier of the project that is associated with the ResourceAssignmentCreate object.",
            "format": "int32"
          },
          "RemainingDuration": {
            "type": "number",
            "description": "The remaining finish date for the resource working on the activity.",
            "format": "double"
          },
          "RemainingFinishDate": {
            "type": "string",
            "description": "The remaining finish date for the resource working on the activity.",
            "format": "date-time"
          },
          "RemainingUnits": {
            "type": "number",
            "description": "The remaining units of work to be performed by this resource on this activity.",
            "format": "double"
          },
          "RequestUserObjectId": {
            "type": "integer",
            "description": "The unique ID of the user modifying the task, assignment or step.",
            "format": "int32"
          },
          "ResourceAssignmentCreateObjectId": {
            "type": "integer",
            "description": "The unique identifier of the ResourceAssignment that is associated to the ResourceAssignmentCreate.",
            "format": "int32"
          },
          "ResourceAssignmentObjectId": {
            "type": "integer",
            "description": "The unique identifier of the ResourceAssignment that is associated with ResourceAssignmentCreate object.",
            "format": "int32"
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique identifier of the associated resource.",
            "format": "int32"
          },
          "Status": {
            "type": "string",
            "description": "The status of the resource assignment. [not sure about the filter orderable or read only]"
          }
        },
        "description": "ResourceAssignmentCreate Entity"
      },
      "ApplyActuals": {
        "title": "ApplyActuals",
        "type": "object",
        "properties": {
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique identifier of the project you want to summarize.",
            "format": "int32"
          },
          "NewDataDate": {
            "type": "string",
            "description": "The unique identifier of the project you want to summarize.",
            "format": "date-time"
          },
          "Timeout": {
            "type": "integer",
            "description": "The unique identifier of the project you want to summarize.",
            "format": "int32"
          }
        },
        "description": "ApplyActuals Entity"
      },
      "ProjectResourceQuantityExport": {
        "title": "ProjectResourceQuantity",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectResourceQuantity Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectResourceQuantity Business Object",
              "enum": [
                "COMMITTED_FLAG",
                "CREATE_DATE",
                "CREATE_USER",
                "FINANCIAL_PERIOD_1_OBJECT_ID",
                "FINANCIAL_PERIOD_1_QUANTITY",
                "FINANCIAL_PERIOD_2_OBJECT_ID",
                "FINANCIAL_PERIOD_2_QUANTITY",
                "FINANCIAL_PERIOD_TMPL_ID",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "MONTH_START_DATE",
                "PROJECT_OBJECT_ID",
                "PROJECT_RESOURCE_OBJECT_ID",
                "QUANTITY",
                "RESOURCE_OBJECT_ID",
                "ROLE_OBJECT_ID",
                "WBS_OBJECT_ID",
                "WEEK_START_DATE"
              ]
            }
          }
        },
        "description": "ProjectResourceQuantity Entity"
      },
      "RoleLimitExport": {
        "title": "RoleLimit",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for RoleLimit Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for RoleLimit Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "EFFECTIVE_DATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "MAX_UNITS_PER_TIME",
                "OBJECT_ID",
                "ROLE_OBJECT_ID"
              ]
            }
          }
        },
        "description": "RoleLimit Entity"
      },
      "ProjectDeployment": {
        "title": "ProjectDeployment",
        "type": "object",
        "properties": {
          "DeploymentName": {
            "type": "string"
          },
          "DeploymentObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ProviderName": {
            "type": "string"
          }
        },
        "description": "ProjectDeployment Entity"
      },
      "ProjectNote": {
        "title": "ProjectNote",
        "required": ["NotebookTopicObjectId", "ProjectObjectId", "WBSObjectId"],
        "type": "object",
        "properties": {
          "AvailableForActivity": {
            "type": "boolean",
            "description": "The flag indicating whether this note is available for Activity objects."
          },
          "AvailableForEPS": {
            "type": "boolean",
            "description": "The flag indicating whether this note is available for EPS objects."
          },
          "AvailableForProject": {
            "type": "boolean",
            "description": "The flag indicating whether this note is available for Project objects."
          },
          "AvailableForWBS": {
            "type": "boolean",
            "description": "The flag indicating whether this note is available for WBS objects."
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this note was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this note."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this note was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this note."
          },
          "Note": {
            "type": "string",
            "description": "The information that is associated with the notebook topic."
          },
          "NotebookTopicName": {
            "type": "string",
            "description": "The name of the associated notebook topic."
          },
          "NotebookTopicObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated notebook topic.",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "description": "TThe unique ID generated by the system.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project associated with this note."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RawTextNote": {
            "type": "string",
            "description": "The information that is associated with the notebook topic, without any HTML."
          },
          "WBSCode": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification."
          },
          "WBSName": {
            "type": "string",
            "description": "The name of the WBS element associated with this note."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated WBS.",
            "format": "int32"
          }
        },
        "description": "ProjectNote Entity"
      },
      "CreateProjectCodeAssignmentsResponse": {
        "title": "CreateProjectCodeAssignmentsResponse",
        "type": "object",
        "properties": {
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the project to which the project code is assigned.",
            "format": "int32"
          },
          "ProjectCodeTypeObjectId": {
            "type": "integer",
            "description": "The unique ID of the parent project code type.",
            "format": "int32"
          }
        },
        "description": "CreateProjectCodeAssignmentsResponse Entity"
      },
      "StandardWorkHours": {
        "type": "object",
        "properties": {
          "DayOfWeek": {
            "type": "string"
          },
          "WorkTime": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkTime"
            }
          }
        }
      },
      "WBSMilestoneExport": {
        "title": "WBSMilestone",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for WBSMilestone Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for WBSMilestone Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "IS_BASELINE",
                "IS_COMPLETED",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "SEQUENCE_NUMBER",
                "WBS_CODE",
                "WBS_NAME",
                "WBS_OBJECT_ID",
                "WEIGHT"
              ]
            }
          }
        },
        "description": "WBSMilestone Entity"
      },
      "ResourceHour": {
        "title": "ResourceHour",
        "required": [
          "OverheadCodeObjectId",
          "ResourceAssignmentObjectId",
          "ResourceObjectId",
          "TimesheetPeriodObjectId"
        ],
        "type": "object",
        "properties": {
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the resource is assigned.",
            "format": "int32"
          },
          "ActivityTimesheetLinkFlag": {
            "type": "boolean",
            "description": "The value which indicates if the record is a real timesheet entry (false) or simply a placeholder for a timesheet entry (true)."
          },
          "ApprovedHours": {
            "type": "number",
            "description": "The number of hours, approved.",
            "format": "double"
          },
          "ApprovedOvertimeHours": {
            "type": "number",
            "description": "The number of overtime hours, approved.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this data was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this data."
          },
          "Date": {
            "type": "string",
            "description": "The date to which the hours apply.",
            "format": "date-time"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this data was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this data."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OverheadCodeName": {
            "type": "string",
            "description": "The name of the overhead code."
          },
          "OverheadCodeObjectId": {
            "type": "integer",
            "description": "The unique ID of the overhead code, if the hours are for an overhead activity.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ResourceAssignmentObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource assignment.",
            "format": "int32"
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the resource."
          },
          "ResourceIntegratedType": {
            "type": "string",
            "description": "The flag indicating whether the resource is integrated with an Enterprise Resource Planning (ERP) system. 'Fusion' indicates the resource is integrated with Oracle Fusion. 'ERP' indicates the resource is integrated with another ERP system. 'Gateway' indicates the resource is integrated with Oracle Primavera Gateway."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource.",
            "format": "int32"
          },
          "Status": {
            "type": "string",
            "description": "The approval level, when timesheets require approval: 'Submitted', 'Approved', 'Resource Manager Approved', 'Project Manager Approved', 'Active', or 'Rejected'."
          },
          "TimesheetPeriodObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated timesheet.",
            "format": "int32"
          },
          "TimesheetStatusDate": {
            "type": "string",
            "description": "The status date of the associated timesheet.",
            "format": "date-time"
          },
          "UnapprovedHours": {
            "type": "number",
            "description": "The actual non-overtime units submitted by the resource on the activity. These units remain submitted until the timesheet is approved.",
            "format": "double"
          },
          "UnapprovedOvertimeHours": {
            "type": "number",
            "description": "The actual overtime units submitted by the resource on the acitivity. These units remain submitted until the timesheet is approved.",
            "format": "double"
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS for the activity.",
            "format": "int32"
          }
        },
        "description": "ResourceHour Entity"
      },
      "ProjectResourceCategoryExport": {
        "title": "ProjectResourceCategory",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectResourceCategory Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectResourceCategory Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID"
              ]
            }
          }
        },
        "description": "ProjectResourceCategory Entity"
      },
      "ProjectIssue": {
        "title": "ProjectIssue",
        "required": [
          "ActivityObjectId",
          "Name",
          "ProjectObjectId",
          "WBSObjectId"
        ],
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "string",
            "description": "The short ID that uniquely identifies the activity within the project."
          },
          "ActivityName": {
            "type": "string",
            "description": "The name of the activity. The activity name does not have to be unique."
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the project issue applies.",
            "format": "int32"
          },
          "ActualValue": {
            "type": "number",
            "description": "The actual value of the threshold parameter for the project issue. Issues are automatically generated by the threshold monitor when actual values of threshold parameters exceed target values.",
            "format": "double"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this project issue was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this project issue."
          },
          "DateIdentified": {
            "type": "string",
            "description": "The date the project issue was identified.",
            "format": "date-time"
          },
          "IdentifiedBy": {
            "type": "string",
            "description": "The identifier of the project issue. This may be the name of the user who created the project issue or Monitor, if the project issue was automatically generated by the threshold monitor."
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this project issue was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this project issue."
          },
          "LowerThreshold": {
            "type": "number",
            "description": "The lower value of the threshold parameter that triggered the project issue. Issues are triggered when the actual/observed parameters values are less than or equal to the lower threshold.",
            "format": "double"
          },
          "Name": {
            "type": "string",
            "description": "The name of the project issue. Issues which are automatically generated by the threshold monitor are named after the threshold parameter that triggered the project issue."
          },
          "Notes": {
            "type": "string",
            "description": "The notes associated with the project issue."
          },
          "OBSName": {
            "type": "string",
            "description": "The name of the person/role in the organization, sometimes referred to as the \"responsible manager\"."
          },
          "OBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the project manager from the project's OBS tree who is responsible for the project issue.",
            "format": "int32"
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "Priority": {
            "type": "string",
            "description": "The priority of the project issue. Valid values are 'Top', 'High', 'Normal', 'Low', and 'Lowest'."
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the associated project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "ProjectThresholdObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project threshold for the project issue.",
            "format": "int32"
          },
          "RawTextNote": {
            "type": "string",
            "description": "The notes associated with the project issue."
          },
          "ResolutionDate": {
            "type": "string",
            "description": "The date the project issue was resolved.",
            "format": "date-time"
          },
          "ResourceId": {
            "type": "string",
            "description": "The short code that uniquely identifies the resource."
          },
          "ResourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "ResourceObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated resource for this project issue. If a parent resource is selected, the issue applies to all child resources as well.",
            "format": "int32"
          },
          "Status": {
            "type": "string",
            "description": "The current status of the project issue. Valid values are 'Open', 'On Hold', and 'Closed'."
          },
          "ThresholdParameterObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated threshold parameter for the project issue.",
            "format": "int32"
          },
          "UpperThreshold": {
            "type": "number",
            "description": "The upper value of the threshold parameter which triggered the project issue. Issues are triggered when the actual/observed parameters values are greater than or equal to the upper threshold.",
            "format": "double"
          },
          "WBSCode": {
            "type": "string",
            "description": "The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes."
          },
          "WBSName": {
            "type": "string",
            "description": "The name of the WBS element."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS to which the project issue applies. If a parent WBS is selected, the project issue applies to all child elements as well. If the top WBS is selected, the project issue applies to the entire project.",
            "format": "int32"
          }
        },
        "description": "ProjectIssue Entity"
      },
      "ActivityExpense": {
        "title": "ActivityExpense",
        "required": ["ActivityObjectId", "ExpenseItem"],
        "type": "object",
        "properties": {
          "AccrualType": {
            "type": "string",
            "description": "The accrual type for the project expense. If the accrual type is 'Start of Activity', the entire expense costs are accrued at the start date of the activity. If the accrual type is 'End of Activity', the entire expense costs are accrued at the finish date of the activity. If the accrual type is 'Uniform over Activity', the expense costs are accrued uniformly over the duration of the activity."
          },
          "ActivityId": {
            "type": "string",
            "description": "The short ID that uniquely identifies the activity within the project."
          },
          "ActivityName": {
            "type": "string",
            "description": "The name of the activity. The activity name does not have to be unique."
          },
          "ActivityObjectId": {
            "type": "integer",
            "description": "The unique ID of the activity to which the project expense is linked. Every project expense is associated with one activity in the project.",
            "format": "int32"
          },
          "ActualCost": {
            "type": "number",
            "description": "The actual cost for the project expense.",
            "format": "double"
          },
          "ActualUnits": {
            "type": "number",
            "description": "The actual units for the project expense.",
            "format": "double"
          },
          "AtCompletionCost": {
            "type": "number",
            "description": "The sum of the actual plus remaining costs for the project expense. Computed as actual cost + remaining cost.",
            "format": "double"
          },
          "AtCompletionUnits": {
            "type": "number",
            "description": "The at completion units for the project expense.",
            "format": "double"
          },
          "AutoComputeActuals": {
            "type": "boolean",
            "description": "The flag that identifies whether the actual and remaining costs for the expense are computed automatically using the planned cost and the activity's schedule percent complete. If this option is selected, the actual/remaining costs are automatically updated when project actuals are applied. This assumes the expenses are made according to plan."
          },
          "CBSCode": {
            "type": "string",
            "description": "CBS Code."
          },
          "CBSId": {
            "type": "integer",
            "description": "The unique Id of CBS.",
            "format": "int32"
          },
          "CostAccountId": {
            "type": "string",
            "description": "The id of associated cost account."
          },
          "CostAccountName": {
            "type": "string",
            "description": "The name of the associated cost account."
          },
          "CostAccountObjectId": {
            "type": "integer",
            "description": "The unique ID of the cost account associated with the project expense.",
            "format": "int32"
          },
          "CreateDate": {
            "type": "string",
            "description": "The date this expense was created.",
            "format": "date-time"
          },
          "CreateUser": {
            "type": "string",
            "description": "The name of the user that created this expense."
          },
          "DocumentNumber": {
            "type": "string",
            "description": "The document number for the expense. Use this for the purchase order number, invoice number, requisition number, or similar, as needed."
          },
          "ExpenseCategoryName": {
            "type": "string",
            "description": "The name of the expense category."
          },
          "ExpenseCategoryObjectId": {
            "type": "integer",
            "description": "The unique ID of the expense category for the project expense.",
            "format": "int32"
          },
          "ExpenseDescription": {
            "type": "string",
            "description": "The description of the expense."
          },
          "ExpenseItem": {
            "type": "string",
            "description": "The name of the project expense."
          },
          "ExpensePercentComplete": {
            "type": "number",
            "description": "The percent complete of the project expense.",
            "format": "double"
          },
          "IsBaseline": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a Project or Baseline"
          },
          "IsTemplate": {
            "type": "boolean",
            "description": "The boolean value indicating if this business object is related to a template Project."
          },
          "LastUpdateDate": {
            "type": "string",
            "description": "The date this expense was last updated.",
            "format": "date-time"
          },
          "LastUpdateUser": {
            "type": "string",
            "description": "The name of the user that last updated this expense."
          },
          "ObjectId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "OverBudget": {
            "type": "boolean",
            "description": "The indicator that reflects whether the project expense is over budget. An expense is over budget when the actual cost + remaining cost exceeds the planned cost."
          },
          "PlannedCost": {
            "type": "number",
            "description": "The planned cost for the project expense. This field is named BudgetedCost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PlannedUnits": {
            "type": "number",
            "description": "The planned number of units for the project expense. This number is multiplied by the price per unit to compute the planned cost. This field is named BudgetedUnits in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.",
            "format": "double"
          },
          "PricePerUnit": {
            "type": "number",
            "description": "The planned price per unit for the project expense. This number is multiplied by the planned number of units to compute the planned cost.",
            "format": "double"
          },
          "ProjectId": {
            "type": "string",
            "description": "The short code that uniquely identifies the project."
          },
          "ProjectObjectId": {
            "type": "integer",
            "description": "The unique ID of the associated project.",
            "format": "int32"
          },
          "RemainingCost": {
            "type": "number",
            "description": "The remaining cost for the project expense. Before actual expenses are made, remaining cost should be the same as planned cost. While the activity is in progress, the remaining cost should be updated to reflect the estimated remaining cost required for the expense. After the expense is completed, the remaining cost should be zero.",
            "format": "double"
          },
          "RemainingUnits": {
            "type": "number",
            "description": "The remaining units for the project expense.",
            "format": "double"
          },
          "UnitOfMeasure": {
            "type": "string",
            "description": "The unit of measure for the project expense."
          },
          "Vendor": {
            "type": "string",
            "description": "The name of the vendor providing the product or service associated with the expense."
          },
          "WBSObjectId": {
            "type": "integer",
            "description": "The unique ID of the WBS for the activity.",
            "format": "int32"
          }
        },
        "description": "ActivityExpense Entity"
      },
      "JobServiceResponse": {
        "title": "CreateJobServiceResponse",
        "type": "object",
        "properties": {
          "JobId": {
            "type": "string",
            "description": "The unique ID of the associated job."
          },
          "JobStatus": {
            "type": "string",
            "description": "Status of the job."
          }
        },
        "description": "CreateJobServiceResponse Entity"
      },
      "UnitOfMeasureExport": {
        "title": "UnitOfMeasure",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for UnitOfMeasure Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for UnitOfMeasure Business Object",
              "enum": [
                "ABBREVIATION",
                "CREATE_DATE",
                "CREATE_USER",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID",
                "SEQUENCE_NUMBER"
              ]
            }
          }
        },
        "description": "UnitOfMeasure Entity"
      },
      "ReadProjectSpreadResponse": {
        "title": "ReadProjectSpreadResponse",
        "type": "object",
        "properties": {
          "ProjectId": {
            "type": "string"
          },
          "ProjectObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "StartDate": {
            "type": "string"
          },
          "EndDate": {
            "type": "string"
          },
          "PeriodType": {
            "type": "string"
          },
          "Period": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummarizedSpreadPeriod"
            }
          }
        },
        "description": "ReadProjectSpreadResponse Entity"
      },
      "ResourceCurveExport": {
        "title": "ResourceCurve",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ResourceCurve Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ResourceCurve Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "IS_DEFAULT",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "NAME",
                "OBJECT_ID"
              ]
            }
          }
        },
        "description": "ResourceCurve Entity"
      },
      "ActivityPeriodActualExport": {
        "title": "ActivityPeriodActual",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ActivityPeriodActual Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ActivityPeriodActual Business Object",
              "enum": [
                "ACTIVITY_OBJECT_ID",
                "ACTUAL_EXPENSE_COST",
                "ACTUAL_LABOR_COST",
                "ACTUAL_LABOR_UNITS",
                "ACTUAL_MATERIAL_COST",
                "ACTUAL_NON_LABOR_COST",
                "ACTUAL_NON_LABOR_UNITS",
                "CREATE_DATE",
                "CREATE_USER",
                "EARNED_VALUE_COST",
                "EARNED_VALUE_LABOR_UNITS",
                "FINANCIAL_PERIOD_OBJECT_ID",
                "FINANCIAL_PERIOD_TEMPLATE_ID",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "PLANNED_VALUE_COST",
                "PLANNED_VALUE_LABOR_UNITS",
                "PROJECT_OBJECT_ID",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ActivityPeriodActual Entity"
      },
      "ActivityFilter": {
        "title": "ActivityFilter",
        "required": ["ActivityFilterId", "ActivityFilterName"],
        "type": "object",
        "properties": {
          "ActivityFilterId": {
            "type": "integer",
            "description": "The unique ID generated by the system.",
            "format": "int32"
          },
          "ActivityFilterName": {
            "type": "string",
            "description": "The name of the Activity Filter."
          },
          "FilterCriteria": {
            "type": "string",
            "description": "Filter criteria for Activity Filter."
          },
          "FilterCriteriaConfig": {
            "type": "string"
          },
          "FilterType": {
            "type": "string"
          },
          "UserId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "ActivityFilter Entity"
      },
      "ProjectThresholdExport": {
        "title": "ProjectThreshold",
        "type": "object",
        "properties": {
          "Include": {
            "type": "boolean",
            "description": "Boolean flag that indicates whether the associated object is to be exported. The default value of the Include element is true. To exclude a business object from the XML export file, specify false in the Include element for that business object."
          },
          "Field": {
            "type": "array",
            "description": "List of Fields for ProjectThreshold Business Object",
            "items": {
              "type": "string",
              "description": "List of Fields for ProjectThreshold Business Object",
              "enum": [
                "CREATE_DATE",
                "CREATE_USER",
                "DETAIL_TO_MONITOR",
                "FROM_DATE",
                "FROM_DATE_EXPRESSION",
                "IS_BASELINE",
                "IS_TEMPLATE",
                "ISSUE_PRIORITY",
                "LAST_UPDATE_DATE",
                "LAST_UPDATE_USER",
                "LOWER_THRESHOLD",
                "OBS_OBJECT_ID",
                "OBJECT_ID",
                "PROJECT_ID",
                "PROJECT_OBJECT_ID",
                "STATUS",
                "THRESHOLD_PARAMETER_OBJECT_ID",
                "TO_DATE",
                "TO_DATE_EXPRESSION",
                "UPPER_THRESHOLD",
                "WBS_CODE",
                "WBS_NAME",
                "WBS_OBJECT_ID"
              ]
            }
          }
        },
        "description": "ProjectThreshold Entity"
      },
      "Privilege": {
        "type": "object",
        "properties": {
          "Has": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          }
        },
        "description": "Privilege"
      }
    }
  }
}
