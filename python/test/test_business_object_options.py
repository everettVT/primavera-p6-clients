# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.business_object_options import BusinessObjectOptions

class TestBusinessObjectOptions(unittest.TestCase):
    """BusinessObjectOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BusinessObjectOptions:
        """Test BusinessObjectOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BusinessObjectOptions`
        """
        model = BusinessObjectOptions()
        if include_optional:
            return BusinessObjectOptions(
                activity = openapi_client.models.activity.Activity(
                    include = True, 
                    field = [
                        'ACCOUNTING_VARIANCE'
                        ], ),
                activity_code = openapi_client.models.activity_code_export.ActivityCodeExport(
                    include = True, 
                    field = [
                        'CODE_CONCAT_NAME'
                        ], ),
                activity_code_assignment = openapi_client.models.activity_code_assignment.ActivityCodeAssignment(
                    include = True, ),
                activity_code_type = openapi_client.models.activity.Activity(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                activity_expense = openapi_client.models.activity_expense.ActivityExpense(
                    include = True, 
                    field = [
                        'ACCRUAL_TYPE'
                        ], ),
                activity_note = openapi_client.models.activity_note.ActivityNote(
                    include = True, 
                    field = [
                        'ACTIVITY_ID'
                        ], ),
                activity_period_actual = openapi_client.models.activity_period_actual.ActivityPeriodActual(
                    include = True, 
                    field = [
                        'ACTIVITY_OBJECT_ID'
                        ], ),
                activity_risk = openapi_client.models.activity_risk.ActivityRisk(
                    include = True, 
                    field = [
                        'ACTIVITY_ID'
                        ], ),
                activity_step = openapi_client.models.activity_step.ActivityStep(
                    include = True, 
                    field = [
                        'ACTIVITY_ID'
                        ], ),
                calendar = openapi_client.models.calendar.Calendar(
                    include = True, 
                    field = [
                        'BASE_CALENDAR_OBJECT_ID'
                        ], ),
                cost_account = openapi_client.models.cost_account.CostAccount(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                currency = openapi_client.models.currency.Currency(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                document = openapi_client.models.document.Document(
                    include = True, 
                    field = [
                        'ACTIVITY_OBJECT_ID'
                        ], ),
                document_category = openapi_client.models.document_category.DocumentCategory(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                document_status_code = openapi_client.models.document_status_code.DocumentStatusCode(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                eps = openapi_client.models.eps.EPS(
                    include = True, 
                    field = [
                        'ANTICIPATED_FINISH_DATE'
                        ], ),
                expense_category = openapi_client.models.expense_category.ExpenseCategory(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                financial_period = openapi_client.models.financial_period.FinancialPeriod(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                funding_source = openapi_client.models.funding_source.FundingSource(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                notebook_topic = openapi_client.models.notebook_topic.NotebookTopic(
                    include = True, 
                    field = [
                        'AVAILABLE_FOR_ACTIVITY'
                        ], ),
                obs = openapi_client.models.obs.OBS(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                project = openapi_client.models.project.Project(
                    include = True, 
                    field = [
                        'ACTIVITY_DEFAULT_ACTIVITY_TYPE'
                        ], ),
                project_budget_change_log = openapi_client.models.project_budget_change_log.ProjectBudgetChangeLog(
                    include = True, 
                    field = [
                        'AMOUNT'
                        ], ),
                project_code = openapi_client.models.project_code.ProjectCode(
                    include = True, 
                    field = [
                        'CODE_TYPE_NAME'
                        ], ),
                project_code_assignment = openapi_client.models.project_code_assignment.ProjectCodeAssignment(
                    include = True, ),
                project_code_type = openapi_client.models.project_code_type.ProjectCodeType(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                project_document = openapi_client.models.project_document.ProjectDocument(
                    include = True, 
                    field = [
                        'ACTIVITY_ID'
                        ], ),
                project_funding = openapi_client.models.project_funding.ProjectFunding(
                    include = True, 
                    field = [
                        'AMOUNT'
                        ], ),
                project_issue = openapi_client.models.project_issue.ProjectIssue(
                    include = True, 
                    field = [
                        'ACTIVITY_ID'
                        ], ),
                project_note = openapi_client.models.project_note.ProjectNote(
                    include = True, 
                    field = [
                        'AVAILABLE_FOR_ACTIVITY'
                        ], ),
                project_resource = openapi_client.models.project_resource.ProjectResource(
                    include = True, 
                    field = [
                        'COMMITTED_FLAG'
                        ], ),
                project_resource_category = openapi_client.models.project_resource_category.ProjectResourceCategory(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                project_resource_quantity = openapi_client.models.project_resource_quantity.ProjectResourceQuantity(
                    include = True, 
                    field = [
                        'COMMITTED_FLAG'
                        ], ),
                project_spending_plan = openapi_client.models.project_spending_plan.ProjectSpendingPlan(
                    include = True, 
                    field = [
                        'BENEFIT_PLAN'
                        ], ),
                project_threshold = openapi_client.models.project_threshold.ProjectThreshold(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                relationship = openapi_client.models.relationship.Relationship(
                    include = True, 
                    field = [
                        'AREF'
                        ], ),
                resource = openapi_client.models.resource.Resource(
                    include = True, 
                    field = [
                        'AUTO_COMPUTE_ACTUALS'
                        ], ),
                resource_assignment = openapi_client.models.resource_assignment.ResourceAssignment(
                    include = True, 
                    field = [
                        'ACTIVITY_ACTUAL_FINISH'
                        ], ),
                resource_assignment_period_actual = openapi_client.models.resource_assignment_period_actual.ResourceAssignmentPeriodActual(
                    include = True, 
                    field = [
                        'ACTIVITY_OBJECT_ID'
                        ], ),
                resource_code = openapi_client.models.resource_code.ResourceCode(
                    include = True, 
                    field = [
                        'CODE_CONCAT_NAME'
                        ], ),
                resource_code_assignment = openapi_client.models.resource_code_assignment.ResourceCodeAssignment(
                    include = True, ),
                resource_code_type = openapi_client.models.resource_code_type.ResourceCodeType(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                role_code = openapi_client.models.role_code.RoleCode(
                    include = True, 
                    field = [
                        'CODE_TYPE_NAME'
                        ], ),
                role_code_assignment = openapi_client.models.role_code_assignment.RoleCodeAssignment(
                    include = True, ),
                role_code_type = openapi_client.models.role_code_type.RoleCodeType(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                resource_curve = openapi_client.models.resource_curve.ResourceCurve(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                resource_rate = openapi_client.models.resource_rate.ResourceRate(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                resource_role = openapi_client.models.resource_role.ResourceRole(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                risk = openapi_client.models.risk.Risk(
                    include = True, 
                    field = [
                        'CAUSE'
                        ], ),
                risk_category = openapi_client.models.risk_category.RiskCategory(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                risk_impact = openapi_client.models.risk_impact.RiskImpact(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                risk_matrix_score = openapi_client.models.risk_matrix_score.RiskMatrixScore(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                risk_matrix_threshold = openapi_client.models.risk_matrix_threshold.RiskMatrixThreshold(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                risk_response_action = openapi_client.models.risk_response_action.RiskResponseAction(
                    include = True, 
                    field = [
                        'ACTIVITY_ID'
                        ], ),
                risk_response_action_impact = openapi_client.models.risk_response_action_impact.RiskResponseActionImpact(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                risk_response_plan = openapi_client.models.risk_response_plan.RiskResponsePlan(
                    include = True, 
                    field = [
                        'ACTUAL_COST'
                        ], ),
                risk_matrix = openapi_client.models.risk_matrix.RiskMatrix(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                risk_threshold_level = openapi_client.models.risk_threshold_level.RiskThresholdLevel(
                    include = True, 
                    field = [
                        'CODE'
                        ], ),
                risk_threshold = openapi_client.models.risk_threshold.RiskThreshold(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                role = openapi_client.models.role.Role(
                    include = True, 
                    field = [
                        'CALCULATE_COST_FROM_UNITS'
                        ], ),
                role_rate = openapi_client.models.role_rate.RoleRate(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                role_limit = openapi_client.models.role_limit.RoleLimit(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                shift = openapi_client.models.shift.Shift(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                threshold_parameter = openapi_client.models.threshold_parameter.ThresholdParameter(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                udf_code = openapi_client.models.udf_code.UDFCode(
                    include = True, 
                    field = [
                        'CODE_TYPE_OBJECT_ID'
                        ], ),
                udf_type = openapi_client.models.udf_type.UDFType(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                udf_value = openapi_client.models.udf_value.UDFValue(
                    include = True, ),
                unit_of_measure = openapi_client.models.unit_of_measure.UnitOfMeasure(
                    include = True, 
                    field = [
                        'ABBREVIATION'
                        ], ),
                wbs = openapi_client.models.wbs.WBS(
                    include = True, 
                    field = [
                        'ANTICIPATED_FINISH_DATE'
                        ], ),
                wbs_category = openapi_client.models.wbs_category.WBSCategory(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], ),
                wbs_milestone = openapi_client.models.wbs_milestone.WBSMilestone(
                    include = True, 
                    field = [
                        'CREATE_DATE'
                        ], )
            )
        else:
            return BusinessObjectOptions(
        )
        """

    def testBusinessObjectOptions(self):
        """Test BusinessObjectOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
