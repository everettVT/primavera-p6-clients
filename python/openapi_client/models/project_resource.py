# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_request import ResourceRequest
from typing import Optional, Set
from typing_extensions import Self

class ProjectResource(BaseModel):
    """
    ProjectResource Entity
    """ # noqa: E501
    committed_flag: Optional[StrictBool] = Field(default=None, description="The Boolean value that determines whether a resource is committed, and so, the resource assignment is stable and unlikely to change. When calculating availability, Primavera considers only assignments that are marked as committed.", alias="CommittedFlag")
    create_date: Optional[datetime] = Field(default=None, description="The date this project resource was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this project resource.", alias="CreateUser")
    finish_date: Optional[datetime] = Field(default=None, description="The finish date of the assignment. By default, it is set to the Planned Start date of the project + 1 day, finishing at 5:00pm. For example, if the planned start date is January 1, 8:00am, the finish date is set to January 2, 5:00pm. If LifeOfProjectFlag is set to true during creation, this date is set to the Project Scheduled Finish date. If associated ProjectResourceQuantities exist, this field is set to the end of the week of the latest ProjectResourceQuantity.", alias="FinishDate")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline", alias="IsBaseline")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this project resource was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this project resource.", alias="LastUpdateUser")
    life_of_project_flag: Optional[StrictBool] = Field(default=None, description="The Boolean value that determines whether a resource that is assigned to a project at Project or WBS level, has that assignment for the duration of the project.", alias="LifeOfProjectFlag")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    project_id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the associated project.", alias="ProjectId")
    project_object_id: StrictInt = Field(description="The unique ID of the associated project.", alias="ProjectObjectId")
    project_resource_category_name: Optional[StrictStr] = Field(default=None, description="The name of the associated project resource category.", alias="ProjectResourceCategoryName")
    project_resource_category_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project resource category.", alias="ProjectResourceCategoryObjectId")
    resource_name: Optional[StrictStr] = Field(default=None, description="The name of the associated resource.", alias="ResourceName")
    resource_object_id: StrictInt = Field(description="The unique ID of the associated resource.", alias="ResourceObjectId")
    role_name: Optional[StrictStr] = Field(default=None, description="The name of the associated role.", alias="RoleName")
    role_object_id: StrictInt = Field(description="The unique ID of the associated role.", alias="RoleObjectId")
    start_date: Optional[datetime] = Field(default=None, description="The start date of the assignment. By default, it is set to the Planned Start date of the project. If LifeOfProjectFlag is set to true, this date is set to the Project Planned Start date. If associated ProjectResourceQuantities exist, this field is set to the beginning of the week of the earliest ProjectResourceQuantity.", alias="StartDate")
    status: Optional[StrictStr] = Field(default=None, description="The project or WBS status: 'Planned', 'Active', 'Inactive', 'What-If', or 'Requested'.", alias="Status")
    wbs_code: Optional[StrictStr] = Field(default=None, description="The short code assigned to the associated WBS element for identification.", alias="WBSCode")
    wbs_object_id: StrictInt = Field(description="The unique ID of the associated WBS.", alias="WBSObjectId")
    resource_request: Optional[ResourceRequest] = Field(default=None, alias="ResourceRequest")
    __properties: ClassVar[List[str]] = ["CommittedFlag", "CreateDate", "CreateUser", "FinishDate", "IsBaseline", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "LifeOfProjectFlag", "ObjectId", "ProjectId", "ProjectObjectId", "ProjectResourceCategoryName", "ProjectResourceCategoryObjectId", "ResourceName", "ResourceObjectId", "RoleName", "RoleObjectId", "StartDate", "Status", "WBSCode", "WBSObjectId", "ResourceRequest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource_request
        if self.resource_request:
            _dict['ResourceRequest'] = self.resource_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommittedFlag": obj.get("CommittedFlag"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "FinishDate": obj.get("FinishDate"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "LifeOfProjectFlag": obj.get("LifeOfProjectFlag"),
            "ObjectId": obj.get("ObjectId"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "ProjectResourceCategoryName": obj.get("ProjectResourceCategoryName"),
            "ProjectResourceCategoryObjectId": obj.get("ProjectResourceCategoryObjectId"),
            "ResourceName": obj.get("ResourceName"),
            "ResourceObjectId": obj.get("ResourceObjectId"),
            "RoleName": obj.get("RoleName"),
            "RoleObjectId": obj.get("RoleObjectId"),
            "StartDate": obj.get("StartDate"),
            "Status": obj.get("Status"),
            "WBSCode": obj.get("WBSCode"),
            "WBSObjectId": obj.get("WBSObjectId"),
            "ResourceRequest": ResourceRequest.from_dict(obj["ResourceRequest"]) if obj.get("ResourceRequest") is not None else None
        })
        return _obj


