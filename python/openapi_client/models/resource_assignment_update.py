# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ResourceAssignmentUpdate(BaseModel):
    """
    ResourceAssignmentUpdate Entity
    """ # noqa: E501
    activity_object_id: Optional[StrictInt] = Field(default=None, description="The name of the Contract Management Group.", alias="ActivityObjectId")
    all_data: Optional[StrictStr] = Field(default=None, description="The unique ID of the activity to which the activity code is assigned.", alias="AllData")
    approval_date: Optional[datetime] = Field(default=None, description="The date that the activity was approved.", alias="ApprovalDate")
    approval_user_name: Optional[StrictStr] = Field(default=None, description="The username of the approved user.", alias="ApprovalUserName")
    approval_user_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system for the approved user.", alias="ApprovalUserObjectId")
    calendar_id: Optional[StrictInt] = Field(default=None, alias="CalendarId")
    change_set_object_id: StrictInt = Field(description="The unique ID generated by the system for the change set object.", alias="ChangeSetObjectId")
    create_user: Optional[StrictStr] = Field(default=None, alias="CreateUser")
    var_date: Optional[datetime] = Field(default=None, description="The date of the resource assignment update.", alias="Date")
    held_date: Optional[datetime] = Field(default=None, description="The date of the held resource assignment.", alias="HeldDate")
    override_actual_finish_date: Optional[datetime] = Field(default=None, description="The actual finish date for an override activity.", alias="OverrideActualFinishDate")
    override_actual_start_date: Optional[datetime] = Field(default=None, description="The actual start date for an override activity.", alias="OverrideActualStartDate")
    override_actual_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of units for an override activity.", alias="OverrideActualUnits")
    override_remaining_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The remaining duration for an override activity.", alias="OverrideRemainingDuration")
    override_remaining_finish_date: Optional[datetime] = Field(default=None, description="The date that the override activity finishes.", alias="OverrideRemainingFinishDate")
    override_remaining_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The overridden new remaining units of work to be performed by this resource on this activity.", alias="OverrideRemainingUnits")
    pending_actual_finish_date: Optional[datetime] = Field(default=None, description="The date on which the pending activity actually finishes if approval is required.", alias="PendingActualFinishDate")
    pending_actual_start_date: Optional[datetime] = Field(default=None, description="The date on which the pending activity actually starts if approval is required.", alias="PendingActualStartDate")
    pending_actual_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The actual number of units associated with the the pending activity if approval is required.", alias="PendingActualUnits")
    pending_remaining_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The remaining duration that is required to finish a pending activity if approval is required.", alias="PendingRemainingDuration")
    pending_remaining_finish_date: Optional[datetime] = Field(default=None, description="The remaining finish date of a pending activity if approval is required.", alias="PendingRemainingFinishDate")
    pending_remaining_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The remaining number of units associated with a pending activity if approval is required.", alias="PendingRemainingUnits")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    rejected_by: Optional[StrictStr] = Field(default=None, alias="RejectedBy")
    rejected_date: Optional[datetime] = Field(default=None, alias="RejectedDate")
    request_user_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the user modifying the task, assignment, or step.", alias="RequestUserObjectId")
    resource_assignment_object_id: StrictInt = Field(description="The unique identifier for the ResourceAssignment. You can specify one or more ResourceAssignmentObjectID.", alias="ResourceAssignmentObjectId")
    resubmitted_by: Optional[StrictStr] = Field(default=None, alias="ResubmittedBy")
    resubmitted_date: Optional[datetime] = Field(default=None, alias="ResubmittedDate")
    status: Optional[StrictStr] = Field(default=None, description="The status of this budget change request. Possible values are 'Pending', 'Held', and 'Approved'.", alias="Status")
    __properties: ClassVar[List[str]] = ["ActivityObjectId", "AllData", "ApprovalDate", "ApprovalUserName", "ApprovalUserObjectId", "CalendarId", "ChangeSetObjectId", "CreateUser", "Date", "HeldDate", "OverrideActualFinishDate", "OverrideActualStartDate", "OverrideActualUnits", "OverrideRemainingDuration", "OverrideRemainingFinishDate", "OverrideRemainingUnits", "PendingActualFinishDate", "PendingActualStartDate", "PendingActualUnits", "PendingRemainingDuration", "PendingRemainingFinishDate", "PendingRemainingUnits", "ProjectObjectId", "RejectedBy", "RejectedDate", "RequestUserObjectId", "ResourceAssignmentObjectId", "ResubmittedBy", "ResubmittedDate", "Status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceAssignmentUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceAssignmentUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivityObjectId": obj.get("ActivityObjectId"),
            "AllData": obj.get("AllData"),
            "ApprovalDate": obj.get("ApprovalDate"),
            "ApprovalUserName": obj.get("ApprovalUserName"),
            "ApprovalUserObjectId": obj.get("ApprovalUserObjectId"),
            "CalendarId": obj.get("CalendarId"),
            "ChangeSetObjectId": obj.get("ChangeSetObjectId"),
            "CreateUser": obj.get("CreateUser"),
            "Date": obj.get("Date"),
            "HeldDate": obj.get("HeldDate"),
            "OverrideActualFinishDate": obj.get("OverrideActualFinishDate"),
            "OverrideActualStartDate": obj.get("OverrideActualStartDate"),
            "OverrideActualUnits": obj.get("OverrideActualUnits"),
            "OverrideRemainingDuration": obj.get("OverrideRemainingDuration"),
            "OverrideRemainingFinishDate": obj.get("OverrideRemainingFinishDate"),
            "OverrideRemainingUnits": obj.get("OverrideRemainingUnits"),
            "PendingActualFinishDate": obj.get("PendingActualFinishDate"),
            "PendingActualStartDate": obj.get("PendingActualStartDate"),
            "PendingActualUnits": obj.get("PendingActualUnits"),
            "PendingRemainingDuration": obj.get("PendingRemainingDuration"),
            "PendingRemainingFinishDate": obj.get("PendingRemainingFinishDate"),
            "PendingRemainingUnits": obj.get("PendingRemainingUnits"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "RejectedBy": obj.get("RejectedBy"),
            "RejectedDate": obj.get("RejectedDate"),
            "RequestUserObjectId": obj.get("RequestUserObjectId"),
            "ResourceAssignmentObjectId": obj.get("ResourceAssignmentObjectId"),
            "ResubmittedBy": obj.get("ResubmittedBy"),
            "ResubmittedDate": obj.get("ResubmittedDate"),
            "Status": obj.get("Status")
        })
        return _obj


