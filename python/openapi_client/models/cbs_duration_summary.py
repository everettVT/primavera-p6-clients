# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CBSDurationSummary(BaseModel):
    """
    CBSDurationSummary Entity
    """ # noqa: E501
    cbs_object_id: StrictInt = Field(description="The internal CBS ID of the project. This ID cannot be used to load the CBS object directly.", alias="CBSObjectId")
    original_project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the project from which the project baseline was created, if the current project is a project baseline", alias="OriginalProjectObjectId")
    project_id: StrictStr = Field(description="The short code of the associated project.", alias="ProjectId")
    project_name: Optional[StrictStr] = Field(default=None, description="The name of the associated project.", alias="ProjectName")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    summary_actual_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The actual duration.", alias="SummaryActualDuration")
    summary_actual_finish_date: Optional[datetime] = Field(default=None, description="The latest actual finish date of all activities in the CBS.", alias="SummaryActualFinishDate")
    summary_actual_start_date: Optional[datetime] = Field(default=None, description="The earliest actual start date of all activities in the CBS.", alias="SummaryActualStartDate")
    summary_percent_complete: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The measure that indicates how much of the CBS baseline duration has been completed so far. Computed based on where the current data date falls between the activity's baseline start and finish dates. If the data date is earlier than the baseline start, the schedule % complete is 0. If the data date is later than the baseline finish, the schedule % complete is 100. The schedule % complete indicates how much of the CBS duration should be currently completed, relative to the selected baseline.", alias="SummaryPercentComplete")
    summary_planned_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total working days between planned start and finish dates in the CBS.", alias="SummaryPlannedDuration")
    summary_planned_finish_date: Optional[datetime] = Field(default=None, description="The latest planned finish date of all activities in the CBS.", alias="SummaryPlannedFinishDate")
    summary_planned_start_date: Optional[datetime] = Field(default=None, description="The earliest planned start date of all activities in the CBS.", alias="SummaryPlannedStartDate")
    summary_remaining_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total working time from the CBS remaining start date to the remaining finish date.", alias="SummaryRemainingDuration")
    summary_remaining_finish_date: Optional[datetime] = Field(default=None, description="The date the resource is scheduled to finish the remaining work for the activity.", alias="SummaryRemainingFinishDate")
    summary_remaining_start_date: Optional[datetime] = Field(default=None, description="The earliest remaining start of all activities assigned to the CBS.", alias="SummaryRemainingStartDate")
    __properties: ClassVar[List[str]] = ["CBSObjectId", "OriginalProjectObjectId", "ProjectId", "ProjectName", "ProjectObjectId", "SummaryActualDuration", "SummaryActualFinishDate", "SummaryActualStartDate", "SummaryPercentComplete", "SummaryPlannedDuration", "SummaryPlannedFinishDate", "SummaryPlannedStartDate", "SummaryRemainingDuration", "SummaryRemainingFinishDate", "SummaryRemainingStartDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CBSDurationSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CBSDurationSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CBSObjectId": obj.get("CBSObjectId"),
            "OriginalProjectObjectId": obj.get("OriginalProjectObjectId"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectName": obj.get("ProjectName"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "SummaryActualDuration": obj.get("SummaryActualDuration"),
            "SummaryActualFinishDate": obj.get("SummaryActualFinishDate"),
            "SummaryActualStartDate": obj.get("SummaryActualStartDate"),
            "SummaryPercentComplete": obj.get("SummaryPercentComplete"),
            "SummaryPlannedDuration": obj.get("SummaryPlannedDuration"),
            "SummaryPlannedFinishDate": obj.get("SummaryPlannedFinishDate"),
            "SummaryPlannedStartDate": obj.get("SummaryPlannedStartDate"),
            "SummaryRemainingDuration": obj.get("SummaryRemainingDuration"),
            "SummaryRemainingFinishDate": obj.get("SummaryRemainingFinishDate"),
            "SummaryRemainingStartDate": obj.get("SummaryRemainingStartDate")
        })
        return _obj


