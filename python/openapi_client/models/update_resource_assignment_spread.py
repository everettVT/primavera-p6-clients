# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_assignment_spread import ResourceAssignmentSpread
from typing import Optional, Set
from typing_extensions import Self

class UpdateResourceAssignmentSpread(BaseModel):
    """
    UpdateResourceAssignmentSpread Entity
    """ # noqa: E501
    period_type: Optional[StrictStr] = Field(default=None, description="Spread period type enumerations are used to specify the spread interval for EPS, project, WBS, Activity, and resource assignment spreads.", alias="PeriodType")
    resource_assignment_spread: Optional[List[ResourceAssignmentSpread]] = Field(default=None, description="The live resource assignment spread data.", alias="ResourceAssignmentSpread")
    __properties: ClassVar[List[str]] = ["PeriodType", "ResourceAssignmentSpread"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateResourceAssignmentSpread from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resource_assignment_spread (list)
        _items = []
        if self.resource_assignment_spread:
            for _item_resource_assignment_spread in self.resource_assignment_spread:
                if _item_resource_assignment_spread:
                    _items.append(_item_resource_assignment_spread.to_dict())
            _dict['ResourceAssignmentSpread'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateResourceAssignmentSpread from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PeriodType": obj.get("PeriodType"),
            "ResourceAssignmentSpread": [ResourceAssignmentSpread.from_dict(_item) for _item in obj["ResourceAssignmentSpread"]] if obj.get("ResourceAssignmentSpread") is not None else None
        })
        return _obj


