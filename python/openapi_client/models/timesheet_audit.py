# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TimesheetAudit(BaseModel):
    """
    TimesheetAudit Entity
    """ # noqa: E501
    approver_user_name: Optional[StrictStr] = Field(default=None, description="The user name of the approver.", alias="ApproverUserName")
    approver_user_object_id: Optional[StrictInt] = Field(default=None, description="The unique user ID of the approver.", alias="ApproverUserObjectId")
    audit_date: Optional[datetime] = Field(default=None, description="The date this timesheet audit was created.", alias="AuditDate")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    overhead_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total overhead hours for the timesheet.", alias="OverheadHours")
    overhead_overtime_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total overhead overtime hours for the timesheet.", alias="OverheadOvertimeHours")
    pending_overhead_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total pending overhead hours for the timesheet.", alias="PendingOverheadHours")
    pending_overhead_overtime_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total pending overhead overtime hours for the timesheet.", alias="PendingOverheadOvertimeHours")
    pending_project_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total pending project hours for the timesheet.", alias="PendingProjectHours")
    pending_project_overtime_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total pending project overtime hours for the timesheet", alias="PendingProjectOvertimeHours")
    project_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total project hours for the timesheet.", alias="ProjectHours")
    project_id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the project.", alias="ProjectId")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    project_overtime_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total project overtime hours for the timesheet.", alias="ProjectOvertimeHours")
    resource_id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the resource.", alias="ResourceId")
    resource_name: Optional[StrictStr] = Field(default=None, description="The name of the resource.", alias="ResourceName")
    resource_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated resource.", alias="ResourceObjectId")
    timesheet_activity_status: Optional[StrictStr] = Field(default=None, description="The status of the timesheet activity, the value of which will depend on who approved or rejected it. Valid values are 'Submitted', 'Approved', 'Resource Manager Approved', 'Project Manager Approved', and 'Rejected'.", alias="TimesheetActivityStatus")
    timesheet_approving_as: Optional[StrictStr] = Field(default=None, description="The role of the timesheet approver. Valid values are 'Project Manager', 'Resource Manager', 'Project Manager Delegate', and 'Resource Manager Delegate'.", alias="TimesheetApprovingAs")
    timesheet_period_end_date: Optional[datetime] = Field(default=None, description="The timesheet period end date.", alias="TimesheetPeriodEndDate")
    timesheet_period_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the timesheet period.", alias="TimesheetPeriodObjectId")
    timesheet_period_start_date: Optional[datetime] = Field(default=None, description="The timesheet period start date.", alias="TimesheetPeriodStartDate")
    timesheet_status: Optional[StrictStr] = Field(default=None, description="The status of the timesheet. Valid values are 'Submitted', 'Approved', 'Resource Manager Approved', 'Project Manager Approved', and 'Rejected'.", alias="TimesheetStatus")
    __properties: ClassVar[List[str]] = ["ApproverUserName", "ApproverUserObjectId", "AuditDate", "ObjectId", "OverheadHours", "OverheadOvertimeHours", "PendingOverheadHours", "PendingOverheadOvertimeHours", "PendingProjectHours", "PendingProjectOvertimeHours", "ProjectHours", "ProjectId", "ProjectObjectId", "ProjectOvertimeHours", "ResourceId", "ResourceName", "ResourceObjectId", "TimesheetActivityStatus", "TimesheetApprovingAs", "TimesheetPeriodEndDate", "TimesheetPeriodObjectId", "TimesheetPeriodStartDate", "TimesheetStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimesheetAudit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimesheetAudit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApproverUserName": obj.get("ApproverUserName"),
            "ApproverUserObjectId": obj.get("ApproverUserObjectId"),
            "AuditDate": obj.get("AuditDate"),
            "ObjectId": obj.get("ObjectId"),
            "OverheadHours": obj.get("OverheadHours"),
            "OverheadOvertimeHours": obj.get("OverheadOvertimeHours"),
            "PendingOverheadHours": obj.get("PendingOverheadHours"),
            "PendingOverheadOvertimeHours": obj.get("PendingOverheadOvertimeHours"),
            "PendingProjectHours": obj.get("PendingProjectHours"),
            "PendingProjectOvertimeHours": obj.get("PendingProjectOvertimeHours"),
            "ProjectHours": obj.get("ProjectHours"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "ProjectOvertimeHours": obj.get("ProjectOvertimeHours"),
            "ResourceId": obj.get("ResourceId"),
            "ResourceName": obj.get("ResourceName"),
            "ResourceObjectId": obj.get("ResourceObjectId"),
            "TimesheetActivityStatus": obj.get("TimesheetActivityStatus"),
            "TimesheetApprovingAs": obj.get("TimesheetApprovingAs"),
            "TimesheetPeriodEndDate": obj.get("TimesheetPeriodEndDate"),
            "TimesheetPeriodObjectId": obj.get("TimesheetPeriodObjectId"),
            "TimesheetPeriodStartDate": obj.get("TimesheetPeriodStartDate"),
            "TimesheetStatus": obj.get("TimesheetStatus")
        })
        return _obj


