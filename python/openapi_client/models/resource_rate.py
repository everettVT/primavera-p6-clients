# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ResourceRate(BaseModel):
    """
    ResourceRate Entity
    """ # noqa: E501
    create_date: Optional[datetime] = Field(default=None, description="The date this resource rate was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this resource rate.", alias="CreateUser")
    effective_date: Optional[datetime] = Field(default=None, description="The effective date for the resource price and maximum units per time.", alias="EffectiveDate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this resource rate was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this resource rate.", alias="LastUpdateUser")
    max_units_per_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum work units per time this resource can perform on all their assigned activities. For example, a person working full time could perform 8 hours of work per day. A department of five people may perform at 5 days per day.", alias="MaxUnitsPerTime")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    price_per_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.", alias="PricePerUnit")
    price_per_unit2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.", alias="PricePerUnit2")
    price_per_unit3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.", alias="PricePerUnit3")
    price_per_unit4: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.", alias="PricePerUnit4")
    price_per_unit5: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The non-overtime price per time for the resource. This price is used to compute costs for any activities the resource is assigned to. In general, cost = units * price per time.", alias="PricePerUnit5")
    resource_id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the resource.", alias="ResourceId")
    resource_name: Optional[StrictStr] = Field(default=None, description="The name of the resource.", alias="ResourceName")
    resource_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated resource.", alias="ResourceObjectId")
    shift_period_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated shift.", alias="ShiftPeriodObjectId")
    __properties: ClassVar[List[str]] = ["CreateDate", "CreateUser", "EffectiveDate", "LastUpdateDate", "LastUpdateUser", "MaxUnitsPerTime", "ObjectId", "PricePerUnit", "PricePerUnit2", "PricePerUnit3", "PricePerUnit4", "PricePerUnit5", "ResourceId", "ResourceName", "ResourceObjectId", "ShiftPeriodObjectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceRate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceRate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "EffectiveDate": obj.get("EffectiveDate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "MaxUnitsPerTime": obj.get("MaxUnitsPerTime"),
            "ObjectId": obj.get("ObjectId"),
            "PricePerUnit": obj.get("PricePerUnit"),
            "PricePerUnit2": obj.get("PricePerUnit2"),
            "PricePerUnit3": obj.get("PricePerUnit3"),
            "PricePerUnit4": obj.get("PricePerUnit4"),
            "PricePerUnit5": obj.get("PricePerUnit5"),
            "ResourceId": obj.get("ResourceId"),
            "ResourceName": obj.get("ResourceName"),
            "ResourceObjectId": obj.get("ResourceObjectId"),
            "ShiftPeriodObjectId": obj.get("ShiftPeriodObjectId")
        })
        return _obj


