# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Role(BaseModel):
    """
    Role Entity
    """ # noqa: E501
    calculate_cost_from_units: Optional[StrictBool] = Field(default=None, description="The option that indicates whether costs and quantities are linked, and whether quantities should be updated when costs are updated.", alias="CalculateCostFromUnits")
    create_date: Optional[datetime] = Field(default=None, description="The date this role was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this role.", alias="CreateUser")
    id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the role.", alias="Id")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this role was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this role.", alias="LastUpdateUser")
    name: Optional[StrictStr] = Field(default=None, description="The name of the role. The role name uniquely identifies the role.", alias="Name")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    parent_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the parent role of this role in the hierarchy.", alias="ParentObjectId")
    responsibilities: Optional[StrictStr] = Field(default=None, description="The responsibilities for the role.", alias="Responsibilities")
    sequence_number: Optional[StrictInt] = Field(default=None, description="The sequence number for sorting.", alias="SequenceNumber")
    __properties: ClassVar[List[str]] = ["CalculateCostFromUnits", "CreateDate", "CreateUser", "Id", "LastUpdateDate", "LastUpdateUser", "Name", "ObjectId", "ParentObjectId", "Responsibilities", "SequenceNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Role from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Role from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CalculateCostFromUnits": obj.get("CalculateCostFromUnits"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "Id": obj.get("Id"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "Name": obj.get("Name"),
            "ObjectId": obj.get("ObjectId"),
            "ParentObjectId": obj.get("ParentObjectId"),
            "Responsibilities": obj.get("Responsibilities"),
            "SequenceNumber": obj.get("SequenceNumber")
        })
        return _obj


