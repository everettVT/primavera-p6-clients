# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_code_assignment_export import ActivityCodeAssignmentExport
from openapi_client.models.activity_code_export import ActivityCodeExport
from openapi_client.models.activity_code_type_export import ActivityCodeTypeExport
from openapi_client.models.activity_expense_export import ActivityExpenseExport
from openapi_client.models.activity_export import ActivityExport
from openapi_client.models.activity_note_export import ActivityNoteExport
from openapi_client.models.activity_period_actual_export import ActivityPeriodActualExport
from openapi_client.models.activity_risk_export import ActivityRiskExport
from openapi_client.models.activity_step_export import ActivityStepExport
from openapi_client.models.calendar_export import CalendarExport
from openapi_client.models.cost_account_export import CostAccountExport
from openapi_client.models.currency_export import CurrencyExport
from openapi_client.models.document_category_export import DocumentCategoryExport
from openapi_client.models.document_export import DocumentExport
from openapi_client.models.document_status_code_export import DocumentStatusCodeExport
from openapi_client.models.eps_export import EPSExport
from openapi_client.models.expense_category_export import ExpenseCategoryExport
from openapi_client.models.financial_period_export import FinancialPeriodExport
from openapi_client.models.funding_source_export import FundingSourceExport
from openapi_client.models.notebook_topic_export import NotebookTopicExport
from openapi_client.models.obs_export import OBSExport
from openapi_client.models.project_budget_change_log_export import ProjectBudgetChangeLogExport
from openapi_client.models.project_code_assignment_export import ProjectCodeAssignmentExport
from openapi_client.models.project_code_export import ProjectCodeExport
from openapi_client.models.project_code_type_export import ProjectCodeTypeExport
from openapi_client.models.project_document_export import ProjectDocumentExport
from openapi_client.models.project_export import ProjectExport
from openapi_client.models.project_funding_export import ProjectFundingExport
from openapi_client.models.project_issue_export import ProjectIssueExport
from openapi_client.models.project_note_export import ProjectNoteExport
from openapi_client.models.project_resource_category_export import ProjectResourceCategoryExport
from openapi_client.models.project_resource_export import ProjectResourceExport
from openapi_client.models.project_resource_quantity_export import ProjectResourceQuantityExport
from openapi_client.models.project_spending_plan_export import ProjectSpendingPlanExport
from openapi_client.models.project_threshold_export import ProjectThresholdExport
from openapi_client.models.relationship_export import RelationshipExport
from openapi_client.models.resource_assignment_export import ResourceAssignmentExport
from openapi_client.models.resource_assignment_period_actual_export import ResourceAssignmentPeriodActualExport
from openapi_client.models.resource_code_assignment_export import ResourceCodeAssignmentExport
from openapi_client.models.resource_code_export import ResourceCodeExport
from openapi_client.models.resource_code_type_export import ResourceCodeTypeExport
from openapi_client.models.resource_curve_export import ResourceCurveExport
from openapi_client.models.resource_export import ResourceExport
from openapi_client.models.resource_rate_export import ResourceRateExport
from openapi_client.models.resource_role_export import ResourceRoleExport
from openapi_client.models.risk_category_export import RiskCategoryExport
from openapi_client.models.risk_export import RiskExport
from openapi_client.models.risk_impact_export import RiskImpactExport
from openapi_client.models.risk_matrix_export import RiskMatrixExport
from openapi_client.models.risk_matrix_score_export import RiskMatrixScoreExport
from openapi_client.models.risk_matrix_threshold_export import RiskMatrixThresholdExport
from openapi_client.models.risk_response_action_export import RiskResponseActionExport
from openapi_client.models.risk_response_action_impact_export import RiskResponseActionImpactExport
from openapi_client.models.risk_response_plan_export import RiskResponsePlanExport
from openapi_client.models.risk_threshold_export import RiskThresholdExport
from openapi_client.models.risk_threshold_level_export import RiskThresholdLevelExport
from openapi_client.models.role_code_assignment_export import RoleCodeAssignmentExport
from openapi_client.models.role_code_export import RoleCodeExport
from openapi_client.models.role_code_type_export import RoleCodeTypeExport
from openapi_client.models.role_export import RoleExport
from openapi_client.models.role_limit_export import RoleLimitExport
from openapi_client.models.role_rate_export import RoleRateExport
from openapi_client.models.shift_export import ShiftExport
from openapi_client.models.threshold_parameter_export import ThresholdParameterExport
from openapi_client.models.udf_code_export import UDFCodeExport
from openapi_client.models.udf_type_export import UDFTypeExport
from openapi_client.models.udf_value_export import UDFValueExport
from openapi_client.models.unit_of_measure_export import UnitOfMeasureExport
from openapi_client.models.wbs_category_export import WBSCategoryExport
from openapi_client.models.wbs_export import WBSExport
from openapi_client.models.wbs_milestone_export import WBSMilestoneExport
from typing import Optional, Set
from typing_extensions import Self

class BusinessObjectOptions(BaseModel):
    """
    Specifies which business objects to export according to the following rules: If no BusinessObjectOptions are specified, then all of the business objects in the project are exported. If any BusinessObjectOptions are specified, then only those business objects specified by the BusinessObjectOptions element are exported.
    """ # noqa: E501
    activity: Optional[ActivityExport] = Field(default=None, alias="Activity")
    activity_code: Optional[ActivityCodeExport] = Field(default=None, alias="ActivityCode")
    activity_code_assignment: Optional[ActivityCodeAssignmentExport] = Field(default=None, alias="ActivityCodeAssignment")
    activity_code_type: Optional[ActivityCodeTypeExport] = Field(default=None, alias="ActivityCodeType")
    activity_expense: Optional[ActivityExpenseExport] = Field(default=None, alias="ActivityExpense")
    activity_note: Optional[ActivityNoteExport] = Field(default=None, alias="ActivityNote")
    activity_period_actual: Optional[ActivityPeriodActualExport] = Field(default=None, alias="ActivityPeriodActual")
    activity_risk: Optional[ActivityRiskExport] = Field(default=None, alias="ActivityRisk")
    activity_step: Optional[ActivityStepExport] = Field(default=None, alias="ActivityStep")
    calendar: Optional[CalendarExport] = Field(default=None, alias="Calendar")
    cost_account: Optional[CostAccountExport] = Field(default=None, alias="CostAccount")
    currency: Optional[CurrencyExport] = Field(default=None, alias="Currency")
    document: Optional[DocumentExport] = Field(default=None, alias="Document")
    document_category: Optional[DocumentCategoryExport] = Field(default=None, alias="DocumentCategory")
    document_status_code: Optional[DocumentStatusCodeExport] = Field(default=None, alias="DocumentStatusCode")
    eps: Optional[EPSExport] = Field(default=None, alias="EPS")
    expense_category: Optional[ExpenseCategoryExport] = Field(default=None, alias="ExpenseCategory")
    financial_period: Optional[FinancialPeriodExport] = Field(default=None, alias="FinancialPeriod")
    funding_source: Optional[FundingSourceExport] = Field(default=None, alias="FundingSource")
    notebook_topic: Optional[NotebookTopicExport] = Field(default=None, alias="NotebookTopic")
    obs: Optional[OBSExport] = Field(default=None, alias="OBS")
    project: Optional[ProjectExport] = Field(default=None, alias="Project")
    project_budget_change_log: Optional[ProjectBudgetChangeLogExport] = Field(default=None, alias="ProjectBudgetChangeLog")
    project_code: Optional[ProjectCodeExport] = Field(default=None, alias="ProjectCode")
    project_code_assignment: Optional[ProjectCodeAssignmentExport] = Field(default=None, alias="ProjectCodeAssignment")
    project_code_type: Optional[ProjectCodeTypeExport] = Field(default=None, alias="ProjectCodeType")
    project_document: Optional[ProjectDocumentExport] = Field(default=None, alias="ProjectDocument")
    project_funding: Optional[ProjectFundingExport] = Field(default=None, alias="ProjectFunding")
    project_issue: Optional[ProjectIssueExport] = Field(default=None, alias="ProjectIssue")
    project_note: Optional[ProjectNoteExport] = Field(default=None, alias="ProjectNote")
    project_resource: Optional[ProjectResourceExport] = Field(default=None, alias="ProjectResource")
    project_resource_category: Optional[ProjectResourceCategoryExport] = Field(default=None, alias="ProjectResourceCategory")
    project_resource_quantity: Optional[ProjectResourceQuantityExport] = Field(default=None, alias="ProjectResourceQuantity")
    project_spending_plan: Optional[ProjectSpendingPlanExport] = Field(default=None, alias="ProjectSpendingPlan")
    project_threshold: Optional[ProjectThresholdExport] = Field(default=None, alias="ProjectThreshold")
    relationship: Optional[RelationshipExport] = Field(default=None, alias="Relationship")
    resource: Optional[ResourceExport] = Field(default=None, alias="Resource")
    resource_assignment: Optional[ResourceAssignmentExport] = Field(default=None, alias="ResourceAssignment")
    resource_assignment_period_actual: Optional[ResourceAssignmentPeriodActualExport] = Field(default=None, alias="ResourceAssignmentPeriodActual")
    resource_code: Optional[ResourceCodeExport] = Field(default=None, alias="ResourceCode")
    resource_code_assignment: Optional[ResourceCodeAssignmentExport] = Field(default=None, alias="ResourceCodeAssignment")
    resource_code_type: Optional[ResourceCodeTypeExport] = Field(default=None, alias="ResourceCodeType")
    role_code: Optional[RoleCodeExport] = Field(default=None, alias="RoleCode")
    role_code_assignment: Optional[RoleCodeAssignmentExport] = Field(default=None, alias="RoleCodeAssignment")
    role_code_type: Optional[RoleCodeTypeExport] = Field(default=None, alias="RoleCodeType")
    resource_curve: Optional[ResourceCurveExport] = Field(default=None, alias="ResourceCurve")
    resource_rate: Optional[ResourceRateExport] = Field(default=None, alias="ResourceRate")
    resource_role: Optional[ResourceRoleExport] = Field(default=None, alias="ResourceRole")
    risk: Optional[RiskExport] = Field(default=None, alias="Risk")
    risk_category: Optional[RiskCategoryExport] = Field(default=None, alias="RiskCategory")
    risk_impact: Optional[RiskImpactExport] = Field(default=None, alias="RiskImpact")
    risk_matrix_score: Optional[RiskMatrixScoreExport] = Field(default=None, alias="RiskMatrixScore")
    risk_matrix_threshold: Optional[RiskMatrixThresholdExport] = Field(default=None, alias="RiskMatrixThreshold")
    risk_response_action: Optional[RiskResponseActionExport] = Field(default=None, alias="RiskResponseAction")
    risk_response_action_impact: Optional[RiskResponseActionImpactExport] = Field(default=None, alias="RiskResponseActionImpact")
    risk_response_plan: Optional[RiskResponsePlanExport] = Field(default=None, alias="RiskResponsePlan")
    risk_matrix: Optional[RiskMatrixExport] = Field(default=None, alias="RiskMatrix")
    risk_threshold_level: Optional[RiskThresholdLevelExport] = Field(default=None, alias="RiskThresholdLevel")
    risk_threshold: Optional[RiskThresholdExport] = Field(default=None, alias="RiskThreshold")
    role: Optional[RoleExport] = Field(default=None, alias="Role")
    role_rate: Optional[RoleRateExport] = Field(default=None, alias="RoleRate")
    role_limit: Optional[RoleLimitExport] = Field(default=None, alias="RoleLimit")
    shift: Optional[ShiftExport] = Field(default=None, alias="Shift")
    threshold_parameter: Optional[ThresholdParameterExport] = Field(default=None, alias="ThresholdParameter")
    udf_code: Optional[UDFCodeExport] = Field(default=None, alias="UDFCode")
    udf_type: Optional[UDFTypeExport] = Field(default=None, alias="UDFType")
    udf_value: Optional[UDFValueExport] = Field(default=None, alias="UDFValue")
    unit_of_measure: Optional[UnitOfMeasureExport] = Field(default=None, alias="UnitOfMeasure")
    wbs: Optional[WBSExport] = Field(default=None, alias="WBS")
    wbs_category: Optional[WBSCategoryExport] = Field(default=None, alias="WBSCategory")
    wbs_milestone: Optional[WBSMilestoneExport] = Field(default=None, alias="WBSMilestone")
    __properties: ClassVar[List[str]] = ["Activity", "ActivityCode", "ActivityCodeAssignment", "ActivityCodeType", "ActivityExpense", "ActivityNote", "ActivityPeriodActual", "ActivityRisk", "ActivityStep", "Calendar", "CostAccount", "Currency", "Document", "DocumentCategory", "DocumentStatusCode", "EPS", "ExpenseCategory", "FinancialPeriod", "FundingSource", "NotebookTopic", "OBS", "Project", "ProjectBudgetChangeLog", "ProjectCode", "ProjectCodeAssignment", "ProjectCodeType", "ProjectDocument", "ProjectFunding", "ProjectIssue", "ProjectNote", "ProjectResource", "ProjectResourceCategory", "ProjectResourceQuantity", "ProjectSpendingPlan", "ProjectThreshold", "Relationship", "Resource", "ResourceAssignment", "ResourceAssignmentPeriodActual", "ResourceCode", "ResourceCodeAssignment", "ResourceCodeType", "RoleCode", "RoleCodeAssignment", "RoleCodeType", "ResourceCurve", "ResourceRate", "ResourceRole", "Risk", "RiskCategory", "RiskImpact", "RiskMatrixScore", "RiskMatrixThreshold", "RiskResponseAction", "RiskResponseActionImpact", "RiskResponsePlan", "RiskMatrix", "RiskThresholdLevel", "RiskThreshold", "Role", "RoleRate", "RoleLimit", "Shift", "ThresholdParameter", "UDFCode", "UDFType", "UDFValue", "UnitOfMeasure", "WBS", "WBSCategory", "WBSMilestone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessObjectOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of activity
        if self.activity:
            _dict['Activity'] = self.activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_code
        if self.activity_code:
            _dict['ActivityCode'] = self.activity_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_code_assignment
        if self.activity_code_assignment:
            _dict['ActivityCodeAssignment'] = self.activity_code_assignment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_code_type
        if self.activity_code_type:
            _dict['ActivityCodeType'] = self.activity_code_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_expense
        if self.activity_expense:
            _dict['ActivityExpense'] = self.activity_expense.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_note
        if self.activity_note:
            _dict['ActivityNote'] = self.activity_note.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_period_actual
        if self.activity_period_actual:
            _dict['ActivityPeriodActual'] = self.activity_period_actual.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_risk
        if self.activity_risk:
            _dict['ActivityRisk'] = self.activity_risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activity_step
        if self.activity_step:
            _dict['ActivityStep'] = self.activity_step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar
        if self.calendar:
            _dict['Calendar'] = self.calendar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_account
        if self.cost_account:
            _dict['CostAccount'] = self.cost_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['Currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document
        if self.document:
            _dict['Document'] = self.document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_category
        if self.document_category:
            _dict['DocumentCategory'] = self.document_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_status_code
        if self.document_status_code:
            _dict['DocumentStatusCode'] = self.document_status_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eps
        if self.eps:
            _dict['EPS'] = self.eps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expense_category
        if self.expense_category:
            _dict['ExpenseCategory'] = self.expense_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of financial_period
        if self.financial_period:
            _dict['FinancialPeriod'] = self.financial_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of funding_source
        if self.funding_source:
            _dict['FundingSource'] = self.funding_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notebook_topic
        if self.notebook_topic:
            _dict['NotebookTopic'] = self.notebook_topic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obs
        if self.obs:
            _dict['OBS'] = self.obs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['Project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_budget_change_log
        if self.project_budget_change_log:
            _dict['ProjectBudgetChangeLog'] = self.project_budget_change_log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_code
        if self.project_code:
            _dict['ProjectCode'] = self.project_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_code_assignment
        if self.project_code_assignment:
            _dict['ProjectCodeAssignment'] = self.project_code_assignment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_code_type
        if self.project_code_type:
            _dict['ProjectCodeType'] = self.project_code_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_document
        if self.project_document:
            _dict['ProjectDocument'] = self.project_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_funding
        if self.project_funding:
            _dict['ProjectFunding'] = self.project_funding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_issue
        if self.project_issue:
            _dict['ProjectIssue'] = self.project_issue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_note
        if self.project_note:
            _dict['ProjectNote'] = self.project_note.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_resource
        if self.project_resource:
            _dict['ProjectResource'] = self.project_resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_resource_category
        if self.project_resource_category:
            _dict['ProjectResourceCategory'] = self.project_resource_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_resource_quantity
        if self.project_resource_quantity:
            _dict['ProjectResourceQuantity'] = self.project_resource_quantity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_spending_plan
        if self.project_spending_plan:
            _dict['ProjectSpendingPlan'] = self.project_spending_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_threshold
        if self.project_threshold:
            _dict['ProjectThreshold'] = self.project_threshold.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relationship
        if self.relationship:
            _dict['Relationship'] = self.relationship.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['Resource'] = self.resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_assignment
        if self.resource_assignment:
            _dict['ResourceAssignment'] = self.resource_assignment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_assignment_period_actual
        if self.resource_assignment_period_actual:
            _dict['ResourceAssignmentPeriodActual'] = self.resource_assignment_period_actual.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_code
        if self.resource_code:
            _dict['ResourceCode'] = self.resource_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_code_assignment
        if self.resource_code_assignment:
            _dict['ResourceCodeAssignment'] = self.resource_code_assignment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_code_type
        if self.resource_code_type:
            _dict['ResourceCodeType'] = self.resource_code_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_code
        if self.role_code:
            _dict['RoleCode'] = self.role_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_code_assignment
        if self.role_code_assignment:
            _dict['RoleCodeAssignment'] = self.role_code_assignment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_code_type
        if self.role_code_type:
            _dict['RoleCodeType'] = self.role_code_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_curve
        if self.resource_curve:
            _dict['ResourceCurve'] = self.resource_curve.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_rate
        if self.resource_rate:
            _dict['ResourceRate'] = self.resource_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_role
        if self.resource_role:
            _dict['ResourceRole'] = self.resource_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk
        if self.risk:
            _dict['Risk'] = self.risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_category
        if self.risk_category:
            _dict['RiskCategory'] = self.risk_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_impact
        if self.risk_impact:
            _dict['RiskImpact'] = self.risk_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_matrix_score
        if self.risk_matrix_score:
            _dict['RiskMatrixScore'] = self.risk_matrix_score.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_matrix_threshold
        if self.risk_matrix_threshold:
            _dict['RiskMatrixThreshold'] = self.risk_matrix_threshold.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_response_action
        if self.risk_response_action:
            _dict['RiskResponseAction'] = self.risk_response_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_response_action_impact
        if self.risk_response_action_impact:
            _dict['RiskResponseActionImpact'] = self.risk_response_action_impact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_response_plan
        if self.risk_response_plan:
            _dict['RiskResponsePlan'] = self.risk_response_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_matrix
        if self.risk_matrix:
            _dict['RiskMatrix'] = self.risk_matrix.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_threshold_level
        if self.risk_threshold_level:
            _dict['RiskThresholdLevel'] = self.risk_threshold_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_threshold
        if self.risk_threshold:
            _dict['RiskThreshold'] = self.risk_threshold.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['Role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_rate
        if self.role_rate:
            _dict['RoleRate'] = self.role_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_limit
        if self.role_limit:
            _dict['RoleLimit'] = self.role_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shift
        if self.shift:
            _dict['Shift'] = self.shift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of threshold_parameter
        if self.threshold_parameter:
            _dict['ThresholdParameter'] = self.threshold_parameter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of udf_code
        if self.udf_code:
            _dict['UDFCode'] = self.udf_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of udf_type
        if self.udf_type:
            _dict['UDFType'] = self.udf_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of udf_value
        if self.udf_value:
            _dict['UDFValue'] = self.udf_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit_of_measure
        if self.unit_of_measure:
            _dict['UnitOfMeasure'] = self.unit_of_measure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wbs
        if self.wbs:
            _dict['WBS'] = self.wbs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wbs_category
        if self.wbs_category:
            _dict['WBSCategory'] = self.wbs_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wbs_milestone
        if self.wbs_milestone:
            _dict['WBSMilestone'] = self.wbs_milestone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessObjectOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Activity": ActivityExport.from_dict(obj["Activity"]) if obj.get("Activity") is not None else None,
            "ActivityCode": ActivityCodeExport.from_dict(obj["ActivityCode"]) if obj.get("ActivityCode") is not None else None,
            "ActivityCodeAssignment": ActivityCodeAssignmentExport.from_dict(obj["ActivityCodeAssignment"]) if obj.get("ActivityCodeAssignment") is not None else None,
            "ActivityCodeType": ActivityCodeTypeExport.from_dict(obj["ActivityCodeType"]) if obj.get("ActivityCodeType") is not None else None,
            "ActivityExpense": ActivityExpenseExport.from_dict(obj["ActivityExpense"]) if obj.get("ActivityExpense") is not None else None,
            "ActivityNote": ActivityNoteExport.from_dict(obj["ActivityNote"]) if obj.get("ActivityNote") is not None else None,
            "ActivityPeriodActual": ActivityPeriodActualExport.from_dict(obj["ActivityPeriodActual"]) if obj.get("ActivityPeriodActual") is not None else None,
            "ActivityRisk": ActivityRiskExport.from_dict(obj["ActivityRisk"]) if obj.get("ActivityRisk") is not None else None,
            "ActivityStep": ActivityStepExport.from_dict(obj["ActivityStep"]) if obj.get("ActivityStep") is not None else None,
            "Calendar": CalendarExport.from_dict(obj["Calendar"]) if obj.get("Calendar") is not None else None,
            "CostAccount": CostAccountExport.from_dict(obj["CostAccount"]) if obj.get("CostAccount") is not None else None,
            "Currency": CurrencyExport.from_dict(obj["Currency"]) if obj.get("Currency") is not None else None,
            "Document": DocumentExport.from_dict(obj["Document"]) if obj.get("Document") is not None else None,
            "DocumentCategory": DocumentCategoryExport.from_dict(obj["DocumentCategory"]) if obj.get("DocumentCategory") is not None else None,
            "DocumentStatusCode": DocumentStatusCodeExport.from_dict(obj["DocumentStatusCode"]) if obj.get("DocumentStatusCode") is not None else None,
            "EPS": EPSExport.from_dict(obj["EPS"]) if obj.get("EPS") is not None else None,
            "ExpenseCategory": ExpenseCategoryExport.from_dict(obj["ExpenseCategory"]) if obj.get("ExpenseCategory") is not None else None,
            "FinancialPeriod": FinancialPeriodExport.from_dict(obj["FinancialPeriod"]) if obj.get("FinancialPeriod") is not None else None,
            "FundingSource": FundingSourceExport.from_dict(obj["FundingSource"]) if obj.get("FundingSource") is not None else None,
            "NotebookTopic": NotebookTopicExport.from_dict(obj["NotebookTopic"]) if obj.get("NotebookTopic") is not None else None,
            "OBS": OBSExport.from_dict(obj["OBS"]) if obj.get("OBS") is not None else None,
            "Project": ProjectExport.from_dict(obj["Project"]) if obj.get("Project") is not None else None,
            "ProjectBudgetChangeLog": ProjectBudgetChangeLogExport.from_dict(obj["ProjectBudgetChangeLog"]) if obj.get("ProjectBudgetChangeLog") is not None else None,
            "ProjectCode": ProjectCodeExport.from_dict(obj["ProjectCode"]) if obj.get("ProjectCode") is not None else None,
            "ProjectCodeAssignment": ProjectCodeAssignmentExport.from_dict(obj["ProjectCodeAssignment"]) if obj.get("ProjectCodeAssignment") is not None else None,
            "ProjectCodeType": ProjectCodeTypeExport.from_dict(obj["ProjectCodeType"]) if obj.get("ProjectCodeType") is not None else None,
            "ProjectDocument": ProjectDocumentExport.from_dict(obj["ProjectDocument"]) if obj.get("ProjectDocument") is not None else None,
            "ProjectFunding": ProjectFundingExport.from_dict(obj["ProjectFunding"]) if obj.get("ProjectFunding") is not None else None,
            "ProjectIssue": ProjectIssueExport.from_dict(obj["ProjectIssue"]) if obj.get("ProjectIssue") is not None else None,
            "ProjectNote": ProjectNoteExport.from_dict(obj["ProjectNote"]) if obj.get("ProjectNote") is not None else None,
            "ProjectResource": ProjectResourceExport.from_dict(obj["ProjectResource"]) if obj.get("ProjectResource") is not None else None,
            "ProjectResourceCategory": ProjectResourceCategoryExport.from_dict(obj["ProjectResourceCategory"]) if obj.get("ProjectResourceCategory") is not None else None,
            "ProjectResourceQuantity": ProjectResourceQuantityExport.from_dict(obj["ProjectResourceQuantity"]) if obj.get("ProjectResourceQuantity") is not None else None,
            "ProjectSpendingPlan": ProjectSpendingPlanExport.from_dict(obj["ProjectSpendingPlan"]) if obj.get("ProjectSpendingPlan") is not None else None,
            "ProjectThreshold": ProjectThresholdExport.from_dict(obj["ProjectThreshold"]) if obj.get("ProjectThreshold") is not None else None,
            "Relationship": RelationshipExport.from_dict(obj["Relationship"]) if obj.get("Relationship") is not None else None,
            "Resource": ResourceExport.from_dict(obj["Resource"]) if obj.get("Resource") is not None else None,
            "ResourceAssignment": ResourceAssignmentExport.from_dict(obj["ResourceAssignment"]) if obj.get("ResourceAssignment") is not None else None,
            "ResourceAssignmentPeriodActual": ResourceAssignmentPeriodActualExport.from_dict(obj["ResourceAssignmentPeriodActual"]) if obj.get("ResourceAssignmentPeriodActual") is not None else None,
            "ResourceCode": ResourceCodeExport.from_dict(obj["ResourceCode"]) if obj.get("ResourceCode") is not None else None,
            "ResourceCodeAssignment": ResourceCodeAssignmentExport.from_dict(obj["ResourceCodeAssignment"]) if obj.get("ResourceCodeAssignment") is not None else None,
            "ResourceCodeType": ResourceCodeTypeExport.from_dict(obj["ResourceCodeType"]) if obj.get("ResourceCodeType") is not None else None,
            "RoleCode": RoleCodeExport.from_dict(obj["RoleCode"]) if obj.get("RoleCode") is not None else None,
            "RoleCodeAssignment": RoleCodeAssignmentExport.from_dict(obj["RoleCodeAssignment"]) if obj.get("RoleCodeAssignment") is not None else None,
            "RoleCodeType": RoleCodeTypeExport.from_dict(obj["RoleCodeType"]) if obj.get("RoleCodeType") is not None else None,
            "ResourceCurve": ResourceCurveExport.from_dict(obj["ResourceCurve"]) if obj.get("ResourceCurve") is not None else None,
            "ResourceRate": ResourceRateExport.from_dict(obj["ResourceRate"]) if obj.get("ResourceRate") is not None else None,
            "ResourceRole": ResourceRoleExport.from_dict(obj["ResourceRole"]) if obj.get("ResourceRole") is not None else None,
            "Risk": RiskExport.from_dict(obj["Risk"]) if obj.get("Risk") is not None else None,
            "RiskCategory": RiskCategoryExport.from_dict(obj["RiskCategory"]) if obj.get("RiskCategory") is not None else None,
            "RiskImpact": RiskImpactExport.from_dict(obj["RiskImpact"]) if obj.get("RiskImpact") is not None else None,
            "RiskMatrixScore": RiskMatrixScoreExport.from_dict(obj["RiskMatrixScore"]) if obj.get("RiskMatrixScore") is not None else None,
            "RiskMatrixThreshold": RiskMatrixThresholdExport.from_dict(obj["RiskMatrixThreshold"]) if obj.get("RiskMatrixThreshold") is not None else None,
            "RiskResponseAction": RiskResponseActionExport.from_dict(obj["RiskResponseAction"]) if obj.get("RiskResponseAction") is not None else None,
            "RiskResponseActionImpact": RiskResponseActionImpactExport.from_dict(obj["RiskResponseActionImpact"]) if obj.get("RiskResponseActionImpact") is not None else None,
            "RiskResponsePlan": RiskResponsePlanExport.from_dict(obj["RiskResponsePlan"]) if obj.get("RiskResponsePlan") is not None else None,
            "RiskMatrix": RiskMatrixExport.from_dict(obj["RiskMatrix"]) if obj.get("RiskMatrix") is not None else None,
            "RiskThresholdLevel": RiskThresholdLevelExport.from_dict(obj["RiskThresholdLevel"]) if obj.get("RiskThresholdLevel") is not None else None,
            "RiskThreshold": RiskThresholdExport.from_dict(obj["RiskThreshold"]) if obj.get("RiskThreshold") is not None else None,
            "Role": RoleExport.from_dict(obj["Role"]) if obj.get("Role") is not None else None,
            "RoleRate": RoleRateExport.from_dict(obj["RoleRate"]) if obj.get("RoleRate") is not None else None,
            "RoleLimit": RoleLimitExport.from_dict(obj["RoleLimit"]) if obj.get("RoleLimit") is not None else None,
            "Shift": ShiftExport.from_dict(obj["Shift"]) if obj.get("Shift") is not None else None,
            "ThresholdParameter": ThresholdParameterExport.from_dict(obj["ThresholdParameter"]) if obj.get("ThresholdParameter") is not None else None,
            "UDFCode": UDFCodeExport.from_dict(obj["UDFCode"]) if obj.get("UDFCode") is not None else None,
            "UDFType": UDFTypeExport.from_dict(obj["UDFType"]) if obj.get("UDFType") is not None else None,
            "UDFValue": UDFValueExport.from_dict(obj["UDFValue"]) if obj.get("UDFValue") is not None else None,
            "UnitOfMeasure": UnitOfMeasureExport.from_dict(obj["UnitOfMeasure"]) if obj.get("UnitOfMeasure") is not None else None,
            "WBS": WBSExport.from_dict(obj["WBS"]) if obj.get("WBS") is not None else None,
            "WBSCategory": WBSCategoryExport.from_dict(obj["WBSCategory"]) if obj.get("WBSCategory") is not None else None,
            "WBSMilestone": WBSMilestoneExport.from_dict(obj["WBSMilestone"]) if obj.get("WBSMilestone") is not None else None
        })
        return _obj


