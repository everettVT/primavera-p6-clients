# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ProjectThreshold(BaseModel):
    """
    ProjectThreshold Entity
    """ # noqa: E501
    create_date: Optional[datetime] = Field(default=None, description="The date this project threshold was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this project threshold.", alias="CreateUser")
    detail_to_monitor: Optional[StrictStr] = Field(default=None, description="The level of detail to monitor, either Activity or WBS. The project threshold is calculated at the activity level or at the WBS level, whichever is selected.", alias="DetailToMonitor")
    from_date: Optional[datetime] = Field(default=None, description="The starting custom date of the time window that is monitored against a project threshold. Any activities or WBS elements with start/finish dates which intersect this time window are monitored.", alias="FromDate")
    from_date_expression: Optional[StrictStr] = Field(default=None, description="The expression for the starting date of the time window that is monitored against a project threshold. Valid values are PS (the project StartDate), PF (the project FinishDate), DD (the project Data Date), CD (Current Date), CW (Current Week), or CM (Current Month). All values can be combined with arithmetic operators + or - and a numerical calendar value. For example, PS+5D, DD-1M. The calendar abbreviation specified in the expression (H, D, W, M, Y) must match the value of the corresponding GlobalPreferences field: HourChar, DayChar, WeekChar, MonthChar, or YearChar. You could specify a custom date by setting a date value for the FromDate field. If you set values for both the FromDate and FromDateExpression fields, the FromDateExpression will be ignored.", alias="FromDateExpression")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline", alias="IsBaseline")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    issue_priority: Optional[StrictStr] = Field(default=None, description="The priority of any issues generated from the project threshold.", alias="IssuePriority")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this project threshold was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this project threshold.", alias="LastUpdateUser")
    lower_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The lower value of a project threshold that will trigger an issue. An issue is identified by the project threshold monitor when the actual/observed value of the project threshold parameter is found to be less than or equal to the lower project threshold value. If the lower project threshold value is null, it is ignored. Example: The Total Float lower project threshold is set to one day. Whenever the observed total float is less than or equal to one day, a project issue is raised", alias="LowerThreshold")
    obs_object_id: StrictInt = Field(description="The unique ID of the associated OBS for this project threshold.", alias="OBSObjectId")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    project_id: Optional[StrictStr] = Field(default=None, description="The Project short code that uniquely identifies the project.", alias="ProjectId")
    project_object_id: StrictInt = Field(description="The unique ID of the associated project for this project threshold.", alias="ProjectObjectId")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the project threshold.", alias="Status")
    threshold_parameter_object_id: StrictInt = Field(description="The unique ID of the associated threshold parameter for this project threshold.", alias="ThresholdParameterObjectId")
    to_date: Optional[datetime] = Field(default=None, description="The ending custom date of the time window that is monitored against a project threshold. Any activities or WBS elements with start/finish dates which intersect this time window are monitored.", alias="ToDate")
    to_date_expression: Optional[StrictStr] = Field(default=None, description="The expression for the ending date of the time window that is monitored against a project threshold. Valid values are PS (the project StartDate), PF (the project FinishDate), DD (the project Data Date), CD (Current Date), CW (Current Week), or CM (Current Month). All values can be combined with arithmetic operators + or - and a numerical calendar value. For example, PS+5d, DD-1M. The calendar abbreviation specified in the expression (H, D, W, M, Y) must match the value of the corresponding GlobalPreferences field: HourChar, DayChar, WeekChar, MonthChar, or YearChar. You could specify a custom date by setting a date value for the FromDate field. If you set values for both the ToDate and ToDateExpression fields, the ToDateExpression will be ignored.", alias="ToDateExpression")
    upper_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The upper value of a project threshold parameter which will trigger an issue. An issue is identified by the project threshold monitor when the actual/observed value of the project threshold parameter is found to be greater than or equal to the upper project threshold value. If the upper project threshold value is null, it is ignored. Example: The Cost % of Planned upper project threshold is set to 120%. Whenever the actual cost is greater than or equal to 120% of planned, an issue is raised.", alias="UpperThreshold")
    wbs_code: Optional[StrictStr] = Field(default=None, description="The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes.", alias="WBSCode")
    wbs_name: Optional[StrictStr] = Field(default=None, description="The name of the WBS element.", alias="WBSName")
    wbs_object_id: StrictInt = Field(description="The unique ID of the associated WBS for this project threshold.", alias="WBSObjectId")
    __properties: ClassVar[List[str]] = ["CreateDate", "CreateUser", "DetailToMonitor", "FromDate", "FromDateExpression", "IsBaseline", "IsTemplate", "IssuePriority", "LastUpdateDate", "LastUpdateUser", "LowerThreshold", "OBSObjectId", "ObjectId", "ProjectId", "ProjectObjectId", "Status", "ThresholdParameterObjectId", "ToDate", "ToDateExpression", "UpperThreshold", "WBSCode", "WBSName", "WBSObjectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectThreshold from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectThreshold from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "DetailToMonitor": obj.get("DetailToMonitor"),
            "FromDate": obj.get("FromDate"),
            "FromDateExpression": obj.get("FromDateExpression"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsTemplate": obj.get("IsTemplate"),
            "IssuePriority": obj.get("IssuePriority"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "LowerThreshold": obj.get("LowerThreshold"),
            "OBSObjectId": obj.get("OBSObjectId"),
            "ObjectId": obj.get("ObjectId"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "Status": obj.get("Status"),
            "ThresholdParameterObjectId": obj.get("ThresholdParameterObjectId"),
            "ToDate": obj.get("ToDate"),
            "ToDateExpression": obj.get("ToDateExpression"),
            "UpperThreshold": obj.get("UpperThreshold"),
            "WBSCode": obj.get("WBSCode"),
            "WBSName": obj.get("WBSName"),
            "WBSObjectId": obj.get("WBSObjectId")
        })
        return _obj


