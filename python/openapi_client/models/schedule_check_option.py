# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ScheduleCheckOption(BaseModel):
    """
    ScheduleCheckOption Entity
    """ # noqa: E501
    check_bei_tripwire: Optional[StrictBool] = Field(default=None, description="The baseline execution index.", alias="CheckBEITripwire")
    check_hard_constraints: Optional[StrictBool] = Field(default=None, description="Checks for the constraints that prevent activities from being moved.", alias="CheckHardConstraints")
    check_invalid_progress: Optional[StrictBool] = Field(default=None, description="Checks for activities that have invalid progress dates.", alias="CheckInvalidProgress")
    check_lags: Optional[StrictBool] = Field(default=None, description="Checks for relationships that have a positive lag duration.", alias="CheckLags")
    check_large_durations: Optional[StrictBool] = Field(default=None, description="Checks for activities that have a remaining duration that is greater than the specified LargeDurationCriteria value..", alias="CheckLargeDurations")
    check_large_float: Optional[StrictBool] = Field(default=None, description="Checks for activities that have a float value greater than the specified LargeFloatCriteria value.", alias="CheckLargeFloat")
    check_late_activities: Optional[StrictBool] = Field(default=None, description="Checks for activities that are scheduled to finish later than the project baseline.", alias="CheckLateActivities")
    check_logic: Optional[StrictBool] = Field(default=None, description="Checks for activities with missing predecessors or successors.", alias="CheckLogic")
    check_long_lags: Optional[StrictBool] = Field(default=None, description="Checks for relationships that have a lag duration that is greater than the specified LongLagsCriteria value.", alias="CheckLongLags")
    check_negative_float: Optional[StrictBool] = Field(default=None, description="Checks for activities that have a total float less than 0.", alias="CheckNegativeFloat")
    check_negative_lags: Optional[StrictBool] = Field(default=None, description="Checks for relationships that have a lag duration less than 0.", alias="CheckNegativeLags")
    check_relation_ships: Optional[StrictBool] = Field(default=None, description="Checks for the relationships that are set", alias="CheckRelationShips")
    check_resources: Optional[StrictBool] = Field(default=None, description="Checks for activities that do not have an expense or an assigned resource.", alias="CheckResources")
    check_soft_constraints: Optional[StrictBool] = Field(default=None, description="Checks for constraints that do not prevent activities from being moved.", alias="CheckSoftConstraints")
    hard_constraint_target: Optional[StrictInt] = Field(default=None, description="Checks for constraints that prevent activities from being moved.", alias="HardConstraintTarget")
    lags_target: Optional[StrictInt] = Field(default=None, description="Relationships that have a positive lag duration.", alias="LagsTarget")
    large_duration_criteria: Optional[StrictInt] = Field(default=None, description="The value of the Large Duration Criteria.", alias="LargeDurationCriteria")
    large_duration_target: Optional[StrictInt] = Field(default=None, description="Activities that have a remaining duration greater than the Large Duration Criteria.", alias="LargeDurationTarget")
    large_float_criteria: Optional[StrictInt] = Field(default=None, description="The value of the Large Float Criteria.", alias="LargeFloatCriteria")
    large_float_target: Optional[StrictInt] = Field(default=None, description="Activities that have a total float greater than the Large Float Criteria.", alias="LargeFloatTarget")
    late_activities_target: Optional[StrictInt] = Field(default=None, description="Activities that are scheduled to finish later than the project baseline.", alias="LateActivitiesTarget")
    logic_target: Optional[StrictInt] = Field(default=None, description="Activities that are missing predecessors or successors.", alias="LogicTarget")
    long_lags_criteria: Optional[StrictInt] = Field(default=None, description="The value of the Long Lags Criteria.", alias="LongLagsCriteria")
    long_lags_target: Optional[StrictInt] = Field(default=None, description="Relationships that have a lag duration greater than the Long Lags Criteria.", alias="LongLagsTarget")
    negative_float_target: Optional[StrictInt] = Field(default=None, description="Activities that have a total float less than 0.", alias="NegativeFloatTarget")
    negative_lags_target: Optional[StrictInt] = Field(default=None, description="Relationships that have a lag duration less than 0.", alias="NegativeLagsTarget")
    progress_date_target: Optional[StrictInt] = Field(default=None, description="Activities that have invalid progress dates.", alias="ProgressDateTarget")
    proj_prop_type_int: Optional[StrictInt] = Field(default=None, description="The enum values that are associated with the Project Property Type.", alias="ProjPropTypeInt")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique identifier of the project which has a schedule you want to check.", alias="ProjectObjectId")
    prop_value: Optional[StrictStr] = Field(default=None, description="The Project Property Type value.", alias="PropValue")
    relationship_target: Optional[StrictInt] = Field(default=None, description="The relationships that are finish to start.", alias="RelationshipTarget")
    resources_target: Optional[StrictInt] = Field(default=None, description="Activities that do not have an expense or an assigned resource.", alias="ResourcesTarget")
    schedule_check_data: Optional[StrictStr] = Field(default=None, description="The ScheduleCheck data.", alias="ScheduleCheckData")
    schedule_check_options_id: Optional[StrictInt] = Field(default=None, description="The unique id for ScheduleCheckOptions.", alias="ScheduleCheckOptionsId")
    soft_constraint_target: Optional[StrictInt] = Field(default=None, description="Constraints that do not prevent activities from being moved.", alias="SoftConstraintTarget")
    bei_tripwire_target: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The baseline execution index.", alias="BEITripwireTarget")
    __properties: ClassVar[List[str]] = ["CheckBEITripwire", "CheckHardConstraints", "CheckInvalidProgress", "CheckLags", "CheckLargeDurations", "CheckLargeFloat", "CheckLateActivities", "CheckLogic", "CheckLongLags", "CheckNegativeFloat", "CheckNegativeLags", "CheckRelationShips", "CheckResources", "CheckSoftConstraints", "HardConstraintTarget", "LagsTarget", "LargeDurationCriteria", "LargeDurationTarget", "LargeFloatCriteria", "LargeFloatTarget", "LateActivitiesTarget", "LogicTarget", "LongLagsCriteria", "LongLagsTarget", "NegativeFloatTarget", "NegativeLagsTarget", "ProgressDateTarget", "ProjPropTypeInt", "ProjectObjectId", "PropValue", "RelationshipTarget", "ResourcesTarget", "ScheduleCheckData", "ScheduleCheckOptionsId", "SoftConstraintTarget", "BEITripwireTarget"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleCheckOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleCheckOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CheckBEITripwire": obj.get("CheckBEITripwire"),
            "CheckHardConstraints": obj.get("CheckHardConstraints"),
            "CheckInvalidProgress": obj.get("CheckInvalidProgress"),
            "CheckLags": obj.get("CheckLags"),
            "CheckLargeDurations": obj.get("CheckLargeDurations"),
            "CheckLargeFloat": obj.get("CheckLargeFloat"),
            "CheckLateActivities": obj.get("CheckLateActivities"),
            "CheckLogic": obj.get("CheckLogic"),
            "CheckLongLags": obj.get("CheckLongLags"),
            "CheckNegativeFloat": obj.get("CheckNegativeFloat"),
            "CheckNegativeLags": obj.get("CheckNegativeLags"),
            "CheckRelationShips": obj.get("CheckRelationShips"),
            "CheckResources": obj.get("CheckResources"),
            "CheckSoftConstraints": obj.get("CheckSoftConstraints"),
            "HardConstraintTarget": obj.get("HardConstraintTarget"),
            "LagsTarget": obj.get("LagsTarget"),
            "LargeDurationCriteria": obj.get("LargeDurationCriteria"),
            "LargeDurationTarget": obj.get("LargeDurationTarget"),
            "LargeFloatCriteria": obj.get("LargeFloatCriteria"),
            "LargeFloatTarget": obj.get("LargeFloatTarget"),
            "LateActivitiesTarget": obj.get("LateActivitiesTarget"),
            "LogicTarget": obj.get("LogicTarget"),
            "LongLagsCriteria": obj.get("LongLagsCriteria"),
            "LongLagsTarget": obj.get("LongLagsTarget"),
            "NegativeFloatTarget": obj.get("NegativeFloatTarget"),
            "NegativeLagsTarget": obj.get("NegativeLagsTarget"),
            "ProgressDateTarget": obj.get("ProgressDateTarget"),
            "ProjPropTypeInt": obj.get("ProjPropTypeInt"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "PropValue": obj.get("PropValue"),
            "RelationshipTarget": obj.get("RelationshipTarget"),
            "ResourcesTarget": obj.get("ResourcesTarget"),
            "ScheduleCheckData": obj.get("ScheduleCheckData"),
            "ScheduleCheckOptionsId": obj.get("ScheduleCheckOptionsId"),
            "SoftConstraintTarget": obj.get("SoftConstraintTarget"),
            "BEITripwireTarget": obj.get("BEITripwireTarget")
        })
        return _obj


