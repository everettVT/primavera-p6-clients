# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.holiday_or_exceptions import HolidayOrExceptions
from openapi_client.models.standard_work_week import StandardWorkWeek
from typing import Optional, Set
from typing_extensions import Self

class Calendar(BaseModel):
    """
    Calendar Entity
    """ # noqa: E501
    base_calendar_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the global calendar to which this calendar is linked. Any changes to the global calendar are automatically propagated to this calendar.", alias="BaseCalendarObjectId")
    create_date: Optional[datetime] = Field(default=None, description="The date this calendar was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this calendar.", alias="CreateUser")
    hours_per_day: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of work hours per day. This conversion factor is used for displaying time units and durations in the user's selected display formats.", alias="HoursPerDay")
    hours_per_month: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of work hours per month. This conversion factor is used for displaying time units and durations in the user's selected display formats.", alias="HoursPerMonth")
    hours_per_week: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of work hours per week. This conversion factor is used for displaying time units and durations in the user's selected display formats.", alias="HoursPerWeek")
    hours_per_year: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of work hours per year. This conversion factor is used for displaying time units and durations in the user's selected display formats.", alias="HoursPerYear")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline", alias="IsBaseline")
    is_default: Optional[StrictBool] = Field(default=None, description="The flag that identifies the default global calendar (applies to global calendars only).", alias="IsDefault")
    is_personal: Optional[StrictBool] = Field(default=None, description="The flag indicating if this calendar is a personal calendar (applies to resource calendars only).", alias="IsPersonal")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this calendar was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this calendar.", alias="LastUpdateUser")
    name: StrictStr = Field(description="The name of the calendar.", alias="Name")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    project_id: Optional[StrictStr] = Field(default=None, description="The ID for the project for which this change request is associated.", alias="ProjectId")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    type: StrictStr = Field(description="The calendar type - either 'Global', 'Resource', or 'Project'. 'Global' calendars can be assigned to projects and resources. 'Resource' calendars can be assigned only to resources. 'Project' calendars are specific to projects.", alias="Type")
    standard_work_week: Optional[StandardWorkWeek] = Field(default=None, alias="StandardWorkWeek")
    holiday_or_exceptions: Optional[HolidayOrExceptions] = Field(default=None, alias="HolidayOrExceptions")
    __properties: ClassVar[List[str]] = ["BaseCalendarObjectId", "CreateDate", "CreateUser", "HoursPerDay", "HoursPerMonth", "HoursPerWeek", "HoursPerYear", "IsBaseline", "IsDefault", "IsPersonal", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "Name", "ObjectId", "ProjectId", "ProjectObjectId", "Type", "StandardWorkWeek", "HolidayOrExceptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Calendar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of standard_work_week
        if self.standard_work_week:
            _dict['StandardWorkWeek'] = self.standard_work_week.to_dict()
        # override the default output from pydantic by calling `to_dict()` of holiday_or_exceptions
        if self.holiday_or_exceptions:
            _dict['HolidayOrExceptions'] = self.holiday_or_exceptions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Calendar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BaseCalendarObjectId": obj.get("BaseCalendarObjectId"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "HoursPerDay": obj.get("HoursPerDay"),
            "HoursPerMonth": obj.get("HoursPerMonth"),
            "HoursPerWeek": obj.get("HoursPerWeek"),
            "HoursPerYear": obj.get("HoursPerYear"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsDefault": obj.get("IsDefault"),
            "IsPersonal": obj.get("IsPersonal"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "Name": obj.get("Name"),
            "ObjectId": obj.get("ObjectId"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "Type": obj.get("Type"),
            "StandardWorkWeek": StandardWorkWeek.from_dict(obj["StandardWorkWeek"]) if obj.get("StandardWorkWeek") is not None else None,
            "HolidayOrExceptions": HolidayOrExceptions.from_dict(obj["HolidayOrExceptions"]) if obj.get("HolidayOrExceptions") is not None else None
        })
        return _obj


