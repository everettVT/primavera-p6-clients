# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.business_object_options import BusinessObjectOptions
from typing import Optional, Set
from typing_extensions import Self

class ExportProject(BaseModel):
    """
    ExportProject Entity
    """ # noqa: E501
    encoding: Optional[StrictStr] = Field(default=None, description="Specifies the encoding of the XML file that is exported, e.g., UTF-8.", alias="Encoding")
    file_type: Optional[StrictStr] = Field(default=None, description="FileTypeType Entity", alias="FileType")
    line_separator: Optional[StrictStr] = Field(default=None, description="Specifies whether the Windows (\"\\r\\n\") or Unix (\"\\n\") line endings will be used.", alias="LineSeparator")
    project_object_id: Optional[StrictInt] = Field(default=None, alias="ProjectObjectId")
    spread_period_type: Optional[StrictStr] = Field(default=None, description="SpreadPeriodType Entity", alias="SpreadPeriodType")
    spacing: Optional[StrictStr] = Field(default=None, description="Specifies the indentation between the elements in the XML export file. For example, use \" \" to specify 5 spaces of indentation.", alias="Spacing")
    business_object_options: Optional[BusinessObjectOptions] = Field(default=None, alias="BusinessObjectOptions")
    __properties: ClassVar[List[str]] = ["Encoding", "FileType", "LineSeparator", "ProjectObjectId", "SpreadPeriodType", "Spacing", "BusinessObjectOptions"]

    @field_validator('file_type')
    def file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GZIP', 'XML', 'ZIP']):
            raise ValueError("must be one of enum values ('GZIP', 'XML', 'ZIP')")
        return value

    @field_validator('line_separator')
    def line_separator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WINDOWS', 'UNIX']):
            raise ValueError("must be one of enum values ('WINDOWS', 'UNIX')")
        return value

    @field_validator('spread_period_type')
    def spread_period_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOUR', 'DAY', 'WEEK', 'MONTH', 'QUARTER', 'YEAR', 'FINANCIAL_PERIOD']):
            raise ValueError("must be one of enum values ('HOUR', 'DAY', 'WEEK', 'MONTH', 'QUARTER', 'YEAR', 'FINANCIAL_PERIOD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportProject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of business_object_options
        if self.business_object_options:
            _dict['BusinessObjectOptions'] = self.business_object_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportProject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Encoding": obj.get("Encoding"),
            "FileType": obj.get("FileType"),
            "LineSeparator": obj.get("LineSeparator"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "SpreadPeriodType": obj.get("SpreadPeriodType"),
            "Spacing": obj.get("Spacing"),
            "BusinessObjectOptions": BusinessObjectOptions.from_dict(obj["BusinessObjectOptions"]) if obj.get("BusinessObjectOptions") is not None else None
        })
        return _obj


