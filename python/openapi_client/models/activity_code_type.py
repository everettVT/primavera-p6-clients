# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActivityCodeType(BaseModel):
    """
    ActivityCodeType Entity
    """ # noqa: E501
    create_date: Optional[datetime] = Field(default=None, description="The date this Activity Code Type was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this ActivityCodeType.", alias="CreateUser")
    eps_code_type_hierarchy: Optional[StrictStr] = Field(default=None, description="The field that maintains the EPS Activity Code Type Hierarchy.", alias="EPSCodeTypeHierarchy")
    eps_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated EPS.", alias="EPSObjectId")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline", alias="IsBaseline")
    is_secure_code: Optional[StrictBool] = Field(default=None, description="The flag indicating whether this is a secure Activity Code Type.", alias="IsSecureCode")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this Activity Code Type was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this ActivityCodeType.", alias="LastUpdateUser")
    length: Optional[StrictInt] = Field(default=None, description="The maximum number of characters allowed for values of this activity code.", alias="Length")
    name: StrictStr = Field(description="The name of the activity code type.", alias="Name")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    ref_project_object_ids: Optional[StrictStr] = Field(default=None, description="The unique ID associated with a project whose activities have this code assigned. This data is only exported if more than one project is included in the export and if more than one project contains activities to which the EPS scoped activity code is assigned.", alias="RefProjectObjectIds")
    scope: Optional[StrictStr] = Field(default=None, description="The scope of the code type: Global, EPS, or Project. An activity code with Global scope can be assigned to any activity. An activity code with EPS scope can be assigned only to an activity within a project under that particular EPS. Similarly, an activity code with Project scope can be assigned only to an activity within that particular project.", alias="Scope")
    sequence_number: Optional[StrictInt] = Field(default=None, description="The sequence number for sorting.", alias="SequenceNumber")
    __properties: ClassVar[List[str]] = ["CreateDate", "CreateUser", "EPSCodeTypeHierarchy", "EPSObjectId", "IsBaseline", "IsSecureCode", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "Length", "Name", "ObjectId", "ProjectObjectId", "RefProjectObjectIds", "Scope", "SequenceNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityCodeType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityCodeType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "EPSCodeTypeHierarchy": obj.get("EPSCodeTypeHierarchy"),
            "EPSObjectId": obj.get("EPSObjectId"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsSecureCode": obj.get("IsSecureCode"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "Length": obj.get("Length"),
            "Name": obj.get("Name"),
            "ObjectId": obj.get("ObjectId"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "RefProjectObjectIds": obj.get("RefProjectObjectIds"),
            "Scope": obj.get("Scope"),
            "SequenceNumber": obj.get("SequenceNumber")
        })
        return _obj


