# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ProjectResourceQuantity(BaseModel):
    """
    ProjectResourceQuantity Entity
    """ # noqa: E501
    committed_flag: Optional[StrictBool] = Field(default=None, description="The Boolean value that determines whether a resource is committed, and so, the resource assignment is stable and unlikely to change. When calculating availability, Primavera considers only assignments that are marked as committed.", alias="CommittedFlag")
    create_date: Optional[datetime] = Field(default=None, description="The date this project resource quantity was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this project resource quantity.", alias="CreateUser")
    financial_period1_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated first financial period for this project resource quantity.", alias="FinancialPeriod1ObjectId")
    financial_period1_quantity: Union[StrictFloat, StrictInt] = Field(description="The value that represents the resource allocation hours for the first financial period for this project resource quantity. If the week contains days from two different months, two ProjectResourceQuantity business objects will exist. The first business object's Quantity field represents the hours of the first week fragment (WeekStartDate and MonthStartDate have the same month value). The second business object's Quantity field represents the second week fragment (WeekStartDate and MonthStartDate have different month values).", alias="FinancialPeriod1Quantity")
    financial_period2_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated second financial period for this project resource quantity.", alias="FinancialPeriod2ObjectId")
    financial_period2_quantity: Union[StrictFloat, StrictInt] = Field(description="The value that represents the resource allocation hours for the second financial period for this project resource quantity. If the week contains days from two different months, two ProjectResourceQuantity business objects will exist. The first business object's Quantity field represents the hours of the first week fragment (WeekStartDate and MonthStartDate have the same month value). The second business object's Quantity field represents the second week fragment (WeekStartDate and MonthStartDate have different month values).", alias="FinancialPeriod2Quantity")
    financial_period_tmpl_id: Optional[StrictInt] = Field(default=None, alias="FinancialPeriodTmplId")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline", alias="IsBaseline")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this project resource quantity was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this project resource quantity.", alias="LastUpdateUser")
    month_start_date: Optional[datetime] = Field(default=None, description="The date value that represents the first day of the month. If the week contains days from two different months, two objects will exist. The first ProjectResourceQuantity object's MonthStartDate is the first day of the month for the first week fragment. The second ProjectResourceQuantity object's MonthStartDate is the first day of the month for the second week fragment.", alias="MonthStartDate")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    project_resource_object_id: StrictInt = Field(description="The unique ID of the associated project resource.", alias="ProjectResourceObjectId")
    quantity: Union[StrictFloat, StrictInt] = Field(description="The value that represents the resource allocation hours per week for this project resource quantity. If the week contains days from two different months, two ProjectResourceQuantity business objects will exist. The first business object's Quantity field represents the hours of the first week fragment (WeekStartDate and MonthStartDate have the same month value). The second business object's Quantity field represents the second week fragment (WeekStartDate and MonthStartDate have different month values).", alias="Quantity")
    resource_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated resource.", alias="ResourceObjectId")
    role_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated role.", alias="RoleObjectId")
    wbs_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated WBS.", alias="WBSObjectId")
    week_start_date: datetime = Field(description="The date value that represents the first day of the week.", alias="WeekStartDate")
    __properties: ClassVar[List[str]] = ["CommittedFlag", "CreateDate", "CreateUser", "FinancialPeriod1ObjectId", "FinancialPeriod1Quantity", "FinancialPeriod2ObjectId", "FinancialPeriod2Quantity", "FinancialPeriodTmplId", "IsBaseline", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "MonthStartDate", "ProjectObjectId", "ProjectResourceObjectId", "Quantity", "ResourceObjectId", "RoleObjectId", "WBSObjectId", "WeekStartDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectResourceQuantity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectResourceQuantity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommittedFlag": obj.get("CommittedFlag"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "FinancialPeriod1ObjectId": obj.get("FinancialPeriod1ObjectId"),
            "FinancialPeriod1Quantity": obj.get("FinancialPeriod1Quantity"),
            "FinancialPeriod2ObjectId": obj.get("FinancialPeriod2ObjectId"),
            "FinancialPeriod2Quantity": obj.get("FinancialPeriod2Quantity"),
            "FinancialPeriodTmplId": obj.get("FinancialPeriodTmplId"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "MonthStartDate": obj.get("MonthStartDate"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "ProjectResourceObjectId": obj.get("ProjectResourceObjectId"),
            "Quantity": obj.get("Quantity"),
            "ResourceObjectId": obj.get("ResourceObjectId"),
            "RoleObjectId": obj.get("RoleObjectId"),
            "WBSObjectId": obj.get("WBSObjectId"),
            "WeekStartDate": obj.get("WeekStartDate")
        })
        return _obj


