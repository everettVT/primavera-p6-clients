# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ProjectBudgetChangeLog(BaseModel):
    """
    ProjectBudgetChangeLog Entity
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of budget change.", alias="Amount")
    change_number: StrictStr = Field(description="The change number that is automatically incremented according to when changes are added. This can be changed to any number.", alias="ChangeNumber")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this log of budget changes.", alias="CreateUser")
    var_date: Optional[datetime] = Field(default=None, description="The date of this budget change entry.", alias="Date")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline", alias="IsBaseline")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this log of budget changes was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this log of budget changes.", alias="LastUpdateUser")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    project_id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the project.", alias="ProjectId")
    project_object_id: StrictInt = Field(description="The unique ID of the associated project.", alias="ProjectObjectId")
    reason: Optional[StrictStr] = Field(default=None, description="The description of the reason for the budget change request.", alias="Reason")
    responsible: Optional[StrictStr] = Field(default=None, description="The person responsible for the change.", alias="Responsible")
    status: Optional[StrictStr] = Field(default=None, description="The status of this budget change request. Possible values are 'Pending', 'Approved', and 'Not Approved'.", alias="Status")
    wbs_code: Optional[StrictStr] = Field(default=None, description="The short code assigned to each WBS element for identification. Each WBS element is uniquely identified by concatenating its own code together with its parents' codes.", alias="WBSCode")
    wbs_name: Optional[StrictStr] = Field(default=None, description="The name of the WBS element.", alias="WBSName")
    wbs_object_id: StrictInt = Field(description="The unique ID of the WBS element to which the budget change log applies.", alias="WBSObjectId")
    __properties: ClassVar[List[str]] = ["Amount", "ChangeNumber", "CreateUser", "Date", "IsBaseline", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "ObjectId", "ProjectId", "ProjectObjectId", "Reason", "Responsible", "Status", "WBSCode", "WBSName", "WBSObjectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectBudgetChangeLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectBudgetChangeLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Amount": obj.get("Amount"),
            "ChangeNumber": obj.get("ChangeNumber"),
            "CreateUser": obj.get("CreateUser"),
            "Date": obj.get("Date"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "ObjectId": obj.get("ObjectId"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "Reason": obj.get("Reason"),
            "Responsible": obj.get("Responsible"),
            "Status": obj.get("Status"),
            "WBSCode": obj.get("WBSCode"),
            "WBSName": obj.get("WBSName"),
            "WBSObjectId": obj.get("WBSObjectId")
        })
        return _obj


