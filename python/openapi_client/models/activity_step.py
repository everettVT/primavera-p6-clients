# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ActivityStep(BaseModel):
    """
    ActivityStep Entity
    """ # noqa: E501
    activity_id: Optional[StrictStr] = Field(default=None, description="The short ID that uniquely identifies the activity within the project.", alias="ActivityId")
    activity_name: StrictStr = Field(description="The name of the activity. The activity name does not have to be unique.", alias="ActivityName")
    activity_object_id: StrictInt = Field(description="The unique ID of the activity to which the steps are assigned.", alias="ActivityObjectId")
    create_date: Optional[datetime] = Field(default=None, description="The date this activity step was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this activity step.", alias="CreateUser")
    description: Optional[StrictStr] = Field(default=None, description="The description of the activity step.", alias="Description")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline", alias="IsBaseline")
    is_completed: Optional[StrictBool] = Field(default=None, description="The flag that indicates whether the step has been completed.", alias="IsCompleted")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this activity step was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this activity step.", alias="LastUpdateUser")
    name: Optional[StrictStr] = Field(default=None, description="The name of the activity step.", alias="Name")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    percent_complete: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percent complete for the step.", alias="PercentComplete")
    project_id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the project.", alias="ProjectId")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    sequence_number: Optional[StrictInt] = Field(default=None, description="The sequence number for sorting.", alias="SequenceNumber")
    wbs_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the WBS for the activity.", alias="WBSObjectId")
    weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The weight that is assigned to the step. This is a user defined field that is used to calculate the physical percent complete when the project option is set.", alias="Weight")
    weight_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The non-editable field that displays the percentage amount that corresponds to the step. It is calculated by taking the weight of the step and dividing it by the total of all weights for the activity.", alias="WeightPercent")
    __properties: ClassVar[List[str]] = ["ActivityId", "ActivityName", "ActivityObjectId", "CreateDate", "CreateUser", "Description", "IsBaseline", "IsCompleted", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "Name", "ObjectId", "PercentComplete", "ProjectId", "ProjectObjectId", "SequenceNumber", "WBSObjectId", "Weight", "WeightPercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivityId": obj.get("ActivityId"),
            "ActivityName": obj.get("ActivityName"),
            "ActivityObjectId": obj.get("ActivityObjectId"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "Description": obj.get("Description"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsCompleted": obj.get("IsCompleted"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "Name": obj.get("Name"),
            "ObjectId": obj.get("ObjectId"),
            "PercentComplete": obj.get("PercentComplete"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "SequenceNumber": obj.get("SequenceNumber"),
            "WBSObjectId": obj.get("WBSObjectId"),
            "Weight": obj.get("Weight"),
            "WeightPercent": obj.get("WeightPercent")
        })
        return _obj


