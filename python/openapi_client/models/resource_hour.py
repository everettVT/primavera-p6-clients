# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ResourceHour(BaseModel):
    """
    ResourceHour Entity
    """ # noqa: E501
    activity_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the activity to which the resource is assigned.", alias="ActivityObjectId")
    activity_timesheet_link_flag: Optional[StrictBool] = Field(default=None, description="The value which indicates if the record is a real timesheet entry (false) or simply a placeholder for a timesheet entry (true).", alias="ActivityTimesheetLinkFlag")
    approved_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of hours, approved.", alias="ApprovedHours")
    approved_overtime_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of overtime hours, approved.", alias="ApprovedOvertimeHours")
    create_date: Optional[datetime] = Field(default=None, description="The date this data was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this data.", alias="CreateUser")
    var_date: Optional[datetime] = Field(default=None, description="The date to which the hours apply.", alias="Date")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline", alias="IsBaseline")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this data was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this data.", alias="LastUpdateUser")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    overhead_code_name: Optional[StrictStr] = Field(default=None, description="The name of the overhead code.", alias="OverheadCodeName")
    overhead_code_object_id: StrictInt = Field(description="The unique ID of the overhead code, if the hours are for an overhead activity.", alias="OverheadCodeObjectId")
    project_id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the project.", alias="ProjectId")
    project_name: Optional[StrictStr] = Field(default=None, description="The name of the associated project.", alias="ProjectName")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    resource_assignment_object_id: StrictInt = Field(description="The unique ID of the associated resource assignment.", alias="ResourceAssignmentObjectId")
    resource_id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the resource.", alias="ResourceId")
    resource_integrated_type: Optional[StrictStr] = Field(default=None, description="The flag indicating whether the resource is integrated with an Enterprise Resource Planning (ERP) system. 'Fusion' indicates the resource is integrated with Oracle Fusion. 'ERP' indicates the resource is integrated with another ERP system. 'Gateway' indicates the resource is integrated with Oracle Primavera Gateway.", alias="ResourceIntegratedType")
    resource_name: Optional[StrictStr] = Field(default=None, description="The name of the resource.", alias="ResourceName")
    resource_object_id: StrictInt = Field(description="The unique ID of the associated resource.", alias="ResourceObjectId")
    status: Optional[StrictStr] = Field(default=None, description="The approval level, when timesheets require approval: 'Submitted', 'Approved', 'Resource Manager Approved', 'Project Manager Approved', 'Active', or 'Rejected'.", alias="Status")
    timesheet_period_object_id: StrictInt = Field(description="The unique ID of the associated timesheet.", alias="TimesheetPeriodObjectId")
    timesheet_status_date: Optional[datetime] = Field(default=None, description="The status date of the associated timesheet.", alias="TimesheetStatusDate")
    unapproved_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The actual non-overtime units submitted by the resource on the activity. These units remain submitted until the timesheet is approved.", alias="UnapprovedHours")
    unapproved_overtime_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The actual overtime units submitted by the resource on the acitivity. These units remain submitted until the timesheet is approved.", alias="UnapprovedOvertimeHours")
    wbs_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the WBS for the activity.", alias="WBSObjectId")
    __properties: ClassVar[List[str]] = ["ActivityObjectId", "ActivityTimesheetLinkFlag", "ApprovedHours", "ApprovedOvertimeHours", "CreateDate", "CreateUser", "Date", "IsBaseline", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "ObjectId", "OverheadCodeName", "OverheadCodeObjectId", "ProjectId", "ProjectName", "ProjectObjectId", "ResourceAssignmentObjectId", "ResourceId", "ResourceIntegratedType", "ResourceName", "ResourceObjectId", "Status", "TimesheetPeriodObjectId", "TimesheetStatusDate", "UnapprovedHours", "UnapprovedOvertimeHours", "WBSObjectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceHour from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceHour from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivityObjectId": obj.get("ActivityObjectId"),
            "ActivityTimesheetLinkFlag": obj.get("ActivityTimesheetLinkFlag"),
            "ApprovedHours": obj.get("ApprovedHours"),
            "ApprovedOvertimeHours": obj.get("ApprovedOvertimeHours"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "Date": obj.get("Date"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "ObjectId": obj.get("ObjectId"),
            "OverheadCodeName": obj.get("OverheadCodeName"),
            "OverheadCodeObjectId": obj.get("OverheadCodeObjectId"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectName": obj.get("ProjectName"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "ResourceAssignmentObjectId": obj.get("ResourceAssignmentObjectId"),
            "ResourceId": obj.get("ResourceId"),
            "ResourceIntegratedType": obj.get("ResourceIntegratedType"),
            "ResourceName": obj.get("ResourceName"),
            "ResourceObjectId": obj.get("ResourceObjectId"),
            "Status": obj.get("Status"),
            "TimesheetPeriodObjectId": obj.get("TimesheetPeriodObjectId"),
            "TimesheetStatusDate": obj.get("TimesheetStatusDate"),
            "UnapprovedHours": obj.get("UnapprovedHours"),
            "UnapprovedOvertimeHours": obj.get("UnapprovedOvertimeHours"),
            "WBSObjectId": obj.get("WBSObjectId")
        })
        return _obj


