# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Location(BaseModel):
    """
    Location Entity
    """ # noqa: E501
    address_line1: Optional[StrictStr] = Field(default=None, description="The first line of the address with street number and street name.", alias="AddressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="The second line of the address with street number and street name.", alias="AddressLine2")
    city: Optional[StrictStr] = Field(default=None, description="The city name of the address.", alias="City")
    country: Optional[StrictStr] = Field(default=None, description="The country of the address.", alias="Country")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code of the address.", alias="CountryCode")
    create_date: Optional[datetime] = Field(default=None, description="The creation date of the Location.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this location.", alias="CreateUser")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this location was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this location.", alias="LastUpdateUser")
    latitude: Union[StrictFloat, StrictInt] = Field(description="The latitude of the address.", alias="Latitude")
    longitude: Union[StrictFloat, StrictInt] = Field(description="The longitude of the address.", alias="Longitude")
    municipality: Optional[StrictStr] = Field(default=None, description="The municipality name of the address.", alias="Municipality")
    name: StrictStr = Field(description="The name of the location.", alias="Name")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the location.", alias="ObjectId")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code of the address.", alias="PostalCode")
    state: Optional[StrictStr] = Field(default=None, description="The state name of the address.", alias="State")
    state_code: Optional[StrictStr] = Field(default=None, description="The state abbreviation of the address.", alias="StateCode")
    __properties: ClassVar[List[str]] = ["AddressLine1", "AddressLine2", "City", "Country", "CountryCode", "CreateDate", "CreateUser", "LastUpdateDate", "LastUpdateUser", "Latitude", "Longitude", "Municipality", "Name", "ObjectId", "PostalCode", "State", "StateCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AddressLine1": obj.get("AddressLine1"),
            "AddressLine2": obj.get("AddressLine2"),
            "City": obj.get("City"),
            "Country": obj.get("Country"),
            "CountryCode": obj.get("CountryCode"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "Latitude": obj.get("Latitude"),
            "Longitude": obj.get("Longitude"),
            "Municipality": obj.get("Municipality"),
            "Name": obj.get("Name"),
            "ObjectId": obj.get("ObjectId"),
            "PostalCode": obj.get("PostalCode"),
            "State": obj.get("State"),
            "StateCode": obj.get("StateCode")
        })
        return _obj


