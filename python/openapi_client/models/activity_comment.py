# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActivityComment(BaseModel):
    """
    ActivityComment Entity
    """ # noqa: E501
    activity_object_id: StrictInt = Field(description="The unique ID of the activity to which this comment is added.", alias="ActivityObjectId")
    assignment_object_id: Optional[StrictInt] = Field(default=None, alias="AssignmentObjectId")
    comment_date: Optional[datetime] = Field(default=None, description="The date on which this comment was added.", alias="CommentDate")
    comment_text: StrictStr = Field(description="The comment.", alias="CommentText")
    create_date: Optional[datetime] = Field(default=None, description="The date this comment was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this comment.", alias="CreateUser")
    delete_date: Optional[datetime] = Field(default=None, alias="DeleteDate")
    delete_user: Optional[StrictStr] = Field(default=None, alias="DeleteUser")
    is_rejected: Optional[StrictBool] = Field(default=None, alias="IsRejected")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this comment was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this comment.", alias="LastUpdateUser")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    personal_name: Optional[StrictStr] = Field(default=None, description="The commented user's personal or actual name.", alias="PersonalName")
    read_flag: Optional[StrictBool] = Field(default=None, description="The flag that identifies whether a comment is read by a particular user.", alias="ReadFlag")
    rejection_comments: Optional[StrictStr] = Field(default=None, alias="RejectionComments")
    time_diff: Optional[StrictStr] = Field(default=None, description="This field gives the time difference between current and createdate.", alias="TimeDiff")
    user_object_id: StrictInt = Field(description="The unique ID of the user who added this comment.", alias="UserObjectId")
    __properties: ClassVar[List[str]] = ["ActivityObjectId", "AssignmentObjectId", "CommentDate", "CommentText", "CreateDate", "CreateUser", "DeleteDate", "DeleteUser", "IsRejected", "LastUpdateDate", "LastUpdateUser", "ObjectId", "PersonalName", "ReadFlag", "RejectionComments", "TimeDiff", "UserObjectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivityObjectId": obj.get("ActivityObjectId"),
            "AssignmentObjectId": obj.get("AssignmentObjectId"),
            "CommentDate": obj.get("CommentDate"),
            "CommentText": obj.get("CommentText"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "DeleteDate": obj.get("DeleteDate"),
            "DeleteUser": obj.get("DeleteUser"),
            "IsRejected": obj.get("IsRejected"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "ObjectId": obj.get("ObjectId"),
            "PersonalName": obj.get("PersonalName"),
            "ReadFlag": obj.get("ReadFlag"),
            "RejectionComments": obj.get("RejectionComments"),
            "TimeDiff": obj.get("TimeDiff"),
            "UserObjectId": obj.get("UserObjectId")
        })
        return _obj


