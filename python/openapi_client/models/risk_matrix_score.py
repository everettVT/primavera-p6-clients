# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RiskMatrixScore(BaseModel):
    """
    RiskMatrixScore Entity
    """ # noqa: E501
    create_date: Optional[datetime] = Field(default=None, description="The date this risk matrix score was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created the risk matrix score.", alias="CreateUser")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this risk matrix score was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated the risk matrix score.", alias="LastUpdateUser")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    probability_threshold_level: StrictInt = Field(description="The level number of the probability threshold. Valid numbers are 1-9.", alias="ProbabilityThresholdLevel")
    risk_matrix_name: Optional[StrictStr] = Field(default=None, description="The name of the Risk Matrix.", alias="RiskMatrixName")
    risk_matrix_object_id: StrictInt = Field(description="The unique ID of the associated Risk Matrix.", alias="RiskMatrixObjectId")
    severity1: Optional[StrictInt] = Field(default=None, description="The first severity level of the Risk Matrix Score.", alias="Severity1")
    severity1_label: Optional[StrictStr] = Field(default=None, description="The label for the first severity level.", alias="Severity1Label")
    severity2: Optional[StrictInt] = Field(default=None, description="The second severity level of the Risk Matrix Score.", alias="Severity2")
    severity2_label: Optional[StrictStr] = Field(default=None, description="The label for the second severity level.", alias="Severity2Label")
    severity3: Optional[StrictInt] = Field(default=None, description="The third severity level of the Risk Matrix Score.", alias="Severity3")
    severity3_label: Optional[StrictStr] = Field(default=None, description="The label for the third severity level.", alias="Severity3Label")
    severity4: Optional[StrictInt] = Field(default=None, description="The fourth severity level of the Risk Matrix Score.", alias="Severity4")
    severity4_label: Optional[StrictStr] = Field(default=None, description="The label for the forth severity level.", alias="Severity4Label")
    severity5: Optional[StrictInt] = Field(default=None, description="The fifth severity level of the Risk Matrix Score.", alias="Severity5")
    severity5_label: Optional[StrictStr] = Field(default=None, description="The label for the fith severity level.", alias="Severity5Label")
    severity6: Optional[StrictInt] = Field(default=None, description="The sixth severity level of the Risk Matrix Score.", alias="Severity6")
    severity6_label: Optional[StrictStr] = Field(default=None, description="The sixth for the first severity level.", alias="Severity6Label")
    severity7: Optional[StrictInt] = Field(default=None, description="The seventh severity level of the Risk Matrix Score.", alias="Severity7")
    severity7_label: Optional[StrictStr] = Field(default=None, description="The label for the seventh severity level.", alias="Severity7Label")
    severity8: Optional[StrictInt] = Field(default=None, description="The eighth severity level of the Risk Matrix Score.", alias="Severity8")
    severity8_label: Optional[StrictStr] = Field(default=None, description="The label for the eighth severity level.", alias="Severity8Label")
    severity9: Optional[StrictInt] = Field(default=None, description="The ninth severity level of the Risk Matrix Score.", alias="Severity9")
    severity9_label: Optional[StrictStr] = Field(default=None, description="The label for the ninth severity level.", alias="Severity9Label")
    __properties: ClassVar[List[str]] = ["CreateDate", "CreateUser", "LastUpdateDate", "LastUpdateUser", "ObjectId", "ProbabilityThresholdLevel", "RiskMatrixName", "RiskMatrixObjectId", "Severity1", "Severity1Label", "Severity2", "Severity2Label", "Severity3", "Severity3Label", "Severity4", "Severity4Label", "Severity5", "Severity5Label", "Severity6", "Severity6Label", "Severity7", "Severity7Label", "Severity8", "Severity8Label", "Severity9", "Severity9Label"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RiskMatrixScore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RiskMatrixScore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "ObjectId": obj.get("ObjectId"),
            "ProbabilityThresholdLevel": obj.get("ProbabilityThresholdLevel"),
            "RiskMatrixName": obj.get("RiskMatrixName"),
            "RiskMatrixObjectId": obj.get("RiskMatrixObjectId"),
            "Severity1": obj.get("Severity1"),
            "Severity1Label": obj.get("Severity1Label"),
            "Severity2": obj.get("Severity2"),
            "Severity2Label": obj.get("Severity2Label"),
            "Severity3": obj.get("Severity3"),
            "Severity3Label": obj.get("Severity3Label"),
            "Severity4": obj.get("Severity4"),
            "Severity4Label": obj.get("Severity4Label"),
            "Severity5": obj.get("Severity5"),
            "Severity5Label": obj.get("Severity5Label"),
            "Severity6": obj.get("Severity6"),
            "Severity6Label": obj.get("Severity6Label"),
            "Severity7": obj.get("Severity7"),
            "Severity7Label": obj.get("Severity7Label"),
            "Severity8": obj.get("Severity8"),
            "Severity8Label": obj.get("Severity8Label"),
            "Severity9": obj.get("Severity9"),
            "Severity9Label": obj.get("Severity9Label")
        })
        return _obj


