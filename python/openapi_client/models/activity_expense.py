# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ActivityExpense(BaseModel):
    """
    ActivityExpense Entity
    """ # noqa: E501
    accrual_type: Optional[StrictStr] = Field(default=None, description="The accrual type for the project expense. If the accrual type is 'Start of Activity', the entire expense costs are accrued at the start date of the activity. If the accrual type is 'End of Activity', the entire expense costs are accrued at the finish date of the activity. If the accrual type is 'Uniform over Activity', the expense costs are accrued uniformly over the duration of the activity.", alias="AccrualType")
    activity_id: Optional[StrictStr] = Field(default=None, description="The short ID that uniquely identifies the activity within the project.", alias="ActivityId")
    activity_name: Optional[StrictStr] = Field(default=None, description="The name of the activity. The activity name does not have to be unique.", alias="ActivityName")
    activity_object_id: StrictInt = Field(description="The unique ID of the activity to which the project expense is linked. Every project expense is associated with one activity in the project.", alias="ActivityObjectId")
    actual_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The actual cost for the project expense.", alias="ActualCost")
    actual_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The actual units for the project expense.", alias="ActualUnits")
    at_completion_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The sum of the actual plus remaining costs for the project expense. Computed as actual cost + remaining cost.", alias="AtCompletionCost")
    at_completion_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The at completion units for the project expense.", alias="AtCompletionUnits")
    auto_compute_actuals: Optional[StrictBool] = Field(default=None, description="The flag that identifies whether the actual and remaining costs for the expense are computed automatically using the planned cost and the activity's schedule percent complete. If this option is selected, the actual/remaining costs are automatically updated when project actuals are applied. This assumes the expenses are made according to plan.", alias="AutoComputeActuals")
    cbs_code: Optional[StrictStr] = Field(default=None, description="CBS Code.", alias="CBSCode")
    cbsid: Optional[StrictInt] = Field(default=None, description="The unique Id of CBS.", alias="CBSId")
    cost_account_id: Optional[StrictStr] = Field(default=None, description="The id of associated cost account.", alias="CostAccountId")
    cost_account_name: Optional[StrictStr] = Field(default=None, description="The name of the associated cost account.", alias="CostAccountName")
    cost_account_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the cost account associated with the project expense.", alias="CostAccountObjectId")
    create_date: Optional[datetime] = Field(default=None, description="The date this expense was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this expense.", alias="CreateUser")
    document_number: Optional[StrictStr] = Field(default=None, description="The document number for the expense. Use this for the purchase order number, invoice number, requisition number, or similar, as needed.", alias="DocumentNumber")
    expense_category_name: Optional[StrictStr] = Field(default=None, description="The name of the expense category.", alias="ExpenseCategoryName")
    expense_category_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the expense category for the project expense.", alias="ExpenseCategoryObjectId")
    expense_description: Optional[StrictStr] = Field(default=None, description="The description of the expense.", alias="ExpenseDescription")
    expense_item: StrictStr = Field(description="The name of the project expense.", alias="ExpenseItem")
    expense_percent_complete: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percent complete of the project expense.", alias="ExpensePercentComplete")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline", alias="IsBaseline")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this expense was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this expense.", alias="LastUpdateUser")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    over_budget: Optional[StrictBool] = Field(default=None, description="The indicator that reflects whether the project expense is over budget. An expense is over budget when the actual cost + remaining cost exceeds the planned cost.", alias="OverBudget")
    planned_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The planned cost for the project expense. This field is named BudgetedCost in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.", alias="PlannedCost")
    planned_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The planned number of units for the project expense. This number is multiplied by the price per unit to compute the planned cost. This field is named BudgetedUnits in Primavera's Engineering & Construction and Maintenance & Turnaround solutions.", alias="PlannedUnits")
    price_per_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The planned price per unit for the project expense. This number is multiplied by the planned number of units to compute the planned cost.", alias="PricePerUnit")
    project_id: Optional[StrictStr] = Field(default=None, description="The short code that uniquely identifies the project.", alias="ProjectId")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    remaining_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The remaining cost for the project expense. Before actual expenses are made, remaining cost should be the same as planned cost. While the activity is in progress, the remaining cost should be updated to reflect the estimated remaining cost required for the expense. After the expense is completed, the remaining cost should be zero.", alias="RemainingCost")
    remaining_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The remaining units for the project expense.", alias="RemainingUnits")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="The unit of measure for the project expense.", alias="UnitOfMeasure")
    vendor: Optional[StrictStr] = Field(default=None, description="The name of the vendor providing the product or service associated with the expense.", alias="Vendor")
    wbs_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the WBS for the activity.", alias="WBSObjectId")
    __properties: ClassVar[List[str]] = ["AccrualType", "ActivityId", "ActivityName", "ActivityObjectId", "ActualCost", "ActualUnits", "AtCompletionCost", "AtCompletionUnits", "AutoComputeActuals", "CBSCode", "CBSId", "CostAccountId", "CostAccountName", "CostAccountObjectId", "CreateDate", "CreateUser", "DocumentNumber", "ExpenseCategoryName", "ExpenseCategoryObjectId", "ExpenseDescription", "ExpenseItem", "ExpensePercentComplete", "IsBaseline", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "ObjectId", "OverBudget", "PlannedCost", "PlannedUnits", "PricePerUnit", "ProjectId", "ProjectObjectId", "RemainingCost", "RemainingUnits", "UnitOfMeasure", "Vendor", "WBSObjectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityExpense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityExpense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccrualType": obj.get("AccrualType"),
            "ActivityId": obj.get("ActivityId"),
            "ActivityName": obj.get("ActivityName"),
            "ActivityObjectId": obj.get("ActivityObjectId"),
            "ActualCost": obj.get("ActualCost"),
            "ActualUnits": obj.get("ActualUnits"),
            "AtCompletionCost": obj.get("AtCompletionCost"),
            "AtCompletionUnits": obj.get("AtCompletionUnits"),
            "AutoComputeActuals": obj.get("AutoComputeActuals"),
            "CBSCode": obj.get("CBSCode"),
            "CBSId": obj.get("CBSId"),
            "CostAccountId": obj.get("CostAccountId"),
            "CostAccountName": obj.get("CostAccountName"),
            "CostAccountObjectId": obj.get("CostAccountObjectId"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "DocumentNumber": obj.get("DocumentNumber"),
            "ExpenseCategoryName": obj.get("ExpenseCategoryName"),
            "ExpenseCategoryObjectId": obj.get("ExpenseCategoryObjectId"),
            "ExpenseDescription": obj.get("ExpenseDescription"),
            "ExpenseItem": obj.get("ExpenseItem"),
            "ExpensePercentComplete": obj.get("ExpensePercentComplete"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "ObjectId": obj.get("ObjectId"),
            "OverBudget": obj.get("OverBudget"),
            "PlannedCost": obj.get("PlannedCost"),
            "PlannedUnits": obj.get("PlannedUnits"),
            "PricePerUnit": obj.get("PricePerUnit"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "RemainingCost": obj.get("RemainingCost"),
            "RemainingUnits": obj.get("RemainingUnits"),
            "UnitOfMeasure": obj.get("UnitOfMeasure"),
            "Vendor": obj.get("Vendor"),
            "WBSObjectId": obj.get("WBSObjectId")
        })
        return _obj


