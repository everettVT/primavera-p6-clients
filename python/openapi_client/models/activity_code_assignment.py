# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActivityCodeAssignment(BaseModel):
    """
    ActivityCodeAssignment Entity
    """ # noqa: E501
    activity_code_description: Optional[StrictStr] = Field(default=None, description="The description of the associated activity code.", alias="ActivityCodeDescription")
    activity_code_object_id: StrictInt = Field(description="The unique ID of the associated activity code.", alias="ActivityCodeObjectId")
    activity_code_type_name: Optional[StrictStr] = Field(default=None, description="The name of the parent activity code type.", alias="ActivityCodeTypeName")
    activity_code_type_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the parent activity code type.", alias="ActivityCodeTypeObjectId")
    activity_code_type_scope: Optional[StrictStr] = Field(default=None, description="The scope of the associated activity code type: Global, EPS, or Project. An activity code with Global scope can be assigned to any activity. An activity code with EPS scope can be assigned only to an activity within a project under that particular EPS. Similarly, an activity code with Project scope can be assigned only to an activity within that particular project.", alias="ActivityCodeTypeScope")
    activity_code_value: Optional[StrictStr] = Field(default=None, description="The value of the associated activity code.", alias="ActivityCodeValue")
    activity_id: Optional[StrictStr] = Field(default=None, description="The short ID that uniquely identifies the activity to which the activity code is assigned.", alias="ActivityId")
    activity_name: Optional[StrictStr] = Field(default=None, description="The name of the activity to which the activity code is assigned.", alias="ActivityName")
    activity_object_id: StrictInt = Field(description="The unique ID of the activity to which the activity code is assigned.", alias="ActivityObjectId")
    create_date: Optional[datetime] = Field(default=None, description="The date this code assignment was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this code assignment.", alias="CreateUser")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline.", alias="IsBaseline")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this code assignment was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this code assignment.", alias="LastUpdateUser")
    project_id: Optional[StrictStr] = Field(default=None, description="The short code of the associated project.", alias="ProjectId")
    project_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated project.", alias="ProjectObjectId")
    wbs_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the WBS for the associated activity.", alias="WBSObjectId")
    __properties: ClassVar[List[str]] = ["ActivityCodeDescription", "ActivityCodeObjectId", "ActivityCodeTypeName", "ActivityCodeTypeObjectId", "ActivityCodeTypeScope", "ActivityCodeValue", "ActivityId", "ActivityName", "ActivityObjectId", "CreateDate", "CreateUser", "IsBaseline", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "ProjectId", "ProjectObjectId", "WBSObjectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityCodeAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityCodeAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivityCodeDescription": obj.get("ActivityCodeDescription"),
            "ActivityCodeObjectId": obj.get("ActivityCodeObjectId"),
            "ActivityCodeTypeName": obj.get("ActivityCodeTypeName"),
            "ActivityCodeTypeObjectId": obj.get("ActivityCodeTypeObjectId"),
            "ActivityCodeTypeScope": obj.get("ActivityCodeTypeScope"),
            "ActivityCodeValue": obj.get("ActivityCodeValue"),
            "ActivityId": obj.get("ActivityId"),
            "ActivityName": obj.get("ActivityName"),
            "ActivityObjectId": obj.get("ActivityObjectId"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "WBSObjectId": obj.get("WBSObjectId")
        })
        return _obj


