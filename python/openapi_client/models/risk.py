# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Risk(BaseModel):
    """
    Risk Entity
    """ # noqa: E501
    cause: Optional[StrictStr] = Field(default=None, description="The description of the cause of the Risk.", alias="Cause")
    cost_threshold_id: Optional[StrictInt] = Field(default=None, alias="CostThresholdId")
    create_date: Optional[datetime] = Field(default=None, description="The date this risk was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created the risk.", alias="CreateUser")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Risk.", alias="Description")
    effect: Optional[StrictStr] = Field(default=None, description="The description of the risks effect on the project.", alias="Effect")
    exposure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The calculated exposure value for the risk.", alias="Exposure")
    exposure_finish_date: Optional[datetime] = Field(default=None, description="The calculated date the exposure finishes for the risk.", alias="ExposureFinishDate")
    exposure_start_date: Optional[datetime] = Field(default=None, description="The calculated date the exposure starts for the risk.", alias="ExposureStartDate")
    id: StrictStr = Field(description="The ID of the Risk. Must be unique within a project.", alias="Id")
    identified_by_resource_id: Optional[StrictStr] = Field(default=None, description="The short code of the resource that identified the risk.", alias="IdentifiedByResourceId")
    identified_by_resource_name: Optional[StrictStr] = Field(default=None, description="The name of the resource that identified the risk.", alias="IdentifiedByResourceName")
    identified_by_resource_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the resource that identified the risk.", alias="IdentifiedByResourceObjectId")
    identified_date: Optional[datetime] = Field(default=None, description="The date this risk was identified.", alias="IdentifiedDate")
    impact_threshold_values: Optional[StrictInt] = Field(default=None, alias="ImpactThresholdValues")
    is_baseline: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a Project or Baseline.", alias="IsBaseline")
    is_template: Optional[StrictBool] = Field(default=None, description="The boolean value indicating if this business object is related to a template Project.", alias="IsTemplate")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this risk was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated the risk.", alias="LastUpdateUser")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Risk. Does not need to be unique.", alias="Name")
    note: Optional[StrictStr] = Field(default=None, description="The comments associated with the Risk.", alias="Note")
    object_id: Optional[StrictInt] = Field(default=None, description="The unique ID generated by the system.", alias="ObjectId")
    probability_threshold_id: Optional[StrictInt] = Field(default=None, alias="ProbabilityThresholdId")
    project_id: Optional[StrictStr] = Field(default=None, description="The short name of the associated project.", alias="ProjectId")
    project_name: Optional[StrictStr] = Field(default=None, description="The name of the associated project.", alias="ProjectName")
    project_object_id: StrictInt = Field(description="The unique ID of the associated project.", alias="ProjectObjectId")
    resource_id: Optional[StrictStr] = Field(default=None, description="The ID of the resource who owns the Risk. The owner of the Risk is responsible for resolving the Risk.", alias="ResourceId")
    resource_name: Optional[StrictStr] = Field(default=None, description="The name of the resource who owns the Risk. The owner of the Risk is responsible for resolving the Risk.", alias="ResourceName")
    resource_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the associated resource.", alias="ResourceObjectId")
    response_total_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total estimated cost for the risk. If the risk has an associated response plan, the cost is calculated from the risk response actions for the response plan. Not available if user does not have View Project Costs-Financial privilege.", alias="ResponseTotalCost")
    risk_category_name: Optional[StrictStr] = Field(default=None, description="The name of the category to which the Risk is assigned. e.g. Weather, Health, Legal etc. A Risk can only be associated with a single category.", alias="RiskCategoryName")
    risk_category_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the category to which the Risk is assigned. e.g. Weather, Health, Legal etc. A Risk can only be associated with a single category.", alias="RiskCategoryObjectId")
    schedule_threshold_id: Optional[StrictInt] = Field(default=None, alias="ScheduleThresholdId")
    score: Optional[StrictInt] = Field(default=None, description="The calculated score value of the impact values assigned to the risk.", alias="Score")
    score_color: Optional[StrictStr] = Field(default=None, description="The color of the tolerance threshold for the score value.", alias="ScoreColor")
    score_text: Optional[StrictStr] = Field(default=None, description="The calculated score text value of the impact values assigned to the risk.", alias="ScoreText")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the Risk. Valid values are 'Proposed', 'Open', 'Rejected', 'Managed', and 'Impacted'.", alias="Status")
    type: Optional[StrictStr] = Field(default=None, description="The type of the risk. Valid values are 'Threat' and 'Opportunity'.", alias="Type")
    __properties: ClassVar[List[str]] = ["Cause", "CostThresholdId", "CreateDate", "CreateUser", "Description", "Effect", "Exposure", "ExposureFinishDate", "ExposureStartDate", "Id", "IdentifiedByResourceId", "IdentifiedByResourceName", "IdentifiedByResourceObjectId", "IdentifiedDate", "ImpactThresholdValues", "IsBaseline", "IsTemplate", "LastUpdateDate", "LastUpdateUser", "Name", "Note", "ObjectId", "ProbabilityThresholdId", "ProjectId", "ProjectName", "ProjectObjectId", "ResourceId", "ResourceName", "ResourceObjectId", "ResponseTotalCost", "RiskCategoryName", "RiskCategoryObjectId", "ScheduleThresholdId", "Score", "ScoreColor", "ScoreText", "Status", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Risk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Risk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Cause": obj.get("Cause"),
            "CostThresholdId": obj.get("CostThresholdId"),
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "Description": obj.get("Description"),
            "Effect": obj.get("Effect"),
            "Exposure": obj.get("Exposure"),
            "ExposureFinishDate": obj.get("ExposureFinishDate"),
            "ExposureStartDate": obj.get("ExposureStartDate"),
            "Id": obj.get("Id"),
            "IdentifiedByResourceId": obj.get("IdentifiedByResourceId"),
            "IdentifiedByResourceName": obj.get("IdentifiedByResourceName"),
            "IdentifiedByResourceObjectId": obj.get("IdentifiedByResourceObjectId"),
            "IdentifiedDate": obj.get("IdentifiedDate"),
            "ImpactThresholdValues": obj.get("ImpactThresholdValues"),
            "IsBaseline": obj.get("IsBaseline"),
            "IsTemplate": obj.get("IsTemplate"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "Name": obj.get("Name"),
            "Note": obj.get("Note"),
            "ObjectId": obj.get("ObjectId"),
            "ProbabilityThresholdId": obj.get("ProbabilityThresholdId"),
            "ProjectId": obj.get("ProjectId"),
            "ProjectName": obj.get("ProjectName"),
            "ProjectObjectId": obj.get("ProjectObjectId"),
            "ResourceId": obj.get("ResourceId"),
            "ResourceName": obj.get("ResourceName"),
            "ResourceObjectId": obj.get("ResourceObjectId"),
            "ResponseTotalCost": obj.get("ResponseTotalCost"),
            "RiskCategoryName": obj.get("RiskCategoryName"),
            "RiskCategoryObjectId": obj.get("RiskCategoryObjectId"),
            "ScheduleThresholdId": obj.get("ScheduleThresholdId"),
            "Score": obj.get("Score"),
            "ScoreColor": obj.get("ScoreColor"),
            "ScoreText": obj.get("ScoreText"),
            "Status": obj.get("Status"),
            "Type": obj.get("Type")
        })
        return _obj


