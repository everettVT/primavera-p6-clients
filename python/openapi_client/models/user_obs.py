# coding: utf-8

"""
    P6 EPPM Rest API

    The Primavera P6 Enterprise Project Portfolio Management (P6 EPPM) API is a flexible interface to P6 EPPM functionality based on the Representational State Transfer (REST) architectural style. Clients can use HTTP enabled technologies to interact with the API and access application features. For example, you can write programs in Javascript, Java, and other languages to create users, view a list of users, update a user's status, or update user details.

    The version of the OpenAPI document: 2022.12.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserOBS(BaseModel):
    """
    UserOBS Entity
    """ # noqa: E501
    create_date: Optional[datetime] = Field(default=None, description="The date this association was created.", alias="CreateDate")
    create_user: Optional[StrictStr] = Field(default=None, description="The name of the user that created this association.", alias="CreateUser")
    last_update_date: Optional[datetime] = Field(default=None, description="The date this association was last updated.", alias="LastUpdateDate")
    last_update_user: Optional[StrictStr] = Field(default=None, description="The name of the user that last updated this association.", alias="LastUpdateUser")
    profile_name: Optional[StrictStr] = Field(default=None, description="The name of security profile.", alias="ProfileName")
    project_profile_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the project profile with which the user is granted access to the project and OBS. See the ProjectProfile class for a constant defining the fixed profile of Project Superuser.", alias="ProjectProfileObjectId")
    user_name: Optional[StrictStr] = Field(default=None, description="The user's login name.", alias="UserName")
    user_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the user who is assigned to the project OBS.", alias="UserObjectId")
    obs_name: Optional[StrictStr] = Field(default=None, description="The name of the person/role in the organization, sometimes referred to as the \"responsible manager\".", alias="OBSName")
    obs_object_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the OBS to which the user is granted access.", alias="OBSObjectId")
    __properties: ClassVar[List[str]] = ["CreateDate", "CreateUser", "LastUpdateDate", "LastUpdateUser", "ProfileName", "ProjectProfileObjectId", "UserName", "UserObjectId", "OBSName", "OBSObjectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserOBS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserOBS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CreateDate": obj.get("CreateDate"),
            "CreateUser": obj.get("CreateUser"),
            "LastUpdateDate": obj.get("LastUpdateDate"),
            "LastUpdateUser": obj.get("LastUpdateUser"),
            "ProfileName": obj.get("ProfileName"),
            "ProjectProfileObjectId": obj.get("ProjectProfileObjectId"),
            "UserName": obj.get("UserName"),
            "UserObjectId": obj.get("UserObjectId"),
            "OBSName": obj.get("OBSName"),
            "OBSObjectId": obj.get("OBSObjectId")
        })
        return _obj


